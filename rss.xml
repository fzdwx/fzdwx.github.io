<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>fzdwx</title>
        <link>https://fzdwx.github.io</link>
        <description>What your say ?</description>
        <lastBuildDate>Tue, 18 Apr 2023 08:24:34 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en-US</language>
        <image>
            <title>fzdwx</title>
            <url>https://fzdwx.github.io/favicon.ico</url>
            <link>https://fzdwx.github.io</link>
        </image>
        <copyright>© 2023-forever fzdwx</copyright>
        <item>
            <title><![CDATA[go-zero 生成 curd 的逻辑]]></title>
            <link>https://fzdwx.github.io/content/posts/2023-04-18-go-zero-curd-logic.html</link>
            <guid>https://fzdwx.github.io/content/posts/2023-04-18-go-zero-curd-logic.html</guid>
            <pubDate>Tue, 18 Apr 2023 06:29:40 GMT</pubDate>
            <content:encoded><![CDATA[<p>go-zero 提供了一个很好用的工具 goctl, 可以用来生成一些模板代码, 比如根据 .api 文件生成 type, route, handle, logic 以及根据 table 生成 model 代码.</p>
<p>但却少了一个对我们这些 curd boy 更需要的功能, 就是根据 table dsl 生成 curd 的逻辑, 而这在 Java 生态中是一个很基础的功能(Mybatis).</p>
<p>个人猜测这可能跟 go 中各种 ORM 框架百花齐放的原因有关, 且 go-zero 也并没有强制使用某个 ORM 框架, 所以社区就没有实现这个功能.</p>
<p><strong>如何实现?</strong></p>
<p>其实很简单, goctl 已经提供了解析 .api 文件以及读取 table dsl 的功能, 我们只需要结合一下就可了.</p>
<ol>
<li>解析 .api 文件</li>
<li>读取 table 信息</li>
<li>通过 table 信息映射出 add, update, delete, page, get 等功能的 request 以及 response 的类型并放入 apiSpec 中</li>
<li>添加 route 到 apiSpec 中</li>
<li>定义 logic template, 这个是跟 ORM 强相关的, 需要根据情况来实现</li>
<li>生成 type, handle, logic 等代码</li>
<li>生成替换原有的 .api 文件</li>
<li>生成 route</li>
</ol>
<p>还可以加一些扩展功能, 比如根据 请求类型的 tag 来生成 where 条件, 目前我这边是默认为 eq, 但是可以根据 tag 来生成 like, gt, lt 等条件.</p>
<p>大概思路就是这样, 代码就不放出来丢人了...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[并发控制-信号量]]></title>
            <link>https://fzdwx.github.io/content/docs/ostep/2023-04-15-ostep-sem.html</link>
            <guid>https://fzdwx.github.io/content/docs/ostep/2023-04-15-ostep-sem.html</guid>
            <pubDate>Sat, 15 Apr 2023 02:28:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>信号量可以理解为一个装球的袋子(容器), 里面有一定数量的球(资源).</p>
<ul>
<li>每个人都可以从袋子里面取球, 取到球的人就可以使用这个球(资源)</li>
<li>如果袋子中没有球了,那就需要等待有人把球放回袋子里面</li>
</ul>
<div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 尝试获取一个资源</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">//  如果成功了, 离开</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">//  如果失败了, 等待</span></span>
<span class="line"><span style="color: #C792EA">void</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">P</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">sem_t</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD; font-style: italic">sem</span><span style="color: #89DDFF">){</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">wait_until</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">sem</span><span style="color: #89DDFF">-&gt;</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">){</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">sem</span><span style="color: #89DDFF">-&gt;</span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">--;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 释放一个资源</span></span>
<span class="line"><span style="color: #C792EA">void</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">V</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">sem_t</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD; font-style: italic">sem</span><span style="color: #89DDFF">){</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">sem</span><span style="color: #89DDFF">-&gt;</span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">++;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="信号量的应用" tabindex="-1">信号量的应用 <a class="header-anchor" href="#信号量的应用" aria-label="Permalink to &quot;信号量的应用&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="实现生产者消费者模型" tabindex="-1">实现生产者消费者模型 <a class="header-anchor" href="#实现生产者消费者模型" aria-label="Permalink to &quot;实现生产者消费者模型&quot;">&ZeroWidthSpace;</a></h3>
<Gist user="fzdwx" id="444e7f36aa79d22519b42daff6221b00" height="h-[300px]" /><p>输出:</p>
<div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">java</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Main.java</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #FFCB6B">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">)()()</span><span style="color: #89DDFF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">java</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Main.java</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"><span style="color: #FFCB6B">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">))(())(())(())(())(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD">)</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="实现-happens-before" tabindex="-1">实现 happens-before <a class="header-anchor" href="#实现-happens-before" aria-label="Permalink to &quot;实现 happens-before&quot;">&ZeroWidthSpace;</a></h3>
<p>下面的代码能保证 t1 先于 t2 打印</p>
<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Main</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">SuppressWarnings</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">all</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #C792EA">public</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">void</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #C792EA">Semaphore</span><span style="color: #A6ACCD"> fill </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Semaphore</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Thread</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">Run</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">of</span><span style="color: #89DDFF">(()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">-&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">            fill</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">acquire</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #A6ACCD">            System</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">t2</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null;</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">})).</span><span style="color: #82AAFF">start</span><span style="color: #89DDFF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Thread</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">Run</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">of</span><span style="color: #89DDFF">(()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">-&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">            System</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">t1</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #A6ACCD">            fill</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">release</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null;</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">})).</span><span style="color: #82AAFF">start</span><span style="color: #89DDFF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在看的影视剧]]></title>
            <link>https://fzdwx.github.io/content/issues/1.html</link>
            <guid>https://fzdwx.github.io/content/issues/1.html</guid>
            <pubDate>Fri, 31 Mar 2023 11:07:07 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>记录一些影视作品的观看记录哈哈</p>
</blockquote>
<h2 id="最近在看" tabindex="-1">最近在看 <a class="header-anchor" href="#最近在看" aria-label="Permalink to &quot;最近在看&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="动漫" tabindex="-1">动漫 <a class="header-anchor" href="#动漫" aria-label="Permalink to &quot;动漫&quot;">&ZeroWidthSpace;</a></h3>
<ClientOnly>
  <Douban code="35337634"/>
  <Douban code="36129263"/>
  <Douban code="35937645"/>
  <Douban code="35604677" to="https://ddys.art/the-witch-from-mercury/"/>
  <Douban code="35417872" to="https://ddys.art/isekaiojisan/"/>
  <Douban code="35853587"/>
</ClientOnly>
<h2 id="已看完" tabindex="-1">已看完 <a class="header-anchor" href="#已看完" aria-label="Permalink to &quot;已看完&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="动漫-1" tabindex="-1">动漫 <a class="header-anchor" href="#动漫-1" aria-label="Permalink to &quot;动漫&quot;">&ZeroWidthSpace;</a></h3>
<ClientOnly>
  <Douban code="35351365"/>
  <Douban code="35256195" to="https://ddys.art/chainsaw-man" />
  <Douban code="35679830" to="https://www.bilibili.com/bangumi/play/ss39696" />
  <Douban code="35366293" to="https://ddys.art/bocchi-the-rock/"/>
  <Douban code="30238385" to="https://www.bilibili.com/bangumi/play/ss25742?spm_id_from=333.337.0.0"/>
</ClientOnly>
<h3 id="电影" tabindex="-1">电影 <a class="header-anchor" href="#电影" aria-label="Permalink to &quot;电影&quot;">&ZeroWidthSpace;</a></h3>
<ClientOnly>
  <Douban code="2124724" />
  <Douban code="1304624" to="https://www.bilibili.com/bangumi/play/ss32937" />
  <Douban code="1303173" />
  <Douban code="1291550" />
  <Douban code="27060077" />
  <Douban code="30270746" />
  <Douban code="30128916" />
  <Douban code="30323380" />
</ClientOnly>
<h3 id="电视剧" tabindex="-1">电视剧 <a class="header-anchor" href="#电视剧" aria-label="Permalink to &quot;电视剧&quot;">&ZeroWidthSpace;</a></h3>
<ClientOnly>
<Douban code="30198955" to="https://ddys.art/the-peripheral/" />
<Douban code="30291070" to="https://ddys.art/reborn-rich/" />
<Douban code="35314632" to="https://ddys.art/the-glory-2022" />
<Douban code="35465232" />
</ClientOnly>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[并发控制-同步]]></title>
            <link>https://fzdwx.github.io/content/docs/ostep/2023-03-28-ostep-sync.html</link>
            <guid>https://fzdwx.github.io/content/docs/ostep/2023-03-28-ostep-sync.html</guid>
            <pubDate>Tue, 28 Mar 2023 12:55:51 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="怎么实现一个并发安全的计数器" tabindex="-1">怎么实现一个并发安全的计数器 <a class="header-anchor" href="#怎么实现一个并发安全的计数器" aria-label="Permalink to &quot;怎么实现一个并发安全的计数器&quot;">&ZeroWidthSpace;</a></h2>
<p>这是一个并发安全的计数器, 它遵循了简单,正确,易懂的原则, 但有一个致命缺陷就是 <strong>性能</strong></p>
<details class="details custom-block"><summary>简单的并发安全的计数器代码实现</summary>
<div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">type</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Add</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">struct</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    sync</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Mutex</span></span>
<span class="line"><span style="color: #A6ACCD">    count </span><span style="color: #C792EA">int</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">a </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Add</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Get</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">int</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF; font-style: italic">defer</span><span style="color: #A6ACCD"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> a</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">a </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Add</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">incr</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF; font-style: italic">defer</span><span style="color: #A6ACCD"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">    a</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">a </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Add</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">decr</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF; font-style: italic">defer</span><span style="color: #A6ACCD"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">    a</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></details>
<p>跑一个 benchmark, 可以看到加锁和不加锁之间差了近 50 倍</p>
<Gist user="fzdwx" id="3e9dd948b38f12ef39ae760374a1a016" height="h-[400px]" /><h3 id="分段加锁" tabindex="-1">分段加锁 <a class="header-anchor" href="#分段加锁" aria-label="Permalink to &quot;分段加锁&quot;">&ZeroWidthSpace;</a></h3>
<p>通过多个局部计数器和一个全局计数器来实现一个逻辑计数器. 比如说在一个有 8 个 CPU 的计算机中, 共有 8 个局部计数器和一个全局计数器, 并且每个计数器都有一把锁</p>
<p>原理是,如果某个核心要增加就修改它们对应的局部计数器的值(并用当前 CPU 上的锁),所以不会有不同 CPU 的线程的竞争.然后间隔一段时间就同步到全局计数器上,并把当前的局部计数器重置.</p>
<p>这种实现的问题是: 间隔越长性能越好但准确性就越低</p>
<details class="details custom-block"><summary>代码实现</summary>
<div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">type</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Counter</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">struct</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">	global    </span><span style="color: #C792EA">int</span></span>
<span class="line"><span style="color: #A6ACCD">	glock     sync</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Mutex</span></span>
<span class="line"><span style="color: #A6ACCD">	local     </span><span style="color: #89DDFF">[]</span><span style="color: #C792EA">int</span></span>
<span class="line"><span style="color: #A6ACCD">	llock     </span><span style="color: #89DDFF">[]</span><span style="color: #A6ACCD">sync</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Mutex</span></span>
<span class="line"><span style="color: #A6ACCD">	threshold </span><span style="color: #C792EA">int</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">NewCounter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">threshold </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> threadNum </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Counter </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">var</span><span style="color: #A6ACCD"> llock </span><span style="color: #89DDFF">[]</span><span style="color: #A6ACCD">sync</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Mutex</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">var</span><span style="color: #A6ACCD"> local </span><span style="color: #89DDFF">[]</span><span style="color: #C792EA">int</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> threadNum</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">		llock </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">append</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">llock</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> sync</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Mutex</span><span style="color: #89DDFF">{})</span></span>
<span class="line"><span style="color: #A6ACCD">		local </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">append</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">local</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&amp;</span><span style="color: #A6ACCD">Counter</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">		global</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">    </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">		glock</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">     sync</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Mutex</span><span style="color: #89DDFF">{},</span></span>
<span class="line"><span style="color: #A6ACCD">		local</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">     local</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">		llock</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">     llock</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">		threshold</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> threshold</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">c </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Counter</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Add</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">threadId </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">	c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">llock</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">threadId</span><span style="color: #89DDFF">].</span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">defer</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">llock</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">threadId</span><span style="color: #89DDFF">].</span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">	c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">local</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">threadId</span><span style="color: #89DDFF">]++</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">local</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">threadId</span><span style="color: #89DDFF">]</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">threshold </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">glock</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">global </span><span style="color: #89DDFF">+=</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">local</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">threadId</span><span style="color: #89DDFF">]</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">glock</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">local</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">threadId</span><span style="color: #89DDFF">]</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">c </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Counter</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Get</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">int</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">	c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">glock</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">defer</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">glock</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">range</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">local </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">llock</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">].</span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">global </span><span style="color: #89DDFF">+=</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">local</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">]</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">local</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">]</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #A6ACCD">		c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">llock</span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">].</span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">	global </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">global</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> global</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">const</span><span style="color: #A6ACCD"> N </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1000000</span></span>
<span class="line"><span style="color: #89DDFF">const</span><span style="color: #A6ACCD"> threadCount </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">16</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">BenchmarkCounter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">b </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">testing</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">B</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> b</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">N</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">		b</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">StopTimer</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">		c </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">NewCounter</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">100000</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> threadCount</span><span style="color: #89DDFF">)</span></span>
<span class="line"><span style="color: #A6ACCD">		b</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">StartTimer</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">		</span><span style="color: #89DDFF">var</span><span style="color: #A6ACCD"> wg sync</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">WaitGroup</span></span>
<span class="line"><span style="color: #A6ACCD">		</span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> threadCount</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">			wg</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Add</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span></span>
<span class="line"><span style="color: #A6ACCD">			</span><span style="color: #89DDFF; font-style: italic">go</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">func(</span><span style="color: #A6ACCD">threadId </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">				</span><span style="color: #89DDFF; font-style: italic">defer</span><span style="color: #A6ACCD"> wg</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Done</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">				</span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> N</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> j</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">					c</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Add</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">threadId</span><span style="color: #89DDFF">)</span></span>
<span class="line"><span style="color: #A6ACCD">				</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">			</span><span style="color: #89DDFF">}(</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">)</span></span>
<span class="line"><span style="color: #A6ACCD">		</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">		wg</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Wait</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">		assert</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Equal</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> N</span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">threadCount</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> c</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Get</span><span style="color: #89DDFF">())</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div></details>
<p>这就是一种分段锁的思想的体现, 把 <code>(N-1) x threshold</code> 到 <code>N x threshold</code> 分别加锁</p>
<h2 id="条件变量" tabindex="-1">条件变量 <a class="header-anchor" href="#条件变量" aria-label="Permalink to &quot;条件变量&quot;">&ZeroWidthSpace;</a></h2>
<p>在多线程的情况下, 我们可能经常需要等待某一个条件生效, 比如说父线程等待所有子线程都运行完毕( join )</p>
<p>假定下面的程序实现完全正确(count 会按照实现进行正确的--), 下面使用了一个共享变量来记录还在工作的线程的数量,这种实现显而易见是浪费 CPU 的,那么怎么进行改进?</p>
<div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(){</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">var</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> count</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">			</span><span style="color: #89DDFF; font-style: italic">go</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">func(){</span></span>
<span class="line"><span style="color: #A6ACCD">				time</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sleep</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">xxx</span><span style="color: #89DDFF">)</span></span>
<span class="line"><span style="color: #A6ACCD">				count</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #A6ACCD">			</span><span style="color: #89DDFF">}()</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">		</span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">==</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">			</span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #A6ACCD">		</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="wait-与-singal" tabindex="-1">wait 与 singal <a class="header-anchor" href="#wait-与-singal" aria-label="Permalink to &quot;wait 与 singal&quot;">&ZeroWidthSpace;</a></h3>
<p>条件变量有两种操作, wait 和 signal, wait 会阻塞当前线程,直到条件变量被 signal 为止, signal 会唤醒一个等待在条件变量上的线程</p>
<p>这是一个用 Java 使用条件变量的例子, 它实现了一个顺序打印 A,B,C 的功能, 通过一把锁和三个条件变量来实现</p>
<p>核心代码就是 run 方法里面, 通过 while 来不断的运行</p>
<ol>
<li>首先获取锁</li>
<li>输出 message</li>
<li>唤醒下一个线程 singal (其他线程就会运行到获取锁的步骤)</li>
<li>将自己睡眠 await (释放锁)</li>
</ol>
<Gist user="fzdwx" id="d8c7836d3367f0f114f5d7310130cb3d" height="h-[450px]" /><p>这个一个用条件变量实现 join 的例子, <code>Print</code> 启动了一个 Daemon 的线程,正常情况下这个程序启动后会立即结束, 但我们实现了一个 join 的功能, 使得主线程会等待子线程结束后才结束</p>
<Gist user="fzdwx" id="c0279b33be19f1136bdb465e9df5ba1e" height="h-[450px]" />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[并发控制-互斥]]></title>
            <link>https://fzdwx.github.io/content/docs/ostep/2023-03-28-ostep-mutex.html</link>
            <guid>https://fzdwx.github.io/content/docs/ostep/2023-03-28-ostep-mutex.html</guid>
            <pubDate>Tue, 28 Mar 2023 12:09:47 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="为什么需要互斥" tabindex="-1">为什么需要互斥? <a class="header-anchor" href="#为什么需要互斥" aria-label="Permalink to &quot;为什么需要互斥?&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>从指令集的角度看, 一个简单的 ++ 操作可能会被编译为 3 条, load -&gt; add -&gt; store, 一条指令是原子的, 但是 3 条指令就不一定了 —— 操作系统的 Trap 机制</li>
<li>假如这个程序是多线程的, 且这个变量是共享的, 那么就会竞态条件, 比如说第一个线程 load 了 0 并进行 add 得到 1, 在它 store 之前,它被切换出去了, 然后第二个线程来了并运行了一套 load -&gt;add -&gt; store 写入了 0. 这样当第一个线程再次运行时它不知道第二个线程已经对这个变量进行了操作, 从而导致了错误的结果.</li>
</ol>
<h2 id="怎么实现互斥" tabindex="-1">怎么实现互斥? <a class="header-anchor" href="#怎么实现互斥" aria-label="Permalink to &quot;怎么实现互斥?&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="原子交换" tabindex="-1">原子交换 <a class="header-anchor" href="#原子交换" aria-label="Permalink to &quot;原子交换&quot;">&ZeroWidthSpace;</a></h3>
<p>这是一种通过硬件指令实现的互斥, 也是最简单的一种, 但是它的效率不高, 下面是一个简单的示例:</p>
<div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">type</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Mutex</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">struct</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    locked </span><span style="color: #C792EA">int32</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">m </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Mutex</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">xchg</span><span style="color: #89DDFF">(&amp;</span><span style="color: #A6ACCD">m</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">locked</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">==</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #676E95; font-style: italic">// spin</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  m</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">locked </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">m </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Mutex</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Unlock</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  m</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">locked </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">xchg</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">addr </span><span style="color: #89DDFF">*</span><span style="color: #C792EA">int32</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> new </span><span style="color: #C792EA">int32</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">int32</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  old </span><span style="color: #89DDFF">:=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">addr</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">addr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> new</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> old</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>当第一个线程调用了 Lock() 时, 它会将 locked 的值从 0 改为 1, 但是当第二个线程调用 Lock() 时, 它会发现 locked 的值已经是 1 了, 所以它会一直 spin 等待第一个线程将 locked 的值改为 0, 这样就实现了互斥.</p>
<p>而 xchg 就是操作系统提供给我们的一个原子交换指令, 它的作用是将 addr 的值与 new 交换, 并返回 addr 的旧值.</p>
<h3 id="能不能更高效点" tabindex="-1">能不能更高效点? <a class="header-anchor" href="#能不能更高效点" aria-label="Permalink to &quot;能不能更高效点?&quot;">&ZeroWidthSpace;</a></h3>
<p>上面这种锁的优点就是实现简单, 就是会浪费很多 CPU 时间, 比如说一个线程在等待另一个线程释放锁时, 它会一直 spin 等待, 这样就会浪费很多 CPU 时间</p>
<h4 id="主动出让时间片" tabindex="-1">主动出让时间片 <a class="header-anchor" href="#主动出让时间片" aria-label="Permalink to &quot;主动出让时间片&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre v-pre class="shiki material-theme-palenight has-highlighted-lines" ><code><span class="line"><span style="color: #89DDFF">func</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">m </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD">Mutex</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Lock</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">xchg</span><span style="color: #89DDFF">(&amp;</span><span style="color: #A6ACCD">m</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">locked</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">==</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">{</span></span>
<span class="line highlighted"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">yield</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  m</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">locked </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
<div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当 xchg 失败时, 可以主动调用 yield() 出让时间片, 这样就不会浪费 CPU 时间了.</p>
<p>但是这样同样也有个问题, 假如有很多线程都在等待这个锁, 那么它们都会主动出让时间片, 这样同样效率也很低, 因为这个涉及到线程的切换</p>
<h4 id="休眠" tabindex="-1">休眠 <a class="header-anchor" href="#休眠" aria-label="Permalink to &quot;休眠&quot;">&ZeroWidthSpace;</a></h4>
<p>使用休眠的方式来实现互斥, 假设有一个线程列表存放获取这把锁的线程, 当它获取锁失败时就放入休眠列表, 当锁被释放时, 就唤醒休眠列表中的线程.</p>
<p>在 linux 中, futex 就是实现了类似这种机制</p>
]]></content:encoded>
        </item>
    </channel>
</rss>