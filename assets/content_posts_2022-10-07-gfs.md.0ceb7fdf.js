import{_ as e,c as r,o as a,O as i}from"./chunks/framework.0fe354fd.js";const k=JSON.parse('{"title":"GFS","description":"","frontmatter":{"title":"GFS","date":"2022-10-07T13:12:56.000Z","layout":"post","tags":["gfs","transaction"]},"headers":[],"relativePath":"content/posts/2022-10-07-gfs.md"}'),t={name:"content/posts/2022-10-07-gfs.md"},l=i('<ol><li>为了性能(<strong>Performance</strong>), 所以将数据分割放到大量的服务器上,从而实现并行的读取数据,这就是分片(<strong>Sharding</strong>).</li><li>而成败上千的机器总会发生错误,所以有了容错(<strong>Fault Tolerance</strong>).</li><li>实现容错最简单的方式就是复制(<strong>Replication</strong>),其中一个发生故障了就切换另一个.</li><li>使用了复制,如果你不够小心,那么它们之间就可能会不一致.数据就有可能出现问题,所以就有了不一致的问题(<strong>Inconsistency</strong>).</li><li>如果为了实现一致性(<strong>Consistency</strong>),那么就需要多进行额外的交互来保证一致性,所以代价就是低性能(<strong>Low Perf</strong>) ,但这与我们开始的希望不符合.</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>So,强一致性代表着低性能.</p></div><h2 id="设计目标" tabindex="-1">设计目标 <a class="header-anchor" href="#设计目标" aria-label="Permalink to &quot;设计目标&quot;">​</a></h2><ol><li>由于GFS是建立在大量的计算机上的,而这些计算机会不可避免的发生故障.所以必须要进行：<strong>检查,容错以及快速从故障恢复</strong>.</li><li><strong>主要支持大文件</strong>(例如说好几个G的文件),同时也支持小文件但不做针对性的优化.</li><li>工作负载主要由两种类型的读取组成：<strong>大的流式读取</strong>和<strong>小的随机读取</strong> .对于性能有过特别考虑的应用通常会作批处理并且对他们读取的内容进行排序,这样可以使得他们的读取始终是单向顺序读取,而不需要往回读取数据. <ul><li>在大的流式读取中,单个操作通常要读取数百k,甚至1m或者更大的数据.对于同一个客户端来说,往往会发起连续的读取操作顺序读取一个文件.</li><li>小的随机读取通常在某个任意的偏移位置读取几kb的数据.小规模的随机读取通常在文件的不同位置,读取几k数据.</li></ul></li><li>GFS中的文件通常上一旦完成写入就很少会再次修改,所以主要针对<strong>大的流式读取</strong>,同时夜支持任意位置的小规模写入操作.</li><li>GFS对多个客户端并行添加同一个文件必须要有非常有效且明确语义的支持,即<strong>原子操作</strong>.通常会有多个客户端会并行的对同一个文件进行append.</li><li>高性能的稳定带宽的网络要比低延时更加重要.我们大多数的目标应用程序都非常<strong>重视高速批量处理数据</strong> ,而很少有人对单个读写操作有严格的响应时间要求.</li></ol><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><ol><li>单个master,多个chunk server(保存具体的文件),多个client.</li><li>每个文件被拆分为一定大小(64mb)的块(chunk),且每个chunk有一个唯一的64位的标志(chunk handle).</li><li>每个chunk都会在不同的chunk server上保存备份(默认是3个),用户可以指定不同的复制级别.</li><li>master管理元数据(metadata),例如文件到chunk的映射关系,chunk的位置信息等.</li><li>master管理chunk的分片,孤点chunk的垃圾回收机制,chunk server之间的镜像管理等</li><li>每个chunk server与master之间有心跳机制,并在检测的过程中年发出指令并收集状态.</li></ol><h2 id="gfs-master中的metadata" tabindex="-1">GFS Master中的metadata <a class="header-anchor" href="#gfs-master中的metadata" aria-label="Permalink to &quot;GFS Master中的metadata&quot;">​</a></h2><ol><li>filename -&gt; chunk ids(chunk handles) <em><strong>NV</strong></em></li><li>chunk handle与chunk数据的对应关系 <ul><li>chunk保存在哪个服务器上(chunk server list)</li><li>chunk的version no <em><strong>NV</strong></em></li><li>chunk的primary chunk server,因为写操作在在其上进行</li><li>primary chunk server的lease expiration</li></ul></li></ol><p>这两个data table都在master的内存中存放,为了容错(例如说重启后数据不丢失数据),它会在磁盘上存储log,读取的使用从内存里面读取,写的时候会写入内存以及磁盘. 每当有数据变更时,就会在磁盘上的日志进行追加,并且定期(日志增长超过某一个大小)创建checkpoint(类似快照,不用从头开始读取)</p><h2 id="gfs-read-steps" tabindex="-1">GFS Read Steps <a class="header-anchor" href="#gfs-read-steps" aria-label="Permalink to &quot;GFS Read Steps&quot;">​</a></h2><ol><li>首先读请求就表明client有filename以及想要读取的位置(offset),然后发送给master.</li><li>master收到请求后就从filenames中获取对应的chunk handles.而每个chunk的大小上固定的,所以就得到的具体开始的chunk handle.</li><li>然后根据chunk handle找到对应存放数据的chunk server的列表返回给client.</li><li>client可以选择一个server来进行读取(论文中说会选择一个最近的服务器,应为google里面ip是连续的,可以根据ip判断远近) ,应为客户端每次只读取1mb或者64kb的数据,所以它会缓存chunk与chunk server的关系,这样就不用每次都请求.</li><li>chunk server收到请求后,根据chunk handle(推测chunk是安装chunk handle进行命名的)找到对应的chunk以及offset对应的数据给客户端.</li></ol><h3 id="q1-如果读取的数据跨越了一个chunk怎么办" tabindex="-1">q1: 如果读取的数据跨越了一个chunk怎么办？ <a class="header-anchor" href="#q1-如果读取的数据跨越了一个chunk怎么办" aria-label="Permalink to &quot;q1: 如果读取的数据跨越了一个chunk怎么办？&quot;">​</a></h3><p>例如说client想要读取的数据超过了64mb,或者仅仅上是2个byte却跨越了chunk,client会在发送请求时注意到这次请求跨越了边界, 所以会将一个请求拆分为2个请求发送到master,所以这里可能上向master发送两次读请求,之后在向不同的chunk server读取数据.</p><h2 id="多个副本之间变更顺序的一致性" tabindex="-1">多个副本之间变更顺序的一致性 <a class="header-anchor" href="#多个副本之间变更顺序的一致性" aria-label="Permalink to &quot;多个副本之间变更顺序的一致性&quot;">​</a></h2><p>针对一个chunk</p><ol><li>master授权给某个持有这个chunk的server一个租约期限(60s),称为primary.</li><li>primary对所有的更改操作进行排序(serial order),然后其他的secondary根据这个顺序进行变更.</li><li>只要这个chunk正在变更,那么primary就可以向master申请延长租约.</li></ol><h2 id="gfs-write-steps" tabindex="-1">GFS Write Steps <a class="header-anchor" href="#gfs-write-steps" aria-label="Permalink to &quot;GFS Write Steps&quot;">​</a></h2><ol><li>client向master发送请求获取chunk server list(primary,secondaries), 如果没有primary,master就会选择一个secondary成为primary.</li><li>client获取到chunk server list后会缓存下来,只有当primary 没有响应或租约过期后才会再次请求.</li><li>client将数据推送到所有replicas,客户端不保证推送的顺序,每个chunk server会将数据保存在内部的lur cache中,直到数据被使用或过期.</li><li>当所有replicas都收到了数据,client将会发送一个写请求到primary,它标识了之前推送到每个副本的数据. primary将这些写入组织成一定的顺序应用到自己本地.</li><li>primary然后将这个应用顺序转发给各个secondary.</li><li>secondaries应用这个顺序完成修改并答复primary.</li><li>primary答复client,如果出现了任意错误也会答复给client.在出现错误的情况下,write request也可能在primary以及secondary中成功 (如果primary直接就失败了,那么它将不会转发serial order给secondaries),client将认为这次请求是失败的,它会通过重试来处理( 3-7尝试几次重新写入)</li></ol><h2 id="gfs-atomic-record-appends" tabindex="-1">GFS Atomic Record Appends <a class="header-anchor" href="#gfs-atomic-record-appends" aria-label="Permalink to &quot;GFS Atomic Record Appends&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">对同一片区域个并发写入是不可序列化的</p><p>这片区域可能最终包含多个客户端的数据片段.</p></div><p>一个原子的append操作.<code>recored append</code>至少会在给定的offset(GFS自己选择的,因为这里可能会失败,可能有一些chunk server上有这个数据) 上追加到文件上一次,并将该offset返回给client.它类似<code>O_APPEND</code>保证原子性. <code>recored append</code>遵守<a href="#gfs-write-steps"> GFS Write Steps </a>流程,但是有一些特别的地方:</p><ol><li>client推送所有数据后,primary会检查append到该chunk后是否超过了单个chunk的大小.</li><li>如果超过了,则在当前chunk填充到最大offset时(secondary也要保存),回复client,指出该操作应该在下一个chunk上重试( record的大小需要控制在单个chunk最大值的四分之一,以保证碎片在可接收的水平).</li><li>如果没有超过最大大小,则按照正常的情况进行保存.</li></ol><h2 id="过期副本检测" tabindex="-1">过期副本检测 <a class="header-anchor" href="#过期副本检测" aria-label="Permalink to &quot;过期副本检测&quot;">​</a></h2><p>如果chunk server发生故障而宕机或者丢失了某些更新请求,那么它就有可能过期了.对于每个chunk,master都维护了一个version no来标识最新和过期的副本.</p><p>当master为一个chunk的primary server授权或续期时就会增加version no并通知所有replicas进行更新.</p><p>在数据一致的情况下,master和所有replicas的version no是一致的(在client发送写请求之前可以保证).</p><p>当chunk server重启或上报version no时,master会检查它时否包含过期的副本,如果发现master发现version no大于它的记录,master会采用更高的version no进行更新.</p><p>master通过周期性的垃圾回收来删除过期的副本,在删除前,它会确认在它所有client的chunk信息请求的应答中没有包含这个过期的副本.</p><p>client在从master获取chunk server列表时会附带获取version no,所以它可以进行比对,选择最新的副本进行操作.</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这并不是一个合格的多副本,多活,高可用,故障自修复的分布式系统.</p><h2 id="links" tabindex="-1">Links <a class="header-anchor" href="#links" aria-label="Permalink to &quot;Links&quot;">​</a></h2><ol><li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/gfs-sosp2003.pdf" target="_blank" rel="noreferrer">gfs paper 原文</a></li><li><a href="https://zhuanlan.zhihu.com/p/424677701" target="_blank" rel="noreferrer">gfs paper 中文翻译</a></li><li><a href="https://www.bilibili.com/video/BV1R7411t71W/?p=3&amp;spm_id_from=333.788.top_right_bar_window_history.content.click&amp;vd_source=98f230be6561d2fc7450e7ce05876f68" target="_blank" rel="noreferrer">gfs 视频</a></li><li><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/lecture-03-gfs/3.1" target="_blank" rel="noreferrer">gfs 视频翻译</a></li><li><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/lecture-03-gfs/3.2-qiang-yi-zhi-xing-strong-consistency" target="_blank" rel="noreferrer">Bad Replication Design</a></li></ol>',33),n=[l];function s(o,c,h,p,d,u){return a(),r("div",null,n)}const g=e(t,[["render",s]]);export{k as __pageData,g as default};
