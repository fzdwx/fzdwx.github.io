import{_ as s,c as n,o as a,O as e}from"./chunks/framework.76b8e124.js";const b=JSON.parse('{"title":"隐写术","description":"","frontmatter":{"title":"隐写术","date":"2022-12-07T13:37:59.000Z","tags":["fun"],"layout":"post","summary":"最近在跟 cs61c,第一个 project 中介绍了隐写术,大意可以理解为一个文件的内容是`123`,在经过特定的编码转换后成了`456`.","cover":{"image":"/images/14.png"}},"headers":[],"relativePath":"content/posts/2022-12-07-steganography.md"}'),p={name:"content/posts/2022-12-07-steganography.md"},l=e(`<p>在这个项目中是用的图片来作为案例的,首先通过介绍了一种图片的编码形式, ppm:</p><ul><li>第一行表示是什么格式的 ppm 文件</li><li>第二行表示宽和高</li><li>第三行表示颜色范围</li><li>后面的就是各个像素的RGB值</li></ul><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">P3</span></span>
<span class="line"><span style="color:#A6ACCD;">2 2</span></span>
<span class="line"><span style="color:#A6ACCD;">255</span></span>
<span class="line"><span style="color:#A6ACCD;"> 29  83  36      45  64  57</span></span>
<span class="line"><span style="color:#A6ACCD;">188 229 201     123 162 184</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>他是这么介绍的:</p><blockquote><p>我们将探索一种隐藏消息的方法.虽然大多数图像的每个 RGB 通道都有 8 位数据,但人眼无法轻易看出后 4 位的差异.因此,我们可以将信息隐藏在图像的底部位中.我们通过修改每个像素 B 值的最低有效位, 如果最后一位是 0,则把整个像素转换为黑色(255,255,255),如果最后一位是 1,则转换为白色(0,0,0).</p></blockquote><p>关键就是： <strong>每个 RGB 通道都有 8 位数据,但人眼无法轻易看出后 4 位的差异</strong>,所以这就给了我们操作的空间.</p>`,6),t=[l];function o(r,c,i,_,m,u){return a(),n("div",null,t)}const C=s(p,[["render",o]]);export{b as __pageData,C as default};
