import{_ as s,c as a,o as l,O as n}from"./chunks/framework.0fe354fd.js";const e="/images/12333.png",o="/images/1001.png",p="/images/2023-03-16-21-45-20.png",b=JSON.parse('{"title":"记录学习 jyyos 操作系统课","description":"","frontmatter":{"title":"记录学习 jyyos 操作系统课","date":"2023-03-05T14:27:31.000Z","update":"2023-03-08T22:09:34+0800","tags":["os","linux"],"layout":"post"},"headers":[],"relativePath":"content/posts/2023-03-05-jyyos_c_compile.md"}'),t={name:"content/posts/2023-03-05-jyyos_c_compile.md"},c=n(`<blockquote><p>最近也是又追起了南京大学的操作系统课(前面几次都中途放弃了),记录一下</p><ol><li>课程网站: <a href="http://jyywiki.cn/OS/2023/" target="_blank" rel="noreferrer">http://jyywiki.cn/OS/2023/</a></li><li>课程代码仓库: <a href="https://git.nju.edu.cn/jyy/os-workbench" target="_blank" rel="noreferrer">https://git.nju.edu.cn/jyy/os-workbench</a></li><li>课程视频: <a href="https://www.bilibili.com/video/BV1xX4y1d7v2" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1xX4y1d7v2</a></li><li>OSTEP: <a href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noreferrer">https://pages.cs.wisc.edu/~remzi/OSTEP/</a> <a href="https://github.com/remzi-arpacidusseau/ostep-translations/tree/master/chinese" target="_blank" rel="noreferrer">中文</a></li></ol></blockquote><h3 id="_1-首先就是编译第三节课的一个-demo-时-找不到-ld-等命令" tabindex="-1">1. 首先就是编译第三节课的一个 demo 时,找不到 ld 等命令 <a class="header-anchor" href="#_1-首先就是编译第三节课的一个-demo-时-找不到-ld-等命令" aria-label="Permalink to &quot;1. 首先就是编译第三节课的一个 demo 时,找不到 ld 等命令&quot;">​</a></h3><blockquote><p><a href="http://jyywiki.cn/OS/2023/build/lect3.ipynb" target="_blank" rel="noreferrer">http://jyywiki.cn/OS/2023/build/lect3.ipynb</a> demo(&#39;hello-os&#39;, &#39;i/hello-os&#39;)</p></blockquote><p>由于我使用的是 archlinux, <code>binutils</code> 编译出来的 ld, gcc 等命令都是不带 x86 的前缀的, 而 Makefile 中定义的都是带 x86 的, 所以需要建立一个链接:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ln</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/bin/ld</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/bin/x86_64-linux-gnu-ld</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">来自 chatgpt 的解释:</p><p>该命令创建了一个名为“x86_64-linux-gnu-ld”的符号链接,指向“/usr/bin/ld”.这个符号链接可以被用作“x86_64-linux-gnu-ld”二进制文件的替代品. 符号链接是一种特殊的文件类型,它是一个指向另一个文件的文件,可以用来在文件系统中创建指向其他文件或目录的别名.</p><p>在 Linux 系统中,“/usr/bin/ld”是一个连接器（linker）,用于将多个目标文件合并为单个可执行文件.通过创建“x86_64-linux-gnu-ld”的符号链接,可以使该链接器的功能可以在不同的系统上使用,并且不需要更改可执行文件的代码. <a href="http://jyywiki.cn/OS/2023/build/lect3.ipynb" target="_blank" rel="noreferrer">123</a> 这个符号链接通常被用于交叉编译（cross-compiling）应用程序,这种情况下,应用程序在不同的硬件平台上运行.</p></div><h3 id="_2-使用-vscode-等编辑器时-第一个问题的代码中头文件无法跳转" tabindex="-1">2. 使用 vscode 等编辑器时,第一个问题的代码中头文件无法跳转 <a class="header-anchor" href="#_2-使用-vscode-等编辑器时-第一个问题的代码中头文件无法跳转" aria-label="Permalink to &quot;2. 使用 vscode 等编辑器时,第一个问题的代码中头文件无法跳转&quot;">​</a></h3><p>使用 bear 生成 compile_commands.json, 然后编辑器就会自动识别了</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bear</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">来自 chatgpt 的解释:</p><p>该命令使用 Bear 和 Make 工具,用于自动捕获 Makefile 的编译命令和编译期间的调用链.</p><p>具体来说,Bear 是一个工具,它可以将系统调用跟踪器（strace）输出转换为 JSON 格式的文件,这个文件包含了所有运行期间的系统调用. Make 是一个工具,它用于根据 Makefile 规则自动构建和编译程序.</p><p>当这两个工具一起使用时,可以使用“bear -- make”命令自动捕获 Makefile 的编译命令和编译期间的调用链,这个过程可以在后续的调试中使用. 该命令的执行将产生一个 JSON 格式的文件,其中包含编译期间的所有系统调用和它们的参数.这个文件可以用于调试,性能优化,以及自动化编译和构建系统的开发.</p><p>总之,“bear -- make”命令可以帮助程序员更好地理解他们的代码在编译期间所做的事情,以及识别代码中的潜在问题.</p></div><h3 id="_3-写一个-pstree-m1" tabindex="-1">3. 写一个 pstree - M1 <a class="header-anchor" href="#_3-写一个-pstree-m1" aria-label="Permalink to &quot;3. 写一个 pstree - M1&quot;">​</a></h3><blockquote><p><a href="http://jyywiki.cn/OS/2023/labs/M1" target="_blank" rel="noreferrer">http://jyywiki.cn/OS/2023/labs/M1</a></p></blockquote><p>实现思路:</p><ol><li>扫描 <code>/proc/</code> 目录下所有为数字的文件夹</li><li>读取 <code>/proc/{pid}/status</code> 文件</li><li>读取 name 以及 ppid</li><li>建树并打印树结构</li></ol><h3 id="_4-关于编译新的-os-workbench" tabindex="-1"><s>4. 关于编译新的 os-workbench</s> <a class="header-anchor" href="#_4-关于编译新的-os-workbench" aria-label="Permalink to &quot;~~4. 关于编译新的 os-workbench~~&quot;">​</a></h3><p><s>今天尝试下载了一下 2023 年的代码仓库,没想到可以下了</s></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">~git clone https://git.nju.edu.cn/jyy/os-workbench.git~~</span></span>
<span class="line"></span></code></pre></div><p><s>然后我就拉了 L0 来跑,但是怎么样都跑不动: <code>[-Werror=array-bounds]</code> 是关于数组越界的</s><s>文件是 <code>os-workbench/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o:433</code></s></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">~git pull origin L0~~</span></span>
<span class="line"></span></code></pre></div><p><s>解决办法是在 <code>os-workbench/abstract-machine/Makefile</code> 的 <code>CFLAGS</code> 最后添加 <code>-Wno-array-bounds</code></s></p><h3 id="_5-跑起来-2023-版的代码" tabindex="-1">5. 跑起来 2023 版的代码 <a class="header-anchor" href="#_5-跑起来-2023-版的代码" aria-label="Permalink to &quot;5. 跑起来 2023 版的代码&quot;">​</a></h3><p>昨天晚上在我在本机的 L0 代码下 <code>make run</code> 是跑不起来的,qemu 正常启动了但是界面是黑的,环境是</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">archlinux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">6.2.2-arch1-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">qemu</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7.2</span></span>
<span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">12.2.1</span></span>
<span class="line"></span></code></pre></div><p>最后只能曲线救国,在 docker 中 build, 然后在本机跑 qemu (docker 中不方便按图形化界面)</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu:</span><span style="color:#F78C6C;">22.04</span></span>
<span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DEBIAN_FRONTEND=noninteractive</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build-essential</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc-multilib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">qemu-system</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">strace</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gdb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libsdl2-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libreadline-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llvm-</span><span style="color:#F78C6C;">11</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">useradd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-ms</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user</span></span>
<span class="line"><span style="color:#FFCB6B;">USER</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user</span></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/users</span></span>
<span class="line"></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jyyos</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># os-workbench</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">PWD</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">:/mnt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/mnt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jyyos</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># exit docker : os-workbench/kernel</span></span>
<span class="line"><span style="color:#FFCB6B;">make</span></span>
<span class="line"><span style="color:#FFCB6B;">qemu-system-x86_64</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-serial</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mon:stdio</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-machine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">accel=tcg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-smp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-drive</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">format=raw,file=./build/kernel-x86_64-qemu</span></span>
<span class="line"></span></code></pre></div><p>可能还是编译出了问题, 使用 docker 编译后就没有出现第 4 个问题</p><p><img src="`+e+'" alt="run kernel"></p><h3 id="_6-在-abstractmachine-中显示一张图片-l0" tabindex="-1">6. 在 AbstractMachine 中显示一张图片 - L0 <a class="header-anchor" href="#_6-在-abstractmachine-中显示一张图片-l0" aria-label="Permalink to &quot;6. 在 AbstractMachine 中显示一张图片 - L0&quot;">​</a></h3><p>这个我记得去年是做一个可以动的游戏,根据键盘的输入去做一些响应,而今年的是只要打印一张图片,大概思路:</p><ol><li><code>xxd -i xxx.png &gt; img_data.h</code></li><li>遍历这个数组,取 rgb 并调用 <code>draw_title</code></li><li>解析参数,获取要输出的分辨率,然后在获得宽高的缩放比,最后获得对于的像素点</li></ol><p><img src="'+o+'" alt="1800x1200"></p><p><img src="'+p+'" alt="320x240"></p><p>感觉我的实现有问题,只是放大了左上角</p>',34),r=[c];function i(C,y,d,h,D,A){return l(),a("div",null,r)}const m=s(t,[["render",i]]);export{b as __pageData,m as default};
