import{_ as e,c as o,o as t,O as c}from"./chunks/framework.0fe354fd.js";const u=JSON.parse('{"title":"一个 VitePress 博客主题","description":"","frontmatter":{"title":"一个 VitePress 博客主题","date":"2023-03-27T19:53:12+08:00","layout":"post","tags":["project","front"]},"headers":[],"relativePath":"content/posts/2023-03-27-vitepress-blog-theme.md"}'),s={name:"content/posts/2023-03-27-vitepress-blog-theme.md"},i=c('<blockquote><p>这两天写了一个 <code>vitepress</code> blog 主题, 用来替换掉 <code>hugo</code>, 原本的<a href="https://github.com/fzdwx/blog-history" target="_blank" rel="noreferrer">博客存档</a></p></blockquote><p>在功能上尽可能的和原本的主题一致,比如说:</p><ol><li><code>post</code>, 用于存放普通的博客</li><li><code>issue</code>, 一种可以动态更新的博客, 个人以前用来存放一些资料和收藏夹等 <ul><li>现在跟以前一样都是用 Gtihub action 来实现的, 不同点是现在直接提供了一个 cli 工具, 用户可以随时拉取</li><li>以前则全部都是用 action 实现的 - <a href="/content/posts/2022-10-15-about-github-action.html">相关介绍</a></li></ul></li><li><code>docs</code>, 用于存放文档/笔记. 得益于使用 vitepress, 所以文档的功能很强大, 有侧边栏,大纲等 <ul><li>大纲是自动生成的, 可以根据一个 <code>group</code> 来进行分组</li><li>而原主题的 <code>docs</code> 跟 <code>post</code> 是一样的</li></ul></li></ol><p>我还提供了一个 cli 工具, 它可以同来辅助使用 <code>vitepress-blog-theme</code>:</p><ol><li>初始化主题: <code>bang init</code></li><li>同步 issue: <code>bang sync</code></li><li>创建 page: <code>bang new</code></li><li>同步主题: <code>bang update</code></li></ol><hr><p>主题地址: <a href="https://github.com/fzdwx/vitepress-blog-theme" target="_blank" rel="noreferrer">https://github.com/fzdwx/vitepress-blog-theme</a></p>',7),l=[i];function r(a,d,p,n,_,h){return t(),o("div",null,l)}const b=e(s,[["render",r]]);export{u as __pageData,b as default};
