import{_ as e,c as a,o as s,V as n}from"./chunks/framework.22f4a02e.js";const o="/images/2.png",u=JSON.parse('{"title":"HTTP协议","description":"","frontmatter":{"layout":"post","title":"HTTP协议","date":"2022-09-28T04:19:15.000Z","tags":["network","http","interview"],"summary":"简介HTTP/1.1与H2."},"headers":[],"relativePath":"content/posts/2022-09-28-http-protocol.md"}'),t={name:"content/posts/2022-09-28-http-protocol.md"},l=n(`<blockquote><p>HTTP 1.1之前的实现就不讨论了,因为它们已经过时太久了,我上网的时候就已经接触不到了,所以主要说说HTTP/1.1、HTTP/2.</p></blockquote><h2 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h2><h3 id="http-1-1协议报文简介" tabindex="-1">HTTP/1.1协议报文简介 <a class="header-anchor" href="#http-1-1协议报文简介" aria-label="Permalink to &quot;HTTP/1.1协议报文简介&quot;">​</a></h3><blockquote><p>CRLF: <code>\\r\\n</code></p><p>METHOD: HTTP请求,<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>...</p><p>URI: 统一资源标识符,例如<code>/</code>,<code>/index.html</code>...</p><p>HTTPVersion: HTTP协议的版本号,例如<code>HTTP/1.1</code>,<code>HTTP/2</code></p><p>HEADERS: 请求头,例如<code>Host:localhost</code>,<code>Accept: */*</code>.</p><p>BODY: 请求体,例如说一个JSON数据<code>{&quot;name&quot;:&quot;fzdwx&quot;}</code></p><p>HTTPStatus: HTTP响应状态,常见的有<code>200</code>,<code>404</code>等</p><p>HTTPStatusDesc: HTTP响应状态描述,<code>200</code>对应的<code>OK</code>.</p></blockquote><h4 id="请求" tabindex="-1">请求 <a class="header-anchor" href="#请求" aria-label="Permalink to &quot;请求&quot;">​</a></h4><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">METHOD&lt;SPACE&gt;URI&lt;SPACE&gt;HTTPVersion</span></span>
<span class="line"><span style="color:#A6ACCD;">HEADERS</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;CRLF&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">BODY</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>示例:</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> /hello </span><span style="color:#F78C6C;">HTTP</span><span style="color:#A6ACCD;">/</span><span style="color:#F78C6C;">1.1</span></span>
<span class="line"><span style="color:#F07178;">Host</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">192.168.1.107:8889</span></span>
<span class="line"><span style="color:#F07178;">Connection</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">keep-alive</span></span>
<span class="line"><span style="color:#F07178;">Cache-Control</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">max-age=0</span></span>
<span class="line"><span style="color:#F07178;">Upgrade-Insecure-Requests</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">1</span></span>
<span class="line"><span style="color:#F07178;">User-Agent</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36</span></span>
<span class="line"><span style="color:#F07178;">Accept</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span>
<span class="line"><span style="color:#F07178;">Accept-Encoding</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gzip, deflate</span></span>
<span class="line"><span style="color:#F07178;">Accept-Language</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zh-CN,zh;q=0.9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="响应" tabindex="-1">响应 <a class="header-anchor" href="#响应" aria-label="Permalink to &quot;响应&quot;">​</a></h4><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HTTPVersion HTTPStatus HTTPStatusDesc</span></span>
<span class="line"><span style="color:#A6ACCD;">HEADERS</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;CRLF&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">BODY</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>示例:</p><blockquote><p>如果响应中使用了<code>transfer-encoding: chunked</code>这个来替代<code>Content-Length</code> ,就表示这是一个不固定大小的响应,结尾通常用<code>0\\r\\n</code>来分割.</p></blockquote><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#F07178;">transfer-encoding</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chunked</span></span>
<span class="line"><span style="color:#F07178;">content-type</span><span style="color:#F78C6C;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">application/json; charset=utf-8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">0/r/n</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="http-1-1主要新特性" tabindex="-1">HTTP/1.1主要新特性 <a class="header-anchor" href="#http-1-1主要新特性" aria-label="Permalink to &quot;HTTP/1.1主要新特性&quot;">​</a></h3><ol><li>默认是长连接(<code>Connection: Keep-alive</code>),支持一个TCP连接处理多个请求.</li><li>缓存策略,在请求头中使用<code>Cache-Control</code>,<code>Expires</code>,<code>Last-Modified</code>,<code>ETag</code>等来控制.</li><li>允许响应分块,就是上面提到的<code>transfer-encoding: chunked</code>,允许服务端可以多次返回响应体.</li></ol><p>但是还是存在一定的问题,例如说如果有一个TCP连接阻塞了,还是会开启新的TCP连接进行处理请求.</p><h2 id="h2" tabindex="-1">H2 <a class="header-anchor" href="#h2" aria-label="Permalink to &quot;H2&quot;">​</a></h2><p>HTTP2中的主要概念:</p><ol><li><code>Connection</code>: 一个TCP连接包含一个或多个<code>Stream</code>,所有的通讯都在<strong>一个TCP连接</strong>上完成.</li><li><code>Stream</code>: 一个可以双向通讯的数据流,包含一条或多条<code>Message</code>,每个数据流都一个<strong>唯一标识符</strong>以及<strong>可选的优先级</strong>信息.</li><li><code>Message</code>: 对应HTTP/1.1中的请求或响应,包含一条或多条<code>Frame</code>.</li><li><code>Frame</code>: <strong>最小传输单位</strong>,它以<strong>二进制</strong>进行编码.</li></ol><p><a href="/images/1.png">HTTP通讯简图</a></p><p>在HTTP/1.1中是有<code>Start Line</code> + <code>header</code> + <code>body</code> 组成的,而在H2中是由一个<code>HEADER Frame</code>以及多个<code>DATA Frame</code>组成的.</p><p><img src="`+o+'" alt="HTTP/1.1与H2报文组成的区别"></p><h3 id="frame" tabindex="-1">Frame <a class="header-anchor" href="#frame" aria-label="Permalink to &quot;Frame&quot;">​</a></h3><p>通常有一些公共的字段,例如<code>Length</code>,<code>Type</code>,<code>Flags</code>以及<code>Stream Id</code>；也各个类型所独有的字段.</p><p>分类如下:</p><ul><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-0" target="_blank" rel="noreferrer">DATA</a>: 用于传输http消息体.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-1" target="_blank" rel="noreferrer">HEADERS</a>: 用于传输首部字段.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-2" target="_blank" rel="noreferrer">PRIORITY</a>: 用于指定或重新指定引用资源的优先级.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-3" target="_blank" rel="noreferrer">RST_STREAM</a>: 用于通知流的非正常终止.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-4" target="_blank" rel="noreferrer">SETTINGS</a>: 用于约定客户端和服务端的配置数据.例如设置初识的双向流量控制窗口大小.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-9" target="_blank" rel="noreferrer">PUSH_PROMISE</a>: 服务端推送许可.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-10" target="_blank" rel="noreferrer">PING</a>: 用于计算往返时间,执行“ 活性” 检活.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-11" target="_blank" rel="noreferrer">GOAWAY</a>: 用于通知对端停止在当前连接中创建流.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-12" target="_blank" rel="noreferrer">WINDOW_UPDATE</a>: 用于调整个别流或个别连接的流量.</li><li><a href="https://halfrost.com/http2-http-frames-definitions/#toc-17" target="_blank" rel="noreferrer">CONTINUATION</a>: 专门用于传递较大 HTTP 头部时的持续帧.</li></ul><h3 id="为什么h2必须要走https" tabindex="-1">为什么H2必须要走HTTPS？ <a class="header-anchor" href="#为什么h2必须要走https" aria-label="Permalink to &quot;为什么H2必须要走HTTPS？&quot;">​</a></h3><p>这其实在H2标准中没有规定,主要是为了更方便的进行HTTP协议的 升级/协商,确认一个Web服务器是否支持H2通常有两种方式:</p><ol><li>在请求头中设置<code>Upgrade: HTTP/2.0</code>以及<code>Connection: Upgrade,HTTP2-Settings</code>等,类似升级到<code>Websocket</code>.</li><li>使用<code>TLS</code>中的<code>ALPN</code>(Application Layer Protocol Negotiation,应用层协议协商)中的<code>ALPN Next Protocol</code> 字段,在<code>Client Hello</code>与<code>Server Hello</code>这个阶段就可以确定下来.</li></ol><p>而现在的<strong>浏览器</strong>基本都是<strong>实现的方式二</strong>,即<strong>与HTTPS绑定在一起</strong>.但是如果我们不用浏览器进行访问,当然也可以不用HTTPS.</p><p>详细可<a href="https://imququ.com/post/protocol-negotiation-in-http2.html" target="_blank" rel="noreferrer">参考</a>.</p><h3 id="为什么h2能实现并行响应请求" tabindex="-1">为什么H2能实现并行响应请求? <a class="header-anchor" href="#为什么h2能实现并行响应请求" aria-label="Permalink to &quot;为什么H2能实现并行响应请求?&quot;">​</a></h3><p>在HTTP/1.1中,请求与响应是一一对应的,在同一个连接里,客户端依次发送两个请求,一段时间以后收到来自服务器的一个响应,这个响应一定是对应于第一个发出去的请求的. 因为<strong>没有一个标志来表示哪个响应对应哪个请求</strong>.</p><p>而在H2中基于<code>Stream</code>和<code>Frame</code>的设计: <strong>每个<code>Frame</code>都带有<code>Stream Id</code>来标识是否为同一个<code>Stream</code>里面的数据</strong>,每个<code>Stream</code> 互不影响,这样就能做到在一个TCP里面连接里面传输多对请求/响应.</p><h2 id="h2的新特性" tabindex="-1">H2的新特性 <a class="header-anchor" href="#h2的新特性" aria-label="Permalink to &quot;H2的新特性&quot;">​</a></h2><p>H2的对HTTP/1.1优化的核心就是 <strong>使用尽可能少的连接数</strong>.</p><ol><li>多路复用: 只用一个TCP连接就能处理多对 请求/响应 ,不用在开启另外的TCP连接,就是通过<code>Stream</code>与<code>Frame</code>来实现的.</li><li>二进制分帧: 使用<code>Frame</code>为最小单位进行通讯,并采用二进制编码.</li><li><a href="https://juejin.cn/post/7133238781452222472" target="_blank" rel="noreferrer">头部压缩</a>: 使用<code>HPACK</code>算法进行优化. <ul><li>维护一份相同的<a href="https://httpwg.org/specs/rfc7541.html#static.table.definition" target="_blank" rel="noreferrer">静态字典</a>,包含常见的请求头的KV组合</li><li>一份动态字典,可以动态的扩容(每个连接单独维护)</li><li>支持哈夫曼编码(<a href="https://httpwg.org/specs/rfc7541.html#huffman.code" target="_blank" rel="noreferrer">静态哈夫曼码表</a>)</li></ul><blockquote><p>在HTTP/1中消息体可以用gzip进行压缩,但是请求头通常没有任何压缩,有时候请求头的数据可能比请求体的数据还多.</p></blockquote></li><li>请求优先级: 一般在<code>HEADERS</code>帧与<code>PRIORITY</code>帧中携带,通常依赖于服务端的支持程度.</li></ol><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="生成测试签名" tabindex="-1">生成测试签名 <a class="header-anchor" href="#生成测试签名" aria-label="Permalink to &quot;生成测试签名&quot;">​</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> $GOROOT</span><span style="color:#C3E88D;">/src/crypto/tls/generate_cert.go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">localhost</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用curl调试https" tabindex="-1">使用curl调试HTTPS <a class="header-anchor" href="#使用curl调试https" aria-label="Permalink to &quot;使用curl调试HTTPS&quot;">​</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://zcygov.cn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-vv</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="links" tabindex="-1">Links <a class="header-anchor" href="#links" aria-label="Permalink to &quot;Links&quot;">​</a></h2><ul><li><a href="https://httpwg.org/specs/rfc7540.html" target="_blank" rel="noreferrer">Hypertext Transfer Protocol Version 2 (HTTP/2)</a></li><li><a href="https://httpwg.org/specs/rfc7541.html" target="_blank" rel="noreferrer">HPACK: Header Compression for HTTP/2</a></li><li><a href="https://imququ.com/post/http2-resource.html" target="_blank" rel="noreferrer">HTTP/2资料汇总</a></li><li><a href="https://halfrost.com/http2-http-frames-definitions/" target="_blank" rel="noreferrer">HTTP/2中帧的定义</a></li><li><a href="https://www.dropbox.com/s/4duv6cqrhud4qzw/HTTP2%EF%BC%9A%E6%96%B0%E7%9A%84%E6%9C%BA%E9%81%87%E4%B8%8E%E6%8C%91%E6%88%98.pdf?dl=0" target="_blank" rel="noreferrer">HTTP/2新的机遇与挑战</a></li><li><a href="https://zhuanlan.zhihu.com/p/566351358" target="_blank" rel="noreferrer">探索http1.0到http3.0的发展史,详解http2.0</a></li><li><a href="https://www.zhihu.com/question/34074946/answer/2264788574" target="_blank" rel="noreferrer">HTTP/2相比1.0有哪些重大改进</a></li></ul>',44),r=[l];function p(c,i,d,h,m,C){return s(),a("div",null,r)}const b=e(t,[["render",p]]);export{u as __pageData,b as default};
