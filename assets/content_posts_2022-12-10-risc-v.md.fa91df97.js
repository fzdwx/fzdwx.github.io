import{_ as s,c as a,o as l,O as n}from"./chunks/framework.0fe354fd.js";const p="/images/20221210211515.png",o="/images/20221210211545.png",e="/images/3.png",t="/images/20221212130603.png",c="/images/20221212152022.png",r="/images/20221213192858.png",i="/images/20221224214056.png",C="/images/20221224220039.png",y="/images/20221224220349.png",A="/images/20221224221104.png",D="/images/20221224221434.png",v=JSON.parse('{"title":"RISC-V 简介","description":"","frontmatter":{"title":"RISC-V 简介","date":"2022-12-10T12:41:41.000Z","tags":["risc-v","os","asm"],"layout":"post","summary":"RISC-V 是一种指令集(汇编语言),是一种 low-level 的编程语言,高级语言通过编译器编译到汇编语言"},"headers":[],"relativePath":"content/posts/2022-12-10-risc-v.md"}'),F={name:"content/posts/2022-12-10-risc-v.md"},d=n('<h2 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;Resource&quot;">​</a></h2><ol><li><a href="https://inst.eecs.berkeley.edu/~cs61c/sp21/resources-pdfs/riscvcard.pdf" target="_blank" rel="noreferrer">RISC-V Green Card</a></li><li><a href="https://inst.eecs.berkeley.edu/~cs61c/sp21/resources-pdfs/RISCV_Calling_Convention.pdf" target="_blank" rel="noreferrer">RISC-V Call convertion</a></li><li><a href="https://github.com/fzdwx/fzdwx.github.io/releases/download/v1.0/p.h.pdf" target="_blank" rel="noreferrer">P&amp;H(RISC-V)</a></li></ol><p>在汇编语言中没有变量这个概念,汇编语言通常操作的是<strong>寄存器</strong>.算术指令的操作数必须取自寄存器,内建于硬件的特殊位置(CPU 内？).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>寄存器</strong>（Register）是<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8" title="中央处理器" target="_blank" rel="noreferrer">中央处理器</a>内用来暂存指令、<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E6%93%9A" title="数据" target="_blank" rel="noreferrer">数据</a>和<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80" title="内存地址" target="_blank" rel="noreferrer">地址</a>的<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E8%A8%98%E6%86%B6%E9%AB%94" title="电脑存储器" target="_blank" rel="noreferrer">电脑存储器</a>.寄存器的存贮容量有限,读写速度非常快.在<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E6%9E%B6%E6%A7%8B" title="计算机体系结构" target="_blank" rel="noreferrer">计算机体系结构</a>里,寄存器存储在已知时间点所作计算的中间结果,通过快速地访问数据来加速<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%A8%8B%E5%BC%8F" title="计算机程序" target="_blank" rel="noreferrer">计算机程序</a>的执行.</p></div><h2 id="risc-v-card" tabindex="-1">RISC-V Card <a class="header-anchor" href="#risc-v-card" aria-label="Permalink to &quot;RISC-V Card&quot;">​</a></h2><h3 id="risc-v-操作数" tabindex="-1">RISC-V 操作数 <a class="header-anchor" href="#risc-v-操作数" aria-label="Permalink to &quot;RISC-V 操作数&quot;">​</a></h3><p><img src="'+p+'" alt="123"></p><ul><li>如果寄存器的大小是 64 位 则称为<strong>双字</strong>,32 位 则是<strong>单字</strong>.</li><li>x<sub>0</sub> 被硬连接到 0 <ul><li><code>add x3, x4, x0</code> =&gt; <code>x3 = x4</code> (x0 is hard-wired to value 0)</li></ul></li></ul><h2 id="汇编指令" tabindex="-1">汇编指令 <a class="header-anchor" href="#汇编指令" aria-label="Permalink to &quot;汇编指令&quot;">​</a></h2><p><img src="'+o+'" alt=""></p><p><img src="'+e+`" alt=""></p><h2 id="存储操作数" tabindex="-1">存储操作数 <a class="header-anchor" href="#存储操作数" aria-label="Permalink to &quot;存储操作数&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>将数据从内存复制到寄存器的数据传输指令称为 <em>载入指令(<code>load</code>)</em>.在 RISC-V 中指令是 <strong>ld</strong>,表示取双字.</p></div><h3 id="一个从数组中取值的-c-程序-写出汇编代码" tabindex="-1">一个从数组中取值的 C 程序,写出汇编代码 <a class="header-anchor" href="#一个从数组中取值的-c-程序-写出汇编代码" aria-label="Permalink to &quot;一个从数组中取值的 C 程序,写出汇编代码&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">g </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> h </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span></code></pre></div><p>A 是一个 100 个双字组成的数组,g, h 分别存储在 x20, x21 中,数组起始地址或<em>基址</em>位于 x22 中.</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ld x9, </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">(x22) // x9 = A[</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x21, x20, x9</span><span style="color:#676E95;font-style:italic;">; // x21 = x20 + x9</span></span>
<span class="line"></span></code></pre></div><p>存放基址的寄存器(x22)被称为<em>基址寄存器</em>, 数据传输指令中的 8 称为<em>偏移量</em>.</p><p><img src="`+t+'" alt="实际的RISC-V内存地址和内存中双字的内容. 双字地址是 8 的倍数,同理单字地址是 4 的倍数"></p><div class="tip custom-block"><p class="custom-block-title">大端与小端编址</p><p>计算机分为两种,一种使用最左边或“大端”字节的地址作为双字地址,另一种使用最右端或“小端”字节的地址作为双字地址.</p><p>RISC-V 使用小端 .由于仅在以双字形式和 8 个单独字节访问相同数据时,字节顺序才有影响,因此大多情况不需要关系“大小端”.</p></div><p>所以为了上面的代码获得正确的字节地址加到 x22 这个寄存器的偏移量为 64（8x8）.</p><p>与载入指令相反的指令通常被成为<em>存储指令(store)</em>,从寄存器复制数据到内存.指令是<code>sd</code>,表示存储双字.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在一些体系结构中,字的起始地址必须是 4 的倍数,双字的起始地址必须是 8 的倍数.该要求成为<em>对齐限制</em></p></div><p>RISC-V 和 Intel x86 没有对齐限制,但 MIPS 有这个限制.</p><p><img src="'+c+`" alt=""></p><h3 id="使用-load-和-store-编译生成指令" tabindex="-1">使用 load 和 store 编译生成指令 <a class="header-anchor" href="#使用-load-和-store-编译生成指令" aria-label="Permalink to &quot;使用 load 和 store 编译生成指令&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> h </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span></code></pre></div><p>h 存放在 x21 中,A 的基址存放在 x22 中.</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ld x9, </span><span style="color:#F78C6C;">64</span><span style="color:#A6ACCD;">(x22)  // x9 = A[</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x9, x21, x9 // x9 = h + A[</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">sd x9, </span><span style="color:#F78C6C;">96</span><span style="color:#A6ACCD;">(x22)  // A[</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">] = x9</span></span>
<span class="line"></span></code></pre></div><h3 id="将字符串复制程序编译为汇编" tabindex="-1">将字符串复制程序编译为汇编 <a class="header-anchor" href="#将字符串复制程序编译为汇编" aria-label="Permalink to &quot;将字符串复制程序编译为汇编&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">strcpy</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		i </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>x, y 的基址存放在 x10 和 x11 中, i 存放在 x19 中.</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">strcpy</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, -</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">  // 调整栈指针,以存放一个item(x19)</span></span>
<span class="line"><span style="color:#A6ACCD;">	sd x19, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)    // x19 入栈</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x19, x0, x0  // x19 = </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> + </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#82AAFF;">L1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x5, x19, x11 // x5 = x19 + x11 =&gt; address of y[i] </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> x5</span></span>
<span class="line"><span style="color:#A6ACCD;">	lbu x6, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(x5)    // </span><span style="color:#82AAFF;">temp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> x6 = y[i]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x7, x19, x10 // x5 = x19 + x11 =&gt; address of x[i] </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> x7</span></span>
<span class="line"><span style="color:#A6ACCD;">	sd  x6, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(x7)    // x[i] = y[i]</span></span>
<span class="line"><span style="color:#A6ACCD;">	beq x6, x0, L2   // if x6 ==</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> then go to L2</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi x19, x19, </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> // i = i  + </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">	jal x0, L1       // go to L1</span></span>
<span class="line"><span style="color:#82AAFF;">L2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ld x19, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)    // 恢复 x19 以及栈指针</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#A6ACCD;">	jalr x0, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(x1)</span></span>
<span class="line"></span></code></pre></div><h3 id="一段循环代码编译为汇编" tabindex="-1">一段循环代码编译为汇编 <a class="header-anchor" href="#一段循环代码编译为汇编" aria-label="Permalink to &quot;一段循环代码编译为汇编&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">  3i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++){</span></span>
<span class="line"><span style="color:#F07178;">	sum </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>RISC-V 汇编（32 bit)</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x9, x8, x0    </span><span style="color:#676E95;font-style:italic;"> # x9 = &amp;A[0]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x10, x0, x0   </span><span style="color:#676E95;font-style:italic;"> # sum</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x11, x0, x0   </span><span style="color:#676E95;font-style:italic;"> # i</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi x13,x0, </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"> # 20</span></span>
<span class="line"><span style="color:#89DDFF;">Loop</span><span style="color:#A6ACCD;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">	bge x11, x13, Done</span><span style="color:#676E95;font-style:italic;"> # if x11 &gt; x13 go to Down(end loop)</span></span>
<span class="line"><span style="color:#A6ACCD;">	lw x12, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(x9)     </span><span style="color:#676E95;font-style:italic;"> # x12 = A[i]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> x10, x10, x12 </span><span style="color:#676E95;font-style:italic;"> # sum</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi x9, x9, </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"> # x9 = &amp;A[i+1]</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi x11, x11, </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"> # i++</span></span>
<span class="line"><span style="color:#A6ACCD;">	j </span><span style="color:#89DDFF;">loop</span></span>
<span class="line"><span style="color:#82AAFF;">Done</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span></code></pre></div><h2 id="逻辑操作" tabindex="-1">逻辑操作 <a class="header-anchor" href="#逻辑操作" aria-label="Permalink to &quot;逻辑操作&quot;">​</a></h2><ul><li><code>and</code> <code>andi</code><ul><li><code>and x5, x6, x9</code> =&gt; x5 = x6 &amp; x9</li><li><code>addi x5, x6, 3</code> =&gt; x5 = x6 &amp; 3</li></ul></li><li><code>sll</code> <code>ssli</code> , 左移(扩大) <ul><li><code>slli x11, x23, 2</code> =&gt; x11 = x23 &lt;&lt; 2</li><li>0000 0010 =&gt; 2</li><li>0000 1000 =&gt; 8</li></ul></li><li><code>srl</code> <code>srli</code> , 右移（缩小) <ul><li><code>srli x23, x11, 2</code> = &gt; x23 = x11 &gt;&gt; 2</li><li>0000 1000 =&gt; 8</li><li>0000 0010 =&gt; 2</li></ul></li><li><code>sra</code> <code>srai</code>, 算数右移 <ul><li>1111 1111 1111 1111 1111 1111 1110 0111 = -25</li><li><code>srai x10, x10, 4</code></li><li>1111 1111 1111 1111 1111 1111 1111 1110 = -2</li></ul></li></ul><h2 id="helpful-risc-v-assmebler-features" tabindex="-1">Helpful RISC-V Assmebler Features <a class="header-anchor" href="#helpful-risc-v-assmebler-features" aria-label="Permalink to &quot;Helpful RISC-V Assmebler Features&quot;">​</a></h2><ol><li>a0 - a7 是参数寄存器(x10 - x17,用于函数调用.</li><li>zero 代表 x0</li><li><code>mv rd, rs = addi rd, rs, 0</code></li><li><code>li rd, 13 = addi rd, x0, 13</code></li><li><code>nop = addi x0, x0</code></li><li><code>la a1 Lable</code> 将 Label 的 地址 加载到 a1</li><li>a0 - a7(x10 - x17): 8 个寄存器用于参数传递以及两个返回值(a0 - a1)</li><li>ra（x1）: 一个返回 address 的寄存器,用于返回原点（调用的位置）</li><li>s0 - s1(x8 - x9) and s2 - s11 (s18 - x27): 保存的寄存器</li></ol><h2 id="risc-v-函数调用的转换" tabindex="-1">RISC-V 函数调用的转换 <a class="header-anchor" href="#risc-v-函数调用的转换" aria-label="Permalink to &quot;RISC-V 函数调用的转换&quot;">​</a></h2><ol><li>寄存器比内存快,所以使用它们</li><li><code>jal rd, Label</code> 跳转和链接 <ol><li><code>jal x1, 100</code></li></ol></li><li><code>jalr rd, rs, imm</code> 跳转和链接寄存器 <ol><li><code>jalr x1, 100(x5)</code></li></ol></li><li><code>jal Lable</code> =&gt; <code>jal ra, Lable</code> 调用函数</li><li><code>jalr s1</code> 当 s1 是方法指针时,这就是一个函数调用</li></ol><h3 id="一段函数调用转换为汇编" tabindex="-1">一段函数调用转换为汇编 <a class="header-anchor" href="#一段函数调用转换为汇编" aria-label="Permalink to &quot;一段函数调用转换为汇编&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	retrun x </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> mv a0, s0             </span><span style="color:#676E95;font-style:italic;"> # x = a</span></span>
<span class="line"><span style="color:#F78C6C;">1004</span><span style="color:#A6ACCD;"> mv a1, s1             </span><span style="color:#676E95;font-style:italic;"> # y= b</span></span>
<span class="line"><span style="color:#F78C6C;">1008</span><span style="color:#A6ACCD;"> addi ra, zero, </span><span style="color:#F78C6C;">1016</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"> # 1016 is sum function</span></span>
<span class="line"><span style="color:#F78C6C;">1012</span><span style="color:#A6ACCD;"> j                     </span><span style="color:#676E95;font-style:italic;"> # jump to sum</span></span>
<span class="line"><span style="color:#F78C6C;">1016</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> a0, a0, a1</span></span>
<span class="line"><span style="color:#F78C6C;">2004</span><span style="color:#A6ACCD;"> jr ra</span></span>
<span class="line"></span></code></pre></div><p>1008 ~ 1012 可以使用 <code>jal sum</code> 来替代、</p><h3 id="调用函数的基本步骤" tabindex="-1">调用函数的基本步骤 <a class="header-anchor" href="#调用函数的基本步骤" aria-label="Permalink to &quot;调用函数的基本步骤&quot;">​</a></h3><ol><li>把需要的参数放到方法可以访问的地方（寄存器）</li><li>转移控制权给函数,使用(<code>jal</code>) <ol><li>保持地址,并跳转到函数的地址</li></ol></li><li>获取函数执行所需的(local)存储资源</li><li>执行预期的函数</li><li>将返回值放在调用代码可以访问的地方,并恢复我们使用到的寄存器,释放本地存储</li><li>将控制器返回给主处理器（<code>ret</code>), 使用存储在寄存器中的地址,返回到调用它的地方</li></ol><h3 id="方法调用示例" tabindex="-1">方法调用示例 <a class="header-anchor" href="#方法调用示例" aria-label="Permalink to &quot;方法调用示例&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">leaf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">h</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">j</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	f </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">g </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> h</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	retrun f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol><li>g,h,i,j in a0,a1,a2,a3</li><li>f in s0</li><li>temp is s1</li></ol><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">leaf</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	# prologue start</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, -</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"> # 腾出 8byte 来存放的2个整数</span></span>
<span class="line"><span style="color:#A6ACCD;">	sw s1, </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)     </span><span style="color:#676E95;font-style:italic;"> # 保存 s1, s0 到 sp 中</span></span>
<span class="line"><span style="color:#A6ACCD;">	sw s0, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	# prologue end</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> s0, a0, a1   </span><span style="color:#676E95;font-style:italic;"> # f = g + h</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> s1, a2, a3   </span><span style="color:#676E95;font-style:italic;"> # temp = i + j</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">sub</span><span style="color:#A6ACCD;"> a0, s0, s1   </span><span style="color:#676E95;font-style:italic;"> # a0 = （g + h) - (i + j)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	# epilogue</span></span>
<span class="line"><span style="color:#A6ACCD;">	lw s0, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)     </span><span style="color:#676E95;font-style:italic;"> # 恢复 s1, s0</span></span>
<span class="line"><span style="color:#A6ACCD;">	lw s1, </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	jr ra</span></span>
<span class="line"></span></code></pre></div><h2 id="sp" tabindex="-1">sp <a class="header-anchor" href="#sp" aria-label="Permalink to &quot;sp&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>sp 是栈指针,从内存空间 的最顶部开始向下增长,在 RISC-V 中使用 x2 这个寄存器.</p><ol><li>push 是减少 sp 的指针地址</li><li>pop 是增加</li></ol></div><p>每个函数都有一组存放在栈上的数据,它们是<strong>栈帧</strong>（stack frame ）,栈帧通常包含：</p><ol><li>返回地址</li><li>参数</li><li>使用的局部变量的空间</li></ol><h2 id="嵌套函数调用" tabindex="-1">嵌套函数调用 <a class="header-anchor" href="#嵌套函数调用" aria-label="Permalink to &quot;嵌套函数调用&quot;">​</a></h2><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sumSquare</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mult</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在 ra 中有一个 sumSquare 想要跳回的值,但是这个值会被调用 mult 覆盖.</p><ol><li>caller: 调用函数的人</li><li>calle： 被调用的函数</li><li>当被调用者从执行中返回时,调用者需要知道哪些寄存器可能发生了变化,哪些寄存器被保证是不变的.</li><li>寄存器规定： 即哪些寄存器在程序调用(<code>jal</code>) 后将被取消缓存 ,哪些可以被改变. <ol><li>即有一些寄存器是易失的(temp),一些是要保存的（<strong>调用者需要恢复它们原来的值</strong>）.</li><li>这优化了每次进入栈帧的寄存器的数量</li></ol></li><li>分类: <ol><li>跨函数调用保留: <ol><li>sp, gp, tp</li><li>s0 - s11 (s0 is also fp)</li></ol></li><li>不保留: <ol><li>参数寄存器以及返回寄存器： a0 - a7, ra</li><li>temp 寄存器: t0 - t6</li></ol></li></ol></li></ol><p>上面代码的 RISC-V</p><p>x in a1, y in a1</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">sumSquare</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;"> -</span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#A6ACCD;">	sw ra, </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)             // save retrun address to </span><span style="color:#89DDFF;">sp</span></span>
<span class="line"><span style="color:#A6ACCD;">	sw a1, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)             // save s1 to y</span></span>
<span class="line"><span style="color:#A6ACCD;">	mv a1, a0                // y = x =&gt; mult(x,x)</span></span>
<span class="line"><span style="color:#A6ACCD;">	jal mult                 // </span><span style="color:#89DDFF;">call</span><span style="color:#A6ACCD;"> mult</span></span>
<span class="line"><span style="color:#A6ACCD;">	lw a1, </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)             // get y from </span><span style="color:#89DDFF;">sp</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">add</span><span style="color:#A6ACCD;"> a0, a0, a1           // mult() + y</span></span>
<span class="line"><span style="color:#A6ACCD;">	lw ra, </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)             // get retrun address from </span><span style="color:#89DDFF;">sp</span></span>
<span class="line"><span style="color:#A6ACCD;">	addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#A6ACCD;">	jr ra</span></span>
<span class="line"></span></code></pre></div><h2 id="risc-v-寄存器名称" tabindex="-1">RISC-V 寄存器名称 <a class="header-anchor" href="#risc-v-寄存器名称" aria-label="Permalink to &quot;RISC-V 寄存器名称&quot;">​</a></h2><p><img src="`+r+`" alt=""></p><h2 id="risc-v-方法调用套路" tabindex="-1">RISC-V 方法调用套路 <a class="header-anchor" href="#risc-v-方法调用套路" aria-label="Permalink to &quot;RISC-V 方法调用套路&quot;">​</a></h2><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">matmul</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"> # 压栈,腾出空间保存我们要使用的几个 s 寄存器</span></span>
<span class="line"><span style="color:#A6ACCD;">    addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;"> -</span><span style="color:#F78C6C;">36</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw ra </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s0 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s1 </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s2 </span><span style="color:#F78C6C;">12</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s3 </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s4 </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s5 </span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s6 </span><span style="color:#F78C6C;">28</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sw s7 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">body</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"> # xxx xxx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"> # 恢复寄存器的值</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw ra </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s0 </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s1 </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s2 </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s3 </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s4 </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s5 </span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s6 </span><span style="color:#F78C6C;">28</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    lw s7 </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    addi </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">36</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">ret</span></span>
<span class="line"></span></code></pre></div><h1 id="risc-v-指令二进制的表示" tabindex="-1">RISC-V 指令二进制的表示 <a class="header-anchor" href="#risc-v-指令二进制的表示" aria-label="Permalink to &quot;RISC-V 指令二进制的表示&quot;">​</a></h1><h2 id="r-格式布局" tabindex="-1">R 格式布局 <a class="header-anchor" href="#r-格式布局" aria-label="Permalink to &quot;R 格式布局&quot;">​</a></h2><p>用于算术和逻辑运算的指令</p><p><img src="`+i+'" alt=""></p><ol><li>opcode,funct3, funct7 : 将告诉我们是否要执行加,减,左移,异或等操作. <ol><li>R-format 的 opcode 固定为 0110011</li></ol></li><li>一个 add 操作： <code>add x18 x19 x10</code> =&gt; <code>x18 = x19 + x10</code></li><li><code>0000000 01010 10011 000 10010 0110011</code></li><li><code>rs2 = x19</code>, <code>rs1 = x10</code>, <code>rd = x18</code></li></ol><h2 id="i-格式布局" tabindex="-1">I 格式布局 <a class="header-anchor" href="#i-格式布局" aria-label="Permalink to &quot;I 格式布局&quot;">​</a></h2><p>处理立即数,比如<code>addi rd rs1, imm</code> =&gt; <code>addi a0 a0 1</code></p><p><img src="'+C+'" alt=""></p><ol><li>imm 的范围是 -2084 ～ 2047</li></ol><p><img src="'+y+'" alt="addi x15 x1 -50"></p><h2 id="risc-v-loads" tabindex="-1">RISC-V Loads <a class="header-anchor" href="#risc-v-loads" aria-label="Permalink to &quot;RISC-V Loads&quot;">​</a></h2><p>load 指令也是 I 类型的.</p><p><img src="'+A+'" alt="lw x14 8(x2)"></p><h2 id="s-格式布局" tabindex="-1">S 格式布局 <a class="header-anchor" href="#s-格式布局" aria-label="Permalink to &quot;S 格式布局&quot;">​</a></h2><p><img src="'+D+'" alt=""></p>',83),h=[d];function x(m,u,g,b,f,k){return l(),a("div",null,h)}const _=s(F,[["render",x]]);export{v as __pageData,_ as default};
