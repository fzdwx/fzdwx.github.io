import{I as l,a as X,d as I,u as H,m as L,o as m,c as E,b as u,D as $,G as N,n as Q,F as nn,R as mn,C as k,J as Cn,_ as j,a5 as dn,q as _n,A as Un,E as z,t as tn,h as hn,f as es,w as jn,i as ls,j as ps,a6 as ts,r as U,N as un,H as os,a0 as rs,a1 as cs,S as An,U as Fn,a2 as is,a3 as us,Q as vn,a7 as ds,k as ys,a8 as Ds,a9 as bs,aa as ms,ab as Cs,ac as hs,ad as As,ae as Fs,af as fs,ag as gs,ah as vs,ai as ws,aj as xs,ak as ks,M as Es}from"./chunks/framework.22f4a02e.js";import{V as _s,n as Ss,u as Ms,I as Ts,d as qs,c as Bs,a as $s,b as Ps,_ as Ls,e as Is,f as Os,g as Rs,h as Hs,i as Ns,j as zs,k as Us,t as js}from"./chunks/theme.fa6aa78b.js";var Ws=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},wn={},Gs={get exports(){return wn},set exports(n){wn=n}};(function(n,s){(function(a,e){n.exports=e()})(Ws,function(){var a=1e3,e=6e4,p=36e5,o="millisecond",i="second",d="minute",F="hour",A="day",w="week",h="month",q="quarter",f="year",R="date",V="Invalid Date",Z=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,M=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,x={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(y){var c=["th","st","nd","rd"],t=y%100;return"["+y+(c[(t-20)%10]||c[t]||c[0])+"]"}},_=function(y,c,t){var D=String(y);return!D||D.length>=c?y:""+Array(c+1-D.length).join(t)+y},W={s:_,z:function(y){var c=-y.utcOffset(),t=Math.abs(c),D=Math.floor(t/60),r=t%60;return(c<=0?"+":"-")+_(D,2,"0")+":"+_(r,2,"0")},m:function y(c,t){if(c.date()<t.date())return-y(t,c);var D=12*(t.year()-c.year())+(t.month()-c.month()),r=c.clone().add(D,h),C=t-r<0,b=c.clone().add(D+(C?-1:1),h);return+(-(D+(t-r)/(C?r-b:b-r))||0)},a:function(y){return y<0?Math.ceil(y)||0:Math.floor(y)},p:function(y){return{M:h,y:f,w,d:A,D:R,h:F,m:d,s:i,ms:o,Q:q}[y]||String(y||"").toLowerCase().replace(/s$/,"")},u:function(y){return y===void 0}},en="en",J={};J[en]=x;var fn=function(y){return y instanceof rn},on=function y(c,t,D){var r;if(!c)return en;if(typeof c=="string"){var C=c.toLowerCase();J[C]&&(r=C),t&&(J[C]=t,r=C);var b=c.split("-");if(!r&&b.length>1)return y(b[0])}else{var g=c.name;J[g]=c,r=g}return!D&&r&&(en=r),r||!D&&en},B=function(y,c){if(fn(y))return y.clone();var t=typeof c=="object"?c:{};return t.date=y,t.args=arguments,new rn(t)},v=W;v.l=on,v.i=fn,v.w=function(y,c){return B(y,{locale:c.$L,utc:c.$u,x:c.$x,$offset:c.$offset})};var rn=function(){function y(t){this.$L=on(t.locale,null,!0),this.parse(t)}var c=y.prototype;return c.parse=function(t){this.$d=function(D){var r=D.date,C=D.utc;if(r===null)return new Date(NaN);if(v.u(r))return new Date;if(r instanceof Date)return new Date(r);if(typeof r=="string"&&!/Z$/i.test(r)){var b=r.match(Z);if(b){var g=b[2]-1||0,T=(b[7]||"0").substring(0,3);return C?new Date(Date.UTC(b[1],g,b[3]||1,b[4]||0,b[5]||0,b[6]||0,T)):new Date(b[1],g,b[3]||1,b[4]||0,b[5]||0,b[6]||0,T)}}return new Date(r)}(t),this.$x=t.x||{},this.init()},c.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},c.$utils=function(){return v},c.isValid=function(){return this.$d.toString()!==V},c.isSame=function(t,D){var r=B(t);return this.startOf(D)<=r&&r<=this.endOf(D)},c.isAfter=function(t,D){return B(t)<this.startOf(D)},c.isBefore=function(t,D){return this.endOf(D)<B(t)},c.$g=function(t,D,r){return v.u(t)?this[D]:this.set(r,t)},c.unix=function(){return Math.floor(this.valueOf()/1e3)},c.valueOf=function(){return this.$d.getTime()},c.startOf=function(t,D){var r=this,C=!!v.u(D)||D,b=v.p(t),g=function(sn,O){var Y=v.w(r.$u?Date.UTC(r.$y,O,sn):new Date(r.$y,O,sn),r);return C?Y:Y.endOf(A)},T=function(sn,O){return v.w(r.toDate()[sn].apply(r.toDate("s"),(C?[0,0,0,0]:[23,59,59,999]).slice(O)),r)},S=this.$W,P=this.$M,K=this.$D,G="set"+(this.$u?"UTC":"");switch(b){case f:return C?g(1,0):g(31,11);case h:return C?g(1,P):g(0,P+1);case w:var ln=this.$locale().weekStart||0,pn=(S<ln?S+7:S)-ln;return g(C?K-pn:K+(6-pn),P);case A:case R:return T(G+"Hours",0);case F:return T(G+"Minutes",1);case d:return T(G+"Seconds",2);case i:return T(G+"Milliseconds",3);default:return this.clone()}},c.endOf=function(t){return this.startOf(t,!1)},c.$set=function(t,D){var r,C=v.p(t),b="set"+(this.$u?"UTC":""),g=(r={},r[A]=b+"Date",r[R]=b+"Date",r[h]=b+"Month",r[f]=b+"FullYear",r[F]=b+"Hours",r[d]=b+"Minutes",r[i]=b+"Seconds",r[o]=b+"Milliseconds",r)[C],T=C===A?this.$D+(D-this.$W):D;if(C===h||C===f){var S=this.clone().set(R,1);S.$d[g](T),S.init(),this.$d=S.set(R,Math.min(this.$D,S.daysInMonth())).$d}else g&&this.$d[g](T);return this.init(),this},c.set=function(t,D){return this.clone().$set(t,D)},c.get=function(t){return this[v.p(t)]()},c.add=function(t,D){var r,C=this;t=Number(t);var b=v.p(D),g=function(P){var K=B(C);return v.w(K.date(K.date()+Math.round(P*t)),C)};if(b===h)return this.set(h,this.$M+t);if(b===f)return this.set(f,this.$y+t);if(b===A)return g(1);if(b===w)return g(7);var T=(r={},r[d]=e,r[F]=p,r[i]=a,r)[b]||1,S=this.$d.getTime()+t*T;return v.w(S,this)},c.subtract=function(t,D){return this.add(-1*t,D)},c.format=function(t){var D=this,r=this.$locale();if(!this.isValid())return r.invalidDate||V;var C=t||"YYYY-MM-DDTHH:mm:ssZ",b=v.z(this),g=this.$H,T=this.$m,S=this.$M,P=r.weekdays,K=r.months,G=function(O,Y,gn,cn){return O&&(O[Y]||O(D,C))||gn[Y].slice(0,cn)},ln=function(O){return v.s(g%12||12,O,"0")},pn=r.meridiem||function(O,Y,gn){var cn=O<12?"AM":"PM";return gn?cn.toLowerCase():cn},sn={YY:String(this.$y).slice(-2),YYYY:this.$y,M:S+1,MM:v.s(S+1,2,"0"),MMM:G(r.monthsShort,S,K,3),MMMM:G(K,S),D:this.$D,DD:v.s(this.$D,2,"0"),d:String(this.$W),dd:G(r.weekdaysMin,this.$W,P,2),ddd:G(r.weekdaysShort,this.$W,P,3),dddd:P[this.$W],H:String(g),HH:v.s(g,2,"0"),h:ln(1),hh:ln(2),a:pn(g,T,!0),A:pn(g,T,!1),m:String(T),mm:v.s(T,2,"0"),s:String(this.$s),ss:v.s(this.$s,2,"0"),SSS:v.s(this.$ms,3,"0"),Z:b};return C.replace(M,function(O,Y){return Y||sn[O]||b.replace(":","")})},c.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},c.diff=function(t,D,r){var C,b=v.p(D),g=B(t),T=(g.utcOffset()-this.utcOffset())*e,S=this-g,P=v.m(this,g);return P=(C={},C[f]=P/12,C[h]=P,C[q]=P/3,C[w]=(S-T)/6048e5,C[A]=(S-T)/864e5,C[F]=S/p,C[d]=S/e,C[i]=S/a,C)[b]||S,r?P:v.a(P)},c.daysInMonth=function(){return this.endOf(h).$D},c.$locale=function(){return J[this.$L]},c.locale=function(t,D){if(!t)return this.$L;var r=this.clone(),C=on(t,D,!0);return C&&(r.$L=C),r},c.clone=function(){return v.w(this.$d,this)},c.toDate=function(){return new Date(this.valueOf())},c.toJSON=function(){return this.isValid()?this.toISOString():null},c.toISOString=function(){return this.$d.toISOString()},c.toString=function(){return this.$d.toUTCString()},y}(),Tn=rn.prototype;return B.prototype=Tn,[["$ms",o],["$s",i],["$m",d],["$H",F],["$W",A],["$M",h],["$y",f],["$D",R]].forEach(function(y){Tn[y[1]]=function(c){return this.$g(c,y[0],y[1])}}),B.extend=function(y,c){return y.$i||(y(c,rn,B),y.$i=!0),B},B.locale=on,B.isDayjs=fn,B.unix=function(y){return B(1e3*y)},B.en=J[en],B.Ls=J,B.p={},B})})(Gs);const Sn=wn,Vs=JSON.parse('[{"title":"字体压缩","url":"/content/posts/2023-04-20-compress-font.html","frontmatter":{"title":"字体压缩","date":"2023-04-20T18:50:35+08:00","layout":"post","tags":["font"]},"src":"\\n\\n先对比一下压缩前后的效果：\\n\\n![压缩前](/images/2023-04-20-18-53-12.png)\\n![压缩后](/images/2023-04-20-18-58-22.png)\\n\\n主要是压缩了 f1 与 jinkai 这两个字体, f1 这个字体由于我之用到了几个字符所以很小, 大概思路:\\n\\n1. 定义一个常用的字符集,里面包含你需要的字符\\n2. 使用 pyftsubset 命令对字体进行压缩\\n3. 使用 woff2 继续压缩为 woff2 格式\\n\\n```shell\\npyftsubset input.ttf --output-file=output.ttf --text-file=subset.txt\\nwoff2_compress output.ttf\\n```\\n","desc":"<p>先对比一下压缩前后的效果：</p>\\n<p><img src=\\"/images/2023-04-20-18-53-12.png\\" alt=\\"压缩前\\">\\n<img src=\\"/images/2023-04-20-18-58-22.png\\" alt=\\"压缩后\\"></p>\\n<p>主要是压缩了 f1 与 jinkai 这两个字体, f1 这个字体由于我之用到了几个字符所以很小, 大概思路:</p>\\n<ol>\\n<li>定义一个常用的字符集,里面包含你需要的字符</li>\\n<li>使用 pyftsubset 命令对字体进行压缩</li>\\n<li>使用 woff2 继续压缩为 woff2 格式</li>\\n</ol>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">pyftsubset</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">input.ttf</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--output-file=output.ttf</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--text-file=subset.txt</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">woff2_compress</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">output.ttf</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div>","date":1681987835000,"update":1681987835000},{"title":"go-zero 生成 curd 的逻辑","url":"/content/posts/2023-04-18-go-zero-curd-logic.html","frontmatter":{"title":"go-zero 生成 curd 的逻辑","date":"2023-04-18T14:29:40+08:00","layout":"post","tags":["go"]},"src":"\\n\\ngo-zero 提供了一个很好用的工具 goctl, 可以用来生成一些模板代码, 比如根据 .api 文件生成 type, route, handle, logic 以及根据 table 生成 model 代码.\\n\\n但却少了一个对我们这些 curd boy 更需要的功能, 就是根据 table dsl 生成 curd 的逻辑, 而这在 Java 生态中是一个很基础的功能(Mybatis).\\n\\n个人猜测这可能跟 go 中各种 ORM 框架百花齐放的原因有关, 且 go-zero 也并没有强制使用某个 ORM 框架, 所以社区就没有实现这个功能.\\n\\n**如何实现?**\\n\\n其实很简单, goctl 已经提供了解析 .api 文件以及读取 table dsl 的功能, 我们只需要结合一下就可了.\\n\\n1. 解析 .api 文件\\n2. 读取 table 信息\\n3. 通过 table 信息映射出 add, update, delete, page, get 等功能对应的 request 以及 response 的类型并放入 apiSpec 中\\n4. 添加 route 到 apiSpec 中\\n5. 定义 logic template, 这个是跟 ORM 强相关的, 需要根据情况来实现\\n6. 生成 type, handle, logic 等代码\\n7. 生成替换原有的 .api 文件, 我这里是将 curd 的 api 信息放在了单独的组中, 以便于区分, 在解析时可以通过自定义属性来设置\\n8. 生成 route\\n\\n还可以加一些扩展功能, 比如根据 请求类型的 tag 来生成 where 条件, 目前我这边是默认为 eq, 但是可以根据 tag 来生成 like, gt, lt 等条件.\\n\\n大概思路就是这样, 代码就不放出来丢人了...\\n","desc":"<p>go-zero 提供了一个很好用的工具 goctl, 可以用来生成一些模板代码, 比如根据 .api 文件生成 type, route, handle, logic 以及根据 table 生成 model 代码.</p>\\n<p>但却少了一个对我们这些 curd boy 更需要的功能, 就是根据 table dsl 生成 curd 的逻辑, 而这在 Java 生态中是一个很基础的功能(Mybatis).</p>\\n<p>个人猜测这可能跟 go 中各种 ORM 框架百花齐放的原因有关, 且 go-zero 也并没有强制使用某个 ORM 框架, 所以社区就没有实现这个功能.</p>\\n<p><strong>如何实现?</strong></p>\\n<p>其实很简单, goctl 已经提供了解析 .api 文件以及读取 table dsl 的功能, 我们只需要结合一下就可了.</p>\\n<ol>\\n<li>解析 .api 文件</li>\\n<li>读取 table 信息</li>\\n<li>通过 table 信息映射出 add, update, delete, page, get 等功能对应的 request 以及 response 的类型并放入 apiSpec 中</li>\\n<li>添加 route 到 apiSpec 中</li>\\n<li>定义 logic template, 这个是跟 ORM 强相关的, 需要根据情况来实现</li>\\n<li>生成 type, handle, logic 等代码</li>\\n<li>生成替换原有的 .api 文件, 我这里是将 curd 的 api 信息放在了单独的组中, 以便于区分, 在解析时可以通过自定义属性来设置</li>\\n<li>生成 route</li>\\n</ol>\\n<p>还可以加一些扩展功能, 比如根据 请求类型的 tag 来生成 where 条件, 目前我这边是默认为 eq, 但是可以根据 tag 来生成 like, gt, lt 等条件.</p>\\n<p>大概思路就是这样, 代码就不放出来丢人了...</p>\\n","date":1681799380000,"update":1681799380000},{"title":"并发控制-信号量","url":"/content/docs/ostep/2023-04-15-ostep-sem.html","frontmatter":{"group":"ostep","title":"并发控制-信号量","date":"2023-04-15T10:28:00+08:00","layout":"doc","tags":["os","sync"],"order":9999},"src":"\\n\\n信号量可以理解为一个装球的袋子(容器), 里面有一定数量的球(资源).\\n\\n- 每个人都可以从袋子里面取球, 取到球的人就可以使用这个球(资源)\\n- 如果袋子中没有球了,那就需要等待有人把球放回袋子里面\\n\\n```c\\n// 尝试获取一个资源\\n//  如果成功了, 离开\\n//  如果失败了, 等待\\nvoid P(sem_t *sem){\\n  wait_until(sem->value > 0){\\n    sem->value--;\\n  }\\n}\\n\\n// 释放一个资源\\nvoid V(sem_t *sem){\\n  sem->value++;\\n}\\n```\\n\\n## 信号量的应用\\n\\n### 实现生产者消费者模型\\n\\n<Gist user=\\"fzdwx\\" id=\\"444e7f36aa79d22519b42daff6221b00\\" height=\\"h-[300px]\\" />\\n\\n输出:\\n\\n```bash\\njava Main.java 1\\n=> )()()()\\n\\njava Main.java 2\\n=> ))(())(())(())(())(())\\n```\\n\\n### 实现 happens-before\\n\\n下面的代码能保证 t1 先于 t2 打印\\n\\n```java\\npublic class Main {\\n\\n    @SuppressWarnings(\\"all\\")\\n    public static void main(String[] args) {\\n        Semaphore fill = new Semaphore(0);\\n\\n        new Thread(Run.of(() -> {\\n            fill.acquire();\\n            System.out.println(\\"t2\\");\\n            return null;\\n        })).start();\\n\\n        new Thread(Run.of(() -> {\\n            System.out.println(\\"t1\\");\\n            fill.release();\\n            return null;\\n        })).start();\\n\\n    }\\n}\\n```\\n","desc":"<p>信号量可以理解为一个装球的袋子(容器), 里面有一定数量的球(资源).</p>\\n<ul>\\n<li>每个人都可以从袋子里面取球, 取到球的人就可以使用这个球(资源)</li>\\n<li>如果袋子中没有球了,那就需要等待有人把球放回袋子里面</li>\\n</ul>\\n<div class=\\"language-c line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">c</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 尝试获取一个资源</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">//  如果成功了, 离开</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">//  如果失败了, 等待</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">void</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">P</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #FFCB6B\\">sem_t</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD; font-style: italic\\">sem</span><span style=\\"color: #89DDFF\\">){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #82AAFF\\">wait_until</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">sem</span><span style=\\"color: #89DDFF\\">-&gt;</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">sem</span><span style=\\"color: #89DDFF\\">-&gt;</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">--;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 释放一个资源</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">void</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">V</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #FFCB6B\\">sem_t</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD; font-style: italic\\">sem</span><span style=\\"color: #89DDFF\\">){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">sem</span><span style=\\"color: #89DDFF\\">-&gt;</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">++;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br></div></div><h2 id=\\"信号量的应用\\" tabindex=\\"-1\\">信号量的应用 <a class=\\"header-anchor\\" href=\\"#信号量的应用\\" aria-label=\\"Permalink to &quot;信号量的应用&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"实现生产者消费者模型\\" tabindex=\\"-1\\">实现生产者消费者模型 <a class=\\"header-anchor\\" href=\\"#实现生产者消费者模型\\" aria-label=\\"Permalink to &quot;实现生产者消费者模型&quot;\\">&ZeroWidthSpace;</a></h3>\\n<Gist user=\\"fzdwx\\" id=\\"444e7f36aa79d22519b42daff6221b00\\" height=\\"h-[300px]\\" /><p>输出:</p>\\n<div class=\\"language-bash line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">java</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">Main.java</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">)()()</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">java</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">Main.java</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">))(())(())(())(())(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\">)</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br></div></div><h3 id=\\"实现-happens-before\\" tabindex=\\"-1\\">实现 happens-before <a class=\\"header-anchor\\" href=\\"#实现-happens-before\\" aria-label=\\"Permalink to &quot;实现 happens-before&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>下面的代码能保证 t1 先于 t2 打印</p>\\n<div class=\\"language-java line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">java</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">public</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">class</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">Main</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF\\">@</span><span style=\\"color: #C792EA\\">SuppressWarnings</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">all</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #C792EA\\">public</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">void</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">main</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #C792EA\\">String</span><span style=\\"color: #89DDFF\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #A6ACCD; font-style: italic\\">args</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        </span><span style=\\"color: #C792EA\\">Semaphore</span><span style=\\"color: #A6ACCD\\"> fill </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">new</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">Semaphore</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        </span><span style=\\"color: #89DDFF; font-style: italic\\">new</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">Thread</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">Run</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">of</span><span style=\\"color: #89DDFF\\">(()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">-&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            fill</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">acquire</span><span style=\\"color: #89DDFF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            System</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">out</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">println</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">t2</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">null;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        </span><span style=\\"color: #89DDFF\\">})).</span><span style=\\"color: #82AAFF\\">start</span><span style=\\"color: #89DDFF\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        </span><span style=\\"color: #89DDFF; font-style: italic\\">new</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">Thread</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">Run</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">of</span><span style=\\"color: #89DDFF\\">(()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">-&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            System</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">out</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">println</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">t1</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            fill</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">release</span><span style=\\"color: #89DDFF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">null;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        </span><span style=\\"color: #89DDFF\\">})).</span><span style=\\"color: #82AAFF\\">start</span><span style=\\"color: #89DDFF\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br></div></div>","date":1681525680000,"update":1681525680000},{"title":"在看的影视剧","url":"/content/issues/1.html","frontmatter":{"title":"在看的影视剧","layout":"issue","date":"2023-03-31T11:07:07.000Z","update":"2023-04-11T04:01:04.000Z","tags":["bug","awesome"],"editLink":"https://github.com/fzdwx/fzdwx.github.io/issues/1"},"src":"\\n\\n> 记录一些影视作品的观看记录哈哈\\r\\n\\r\\n[//]: # \\"https://moviedb.8610000.xyz/api/v1/queue/movie/\\"\\r\\n\\r\\n## 最近在看\\r\\n\\r\\n### 动漫\\r\\n\\r\\n<ClientOnly>\\r\\n  <Douban code=\\"35337634\\"/>\\r\\n  <Douban code=\\"36129263\\"/>\\r\\n  <Douban code=\\"35937645\\"/>\\r\\n  <Douban code=\\"35604677\\" to=\\"https://ddys.art/the-witch-from-mercury/\\"/>\\r\\n  <Douban code=\\"35417872\\" to=\\"https://ddys.art/isekaiojisan/\\"/>\\r\\n  <Douban code=\\"35853587\\"/>\\r\\n</ClientOnly>\\r\\n\\r\\n## 已看完\\r\\n\\r\\n### 动漫\\r\\n\\r\\n<ClientOnly>\\r\\n  <Douban code=\\"35351365\\"/>\\r\\n  <Douban code=\\"35256195\\" to=\\"https://ddys.art/chainsaw-man\\" />\\r\\n  <Douban code=\\"35679830\\" to=\\"https://www.bilibili.com/bangumi/play/ss39696\\" />\\r\\n  <Douban code=\\"35366293\\" to=\\"https://ddys.art/bocchi-the-rock/\\"/>\\r\\n  <Douban code=\\"30238385\\" to=\\"https://www.bilibili.com/bangumi/play/ss25742?spm_id_from=333.337.0.0\\"/>\\r\\n</ClientOnly>\\r\\n\\r\\n### 电影\\r\\n\\r\\n<ClientOnly>\\r\\n  <Douban code=\\"2124724\\" />\\r\\n  <Douban code=\\"1304624\\" to=\\"https://www.bilibili.com/bangumi/play/ss32937\\" />\\r\\n  <Douban code=\\"1303173\\" />\\r\\n  <Douban code=\\"1291550\\" />\\r\\n  <Douban code=\\"27060077\\" />\\r\\n  <Douban code=\\"30270746\\" />\\r\\n  <Douban code=\\"30128916\\" />\\r\\n  <Douban code=\\"30323380\\" />\\r\\n</ClientOnly>\\r\\n\\r\\n### 电视剧\\r\\n\\r\\n<ClientOnly>\\r\\n<Douban code=\\"30198955\\" to=\\"https://ddys.art/the-peripheral/\\" />\\r\\n<Douban code=\\"30291070\\" to=\\"https://ddys.art/reborn-rich/\\" />\\r\\n<Douban code=\\"35314632\\" to=\\"https://ddys.art/the-glory-2022\\" />\\r\\n<Douban code=\\"35465232\\" />\\r\\n</ClientOnly>\\r\\n\\n","desc":"<blockquote>\\n<p>记录一些影视作品的观看记录哈哈</p>\\n</blockquote>\\n<h2 id=\\"最近在看\\" tabindex=\\"-1\\">最近在看 <a class=\\"header-anchor\\" href=\\"#最近在看\\" aria-label=\\"Permalink to &quot;最近在看&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"动漫\\" tabindex=\\"-1\\">动漫 <a class=\\"header-anchor\\" href=\\"#动漫\\" aria-label=\\"Permalink to &quot;动漫&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ClientOnly>\\n  <Douban code=\\"35337634\\"/>\\n  <Douban code=\\"36129263\\"/>\\n  <Douban code=\\"35937645\\"/>\\n  <Douban code=\\"35604677\\" to=\\"https://ddys.art/the-witch-from-mercury/\\"/>\\n  <Douban code=\\"35417872\\" to=\\"https://ddys.art/isekaiojisan/\\"/>\\n  <Douban code=\\"35853587\\"/>\\n</ClientOnly>\\n<h2 id=\\"已看完\\" tabindex=\\"-1\\">已看完 <a class=\\"header-anchor\\" href=\\"#已看完\\" aria-label=\\"Permalink to &quot;已看完&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"动漫-1\\" tabindex=\\"-1\\">动漫 <a class=\\"header-anchor\\" href=\\"#动漫-1\\" aria-label=\\"Permalink to &quot;动漫&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ClientOnly>\\n  <Douban code=\\"35351365\\"/>\\n  <Douban code=\\"35256195\\" to=\\"https://ddys.art/chainsaw-man\\" />\\n  <Douban code=\\"35679830\\" to=\\"https://www.bilibili.com/bangumi/play/ss39696\\" />\\n  <Douban code=\\"35366293\\" to=\\"https://ddys.art/bocchi-the-rock/\\"/>\\n  <Douban code=\\"30238385\\" to=\\"https://www.bilibili.com/bangumi/play/ss25742?spm_id_from=333.337.0.0\\"/>\\n</ClientOnly>\\n<h3 id=\\"电影\\" tabindex=\\"-1\\">电影 <a class=\\"header-anchor\\" href=\\"#电影\\" aria-label=\\"Permalink to &quot;电影&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ClientOnly>\\n  <Douban code=\\"2124724\\" />\\n  <Douban code=\\"1304624\\" to=\\"https://www.bilibili.com/bangumi/play/ss32937\\" />\\n  <Douban code=\\"1303173\\" />\\n  <Douban code=\\"1291550\\" />\\n  <Douban code=\\"27060077\\" />\\n  <Douban code=\\"30270746\\" />\\n  <Douban code=\\"30128916\\" />\\n  <Douban code=\\"30323380\\" />\\n</ClientOnly>\\n<h3 id=\\"电视剧\\" tabindex=\\"-1\\">电视剧 <a class=\\"header-anchor\\" href=\\"#电视剧\\" aria-label=\\"Permalink to &quot;电视剧&quot;\\">&ZeroWidthSpace;</a></h3>\\n<ClientOnly>\\n<Douban code=\\"30198955\\" to=\\"https://ddys.art/the-peripheral/\\" />\\n<Douban code=\\"30291070\\" to=\\"https://ddys.art/reborn-rich/\\" />\\n<Douban code=\\"35314632\\" to=\\"https://ddys.art/the-glory-2022\\" />\\n<Douban code=\\"35465232\\" />\\n</ClientOnly>\\n","date":1680260827000,"update":1681185664000},{"title":"并发控制-同步","url":"/content/docs/ostep/2023-03-28-ostep-sync.html","frontmatter":{"group":"ostep","title":"并发控制-同步","date":"2023-03-28T20:55:51+08:00","layout":"doc","tags":["os","sync"],"order":10000},"src":"\\n\\n## 怎么实现一个并发安全的计数器\\n\\n这是一个并发安全的计数器, 它遵循了简单,正确,易懂的原则, 但有一个致命缺陷就是 **性能**\\n\\n::: details 简单的并发安全的计数器代码实现\\n\\n```go\\ntype Add struct {\\n    sync.Mutex\\n    count int\\n}\\n\\nfunc (a *Add) Get() int {\\n    a.Lock()\\n    defer a.Unlock()\\n    return a.count\\n}\\n\\nfunc (a *Add) incr() {\\n    a.Lock()\\n    defer a.Unlock()\\n    a.count++\\n}\\n\\nfunc (a *Add) decr() {\\n    a.Lock()\\n    defer a.Unlock()\\n    a.count--\\n}\\n```\\n\\n:::\\n\\n跑一个 benchmark, 可以看到加锁和不加锁之间差了近 50 倍\\n\\n<Gist user=\\"fzdwx\\" id=\\"3e9dd948b38f12ef39ae760374a1a016\\" height=\\"h-[400px]\\" />\\n\\n### 分段加锁\\n\\n通过多个局部计数器和一个全局计数器来实现一个逻辑计数器. 比如说在一个有 8 个 CPU 的计算机中, 共有 8 个局部计数器和一个全局计数器, 并且每个计数器都有一把锁\\n\\n原理是,如果某个核心要增加就修改它们对应的局部计数器的值(并用当前 CPU 上的锁),所以不会有不同 CPU 的线程的竞争.然后间隔一段时间就同步到全局计数器上,并把当前的局部计数器重置.\\n\\n这种实现的问题是: 间隔越长性能越好但准确性就越低\\n\\n::: details 代码实现\\n\\n```go\\ntype Counter struct {\\n\\tglobal    int\\n\\tglock     sync.Mutex\\n\\tlocal     []int\\n\\tllock     []sync.Mutex\\n\\tthreshold int\\n}\\n\\nfunc NewCounter(threshold int, threadNum int) *Counter {\\n\\tvar llock []sync.Mutex\\n\\tvar local []int\\n\\tfor i := 0; i < threadNum; i++ {\\n\\t\\tllock = append(llock, sync.Mutex{})\\n\\t\\tlocal = append(local, 0)\\n\\t}\\n\\treturn &Counter{\\n\\t\\tglobal:    0,\\n\\t\\tglock:     sync.Mutex{},\\n\\t\\tlocal:     local,\\n\\t\\tllock:     llock,\\n\\t\\tthreshold: threshold,\\n\\t}\\n}\\n\\nfunc (c *Counter) Add(threadId int) {\\n\\tc.llock[threadId].Lock()\\n\\tdefer c.llock[threadId].Unlock()\\n\\n\\tc.local[threadId]++\\n\\tif c.local[threadId] >= c.threshold {\\n\\t\\tc.glock.Lock()\\n\\t\\tc.global += c.local[threadId]\\n\\t\\tc.glock.Unlock()\\n\\t\\tc.local[threadId] = 0\\n\\t}\\n}\\n\\nfunc (c *Counter) Get() int {\\n\\tc.glock.Lock()\\n\\tdefer c.glock.Unlock()\\n\\n\\tfor i := range c.local {\\n\\t\\tc.llock[i].Lock()\\n\\t\\tc.global += c.local[i]\\n\\t\\tc.local[i] = 0\\n\\t\\tc.llock[i].Unlock()\\n\\t}\\n\\n\\tglobal := c.global\\n\\treturn global\\n}\\n\\nconst N = 1000000\\nconst threadCount = 16\\n\\nfunc BenchmarkCounter(b *testing.B) {\\n\\tfor i := 0; i < b.N; i++ {\\n\\t\\tb.StopTimer()\\n\\t\\tc := NewCounter(100000, threadCount)\\n\\t\\tb.StartTimer()\\n\\t\\tvar wg sync.WaitGroup\\n\\t\\tfor i := 0; i < threadCount; i++ {\\n\\t\\t\\twg.Add(1)\\n\\t\\t\\tgo func(threadId int) {\\n\\t\\t\\t\\tdefer wg.Done()\\n\\t\\t\\t\\tfor j := 0; j < N; j++ {\\n\\t\\t\\t\\t\\tc.Add(threadId)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}(i)\\n\\t\\t}\\n\\t\\twg.Wait()\\n\\t\\tassert.Equal(b, N*threadCount, c.Get())\\n\\t}\\n}\\n```\\n\\n:::\\n\\n这就是一种分段锁的思想的体现, 把 `(N-1) x threshold` 到 `N x threshold` 分别加锁\\n\\n## 条件变量\\n\\n在多线程的情况下, 我们可能经常需要等待某一个条件生效, 比如说父线程等待所有子线程都运行完毕( join )\\n\\n假定下面的程序实现完全正确(count 会按照实现进行正确的--), 下面使用了一个共享变量来记录还在工作的线程的数量,这种实现显而易见是浪费 CPU 的,那么怎么进行改进?\\n\\n```go\\nfunc main(){\\n\\tvar count = 2\\n\\tfor i = 0; i < count; i++ {\\n\\t\\t\\tgo func(){\\n\\t\\t\\t\\ttime.sleep(xxx)\\n\\t\\t\\t\\tcount--\\n\\t\\t\\t}()\\n\\t}\\n\\n\\tfor{\\n\\t\\tif count == 0{\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\n### wait 与 singal\\n\\n条件变量有两种操作, wait 和 signal, wait 会阻塞当前线程,直到条件变量被 signal 为止, signal 会唤醒一个等待在条件变量上的线程\\n\\n这是一个用 Java 使用条件变量的例子, 它实现了一个顺序打印 A,B,C 的功能, 通过一把锁和三个条件变量来实现\\n\\n核心代码就是 run 方法里面, 通过 while 来不断的运行\\n\\n1. 首先获取锁\\n2. 输出 message\\n3. 唤醒下一个线程 singal (其他线程就会运行到获取锁的步骤)\\n4. 将自己睡眠 await (释放锁)\\n\\n<Gist user=\\"fzdwx\\" id=\\"d8c7836d3367f0f114f5d7310130cb3d\\" height=\\"h-[450px]\\" />\\n\\n这个一个用条件变量实现 join 的例子, `Print` 启动了一个 Daemon 的线程,正常情况下这个程序启动后会立即结束, 但我们实现了一个 join 的功能, 使得主线程会等待子线程结束后才结束\\n\\n<Gist user=\\"fzdwx\\" id=\\"c0279b33be19f1136bdb465e9df5ba1e\\" height=\\"h-[450px]\\" />\\n","desc":"<h2 id=\\"怎么实现一个并发安全的计数器\\" tabindex=\\"-1\\">怎么实现一个并发安全的计数器 <a class=\\"header-anchor\\" href=\\"#怎么实现一个并发安全的计数器\\" aria-label=\\"Permalink to &quot;怎么实现一个并发安全的计数器&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>这是一个并发安全的计数器, 它遵循了简单,正确,易懂的原则, 但有一个致命缺陷就是 <strong>性能</strong></p>\\n<details class=\\"details custom-block\\"><summary>简单的并发安全的计数器代码实现</summary>\\n<div class=\\"language-go line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">go</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">type</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">Add</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">struct</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    sync</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">Mutex</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    count </span><span style=\\"color: #C792EA\\">int</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">a </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">Add</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">Get</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">int</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Lock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">defer</span><span style=\\"color: #A6ACCD\\"> a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Unlock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #A6ACCD\\"> a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">a </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">Add</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">incr</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Lock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">defer</span><span style=\\"color: #A6ACCD\\"> a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Unlock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">a </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">Add</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">decr</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Lock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">defer</span><span style=\\"color: #A6ACCD\\"> a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Unlock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    a</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">--</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br></div></div></details>\\n<p>跑一个 benchmark, 可以看到加锁和不加锁之间差了近 50 倍</p>\\n<Gist user=\\"fzdwx\\" id=\\"3e9dd948b38f12ef39ae760374a1a016\\" height=\\"h-[400px]\\" /><h3 id=\\"分段加锁\\" tabindex=\\"-1\\">分段加锁 <a class=\\"header-anchor\\" href=\\"#分段加锁\\" aria-label=\\"Permalink to &quot;分段加锁&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>通过多个局部计数器和一个全局计数器来实现一个逻辑计数器. 比如说在一个有 8 个 CPU 的计算机中, 共有 8 个局部计数器和一个全局计数器, 并且每个计数器都有一把锁</p>\\n<p>原理是,如果某个核心要增加就修改它们对应的局部计数器的值(并用当前 CPU 上的锁),所以不会有不同 CPU 的线程的竞争.然后间隔一段时间就同步到全局计数器上,并把当前的局部计数器重置.</p>\\n<p>这种实现的问题是: 间隔越长性能越好但准确性就越低</p>\\n<details class=\\"details custom-block\\"><summary>代码实现</summary>\\n<div class=\\"language-go line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">go</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">type</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">Counter</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">struct</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tglobal    </span><span style=\\"color: #C792EA\\">int</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tglock     sync</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">Mutex</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tlocal     </span><span style=\\"color: #89DDFF\\">[]</span><span style=\\"color: #C792EA\\">int</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tllock     </span><span style=\\"color: #89DDFF\\">[]</span><span style=\\"color: #A6ACCD\\">sync</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">Mutex</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tthreshold </span><span style=\\"color: #C792EA\\">int</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">NewCounter</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">threshold </span><span style=\\"color: #C792EA\\">int</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> threadNum </span><span style=\\"color: #C792EA\\">int</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">Counter </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">var</span><span style=\\"color: #A6ACCD\\"> llock </span><span style=\\"color: #89DDFF\\">[]</span><span style=\\"color: #A6ACCD\\">sync</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">Mutex</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">var</span><span style=\\"color: #A6ACCD\\"> local </span><span style=\\"color: #89DDFF\\">[]</span><span style=\\"color: #C792EA\\">int</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">:=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #A6ACCD\\"> threadNum</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i</span><span style=\\"color: #89DDFF\\">++</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tllock </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">append</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">llock</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> sync</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">Mutex</span><span style=\\"color: #89DDFF\\">{})</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tlocal </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">append</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">local</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&amp;</span><span style=\\"color: #A6ACCD\\">Counter</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tglobal</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tglock</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\">     sync</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">Mutex</span><span style=\\"color: #89DDFF\\">{},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tlocal</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\">     local</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tllock</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\">     llock</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tthreshold</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> threshold</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">c </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">Counter</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">Add</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">threadId </span><span style=\\"color: #C792EA\\">int</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">llock</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">threadId</span><span style=\\"color: #89DDFF\\">].</span><span style=\\"color: #82AAFF\\">Lock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">defer</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">llock</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">threadId</span><span style=\\"color: #89DDFF\\">].</span><span style=\\"color: #82AAFF\\">Unlock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">local</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">threadId</span><span style=\\"color: #89DDFF\\">]++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">if</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">local</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">threadId</span><span style=\\"color: #89DDFF\\">]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&gt;=</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">threshold </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">glock</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Lock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">global </span><span style=\\"color: #89DDFF\\">+=</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">local</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">threadId</span><span style=\\"color: #89DDFF\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">glock</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Unlock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">local</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">threadId</span><span style=\\"color: #89DDFF\\">]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">c </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">Counter</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">Get</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">int</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">glock</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Lock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">defer</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">glock</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Unlock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">:=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">range</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">local </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">llock</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">i</span><span style=\\"color: #89DDFF\\">].</span><span style=\\"color: #82AAFF\\">Lock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">global </span><span style=\\"color: #89DDFF\\">+=</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">local</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">i</span><span style=\\"color: #89DDFF\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">local</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">i</span><span style=\\"color: #89DDFF\\">]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">llock</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\">i</span><span style=\\"color: #89DDFF\\">].</span><span style=\\"color: #82AAFF\\">Unlock</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\tglobal </span><span style=\\"color: #89DDFF\\">:=</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">global</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #A6ACCD\\"> global</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">const</span><span style=\\"color: #A6ACCD\\"> N </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">1000000</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">const</span><span style=\\"color: #A6ACCD\\"> threadCount </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">16</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">BenchmarkCounter</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">b </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">testing</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">B</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">:=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #A6ACCD\\"> b</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">N</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i</span><span style=\\"color: #89DDFF\\">++</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tb</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">StopTimer</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tc </span><span style=\\"color: #89DDFF\\">:=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">NewCounter</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #F78C6C\\">100000</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> threadCount</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tb</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">StartTimer</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t</span><span style=\\"color: #89DDFF\\">var</span><span style=\\"color: #A6ACCD\\"> wg sync</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">WaitGroup</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">:=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #A6ACCD\\"> threadCount</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i</span><span style=\\"color: #89DDFF\\">++</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\twg</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Add</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #F78C6C\\">1</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">go</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">func(</span><span style=\\"color: #A6ACCD\\">threadId </span><span style=\\"color: #C792EA\\">int</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">defer</span><span style=\\"color: #A6ACCD\\"> wg</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Done</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #A6ACCD\\"> j </span><span style=\\"color: #89DDFF\\">:=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> j </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #A6ACCD\\"> N</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> j</span><span style=\\"color: #89DDFF\\">++</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t\\t\\tc</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Add</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">threadId</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t</span><span style=\\"color: #89DDFF\\">}(</span><span style=\\"color: #A6ACCD\\">i</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\twg</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Wait</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\tassert</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Equal</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">b</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> N</span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">threadCount</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> c</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">Get</span><span style=\\"color: #89DDFF\\">())</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br><span class=\\"line-number\\">31</span><br><span class=\\"line-number\\">32</span><br><span class=\\"line-number\\">33</span><br><span class=\\"line-number\\">34</span><br><span class=\\"line-number\\">35</span><br><span class=\\"line-number\\">36</span><br><span class=\\"line-number\\">37</span><br><span class=\\"line-number\\">38</span><br><span class=\\"line-number\\">39</span><br><span class=\\"line-number\\">40</span><br><span class=\\"line-number\\">41</span><br><span class=\\"line-number\\">42</span><br><span class=\\"line-number\\">43</span><br><span class=\\"line-number\\">44</span><br><span class=\\"line-number\\">45</span><br><span class=\\"line-number\\">46</span><br><span class=\\"line-number\\">47</span><br><span class=\\"line-number\\">48</span><br><span class=\\"line-number\\">49</span><br><span class=\\"line-number\\">50</span><br><span class=\\"line-number\\">51</span><br><span class=\\"line-number\\">52</span><br><span class=\\"line-number\\">53</span><br><span class=\\"line-number\\">54</span><br><span class=\\"line-number\\">55</span><br><span class=\\"line-number\\">56</span><br><span class=\\"line-number\\">57</span><br><span class=\\"line-number\\">58</span><br><span class=\\"line-number\\">59</span><br><span class=\\"line-number\\">60</span><br><span class=\\"line-number\\">61</span><br><span class=\\"line-number\\">62</span><br><span class=\\"line-number\\">63</span><br><span class=\\"line-number\\">64</span><br><span class=\\"line-number\\">65</span><br><span class=\\"line-number\\">66</span><br><span class=\\"line-number\\">67</span><br><span class=\\"line-number\\">68</span><br><span class=\\"line-number\\">69</span><br><span class=\\"line-number\\">70</span><br><span class=\\"line-number\\">71</span><br><span class=\\"line-number\\">72</span><br><span class=\\"line-number\\">73</span><br><span class=\\"line-number\\">74</span><br></div></div></details>\\n<p>这就是一种分段锁的思想的体现, 把 <code>(N-1) x threshold</code> 到 <code>N x threshold</code> 分别加锁</p>\\n<h2 id=\\"条件变量\\" tabindex=\\"-1\\">条件变量 <a class=\\"header-anchor\\" href=\\"#条件变量\\" aria-label=\\"Permalink to &quot;条件变量&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>在多线程的情况下, 我们可能经常需要等待某一个条件生效, 比如说父线程等待所有子线程都运行完毕( join )</p>\\n<p>假定下面的程序实现完全正确(count 会按照实现进行正确的--), 下面使用了一个共享变量来记录还在工作的线程的数量,这种实现显而易见是浪费 CPU 的,那么怎么进行改进?</p>\\n<div class=\\"language-go line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">go</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">func</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">main</span><span style=\\"color: #89DDFF\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">var</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #A6ACCD\\"> count</span><span style=\\"color: #89DDFF\\">;</span><span style=\\"color: #A6ACCD\\"> i</span><span style=\\"color: #89DDFF\\">++</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">go</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">func(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t\\ttime</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">sleep</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">xxx</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t\\tcount</span><span style=\\"color: #89DDFF\\">--</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t</span><span style=\\"color: #89DDFF\\">}()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">for</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">if</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">==</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t\\t</span><span style=\\"color: #89DDFF; font-style: italic\\">return</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br></div></div><h3 id=\\"wait-与-singal\\" tabindex=\\"-1\\">wait 与 singal <a class=\\"header-anchor\\" href=\\"#wait-与-singal\\" aria-label=\\"Permalink to &quot;wait 与 singal&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>条件变量有两种操作, wait 和 signal, wait 会阻塞当前线程,直到条件变量被 signal 为止, signal 会唤醒一个等待在条件变量上的线程</p>\\n<p>这是一个用 Java 使用条件变量的例子, 它实现了一个顺序打印 A,B,C 的功能, 通过一把锁和三个条件变量来实现</p>\\n<p>核心代码就是 run 方法里面, 通过 while 来不断的运行</p>\\n<ol>\\n<li>首先获取锁</li>\\n<li>输出 message</li>\\n<li>唤醒下一个线程 singal (其他线程就会运行到获取锁的步骤)</li>\\n<li>将自己睡眠 await (释放锁)</li>\\n</ol>\\n<Gist user=\\"fzdwx\\" id=\\"d8c7836d3367f0f114f5d7310130cb3d\\" height=\\"h-[450px]\\" /><p>这个一个用条件变量实现 join 的例子, <code>Print</code> 启动了一个 Daemon 的线程,正常情况下这个程序启动后会立即结束, 但我们实现了一个 join 的功能, 使得主线程会等待子线程结束后才结束</p>\\n<Gist user=\\"fzdwx\\" id=\\"c0279b33be19f1136bdb465e9df5ba1e\\" height=\\"h-[450px]\\" />","date":1680008151000,"update":1680008151000},{"title":"并发控制-互斥","url":"/content/docs/ostep/2023-03-28-ostep-mutex.html","frontmatter":{"group":"ostep","title":"并发控制-互斥","date":"2023-03-28T20:09:47+08:00","layout":"doc","tags":["os","mutex"],"summary":"互斥是一种并发控制机制，用于保证在同一时刻只有一个线程可以访问共享资源。","order":100000000000000},"src":"\\n\\n## 为什么需要互斥?\\n\\n1. 从指令集的角度看, 一个简单的 ++ 操作可能会被编译为 3 条, load -> add -> store, 一条指令是原子的, 但是 3 条指令就不一定了 —— 操作系统的 Trap 机制\\n2. 假如这个程序是多线程的, 且这个变量是共享的, 那么就会竞态条件, 比如说第一个线程 load 了 0 并进行 add 得到 1, 在它 store 之前,它被切换出去了, 然后第二个线程来了并运行了一套 load ->add -> store 写入了 0. 这样当第一个线程再次运行时它不知道第二个线程已经对这个变量进行了操作, 从而导致了错误的结果.\\n\\n## 怎么实现互斥?\\n\\n### 原子交换\\n\\n这是一种通过硬件指令实现的互斥, 也是最简单的一种, 但是它的效率不高, 下面是一个简单的示例:\\n\\n```go\\ntype Mutex struct {\\n    locked int32\\n}\\n\\nfunc (m *Mutex) Lock() {\\n  for xchg(&m.locked, 1) == 1{\\n    // spin\\n  }\\n  m.locked = 1\\n}\\n\\nfunc (m *Mutex) Unlock() {\\n  m.locked = 0\\n}\\n\\nfunc xchg(addr *int32, new int32) int32 {\\n  old := *addr\\n  *addr = new\\n  return old\\n}\\n```\\n\\n当第一个线程调用了 Lock() 时, 它会将 locked 的值从 0 改为 1, 但是当第二个线程调用 Lock() 时, 它会发现 locked 的值已经是 1 了, 所以它会一直 spin 等待第一个线程将 locked 的值改为 0, 这样就实现了互斥.\\n\\n而 xchg 就是操作系统提供给我们的一个原子交换指令, 它的作用是将 addr 的值与 new 交换, 并返回 addr 的旧值.\\n\\n### 能不能更高效点?\\n\\n上面这种锁的优点就是实现简单, 就是会浪费很多 CPU 时间, 比如说一个线程在等待另一个线程释放锁时, 它会一直 spin 等待, 这样就会浪费很多 CPU 时间\\n\\n#### 主动出让时间片\\n\\n```go {3}\\nfunc (m *Mutex) Lock() {\\n  for xchg(&m.locked, 1) == 1{\\n    yield()\\n  }\\n  m.locked = 1\\n}\\n```\\n\\n当 xchg 失败时, 可以主动调用 yield() 出让时间片, 这样就不会浪费 CPU 时间了.\\n\\n但是这样同样也有个问题, 假如有很多线程都在等待这个锁, 那么它们都会主动出让时间片, 这样同样效率也很低, 因为这个涉及到线程的切换\\n\\n#### 休眠\\n\\n使用休眠的方式来实现互斥, 假设有一个线程列表存放获取这把锁的线程, 当它获取锁失败时就放入休眠列表, 当锁被释放时, 就唤醒休眠列表中的线程.\\n\\n在 linux 中, futex 就是实现了类似这种机制\\n","desc":"互斥是一种并发控制机制，用于保证在同一时刻只有一个线程可以访问共享资源。","date":1680005387000,"update":1680005387000},{"title":"一个 VitePress 博客主题","url":"/content/posts/2023-03-27-vitepress-blog-theme.html","frontmatter":{"title":"一个 VitePress 博客主题","date":"2023-03-27T19:53:12+08:00","layout":"post","tags":["project","front"]},"src":"\\n\\n> 这两天写了一个 vitepress blog 主题, 用来替换掉 hugo, 原本的[博客存档](https://github.com/fzdwx/blog-history)\\n\\n在功能上尽可能的和原本的主题一致,比如说:\\n\\n1. post, 用于存放普通的博客\\n2. issue, 一种可以动态更新的博客, 个人以前用来存放一些资料和收藏夹等\\n   - 现在跟以前一样都是用 Gtihub action 来实现的, 不同点是现在直接提供了一个 cli 工具, 用户可以随时拉取\\n   - 以前则全部都是用 action 实现的 - [相关介绍](/content/posts/2022-10-15-about-github-action)\\n3. docs, 用于存放文档/笔记. 得益于使用 vitepress, 所以文档的功能很强大, 有侧边栏,大纲等\\n   - 并且添加了大纲自动生成功能, 根据一个 `group` 来进行分组\\n\\n我还提供了一个 cli 工具, 它可以同来辅助使用 vitepress-blog-theme:\\n\\n```shell\\nbang init # 初始化主题\\nbang sync # 同步 issue\\nbang new  # 创建 page\\nbang update # 同步主题\\n```\\n\\n---\\n\\n主题地址: https://github.com/fzdwx/vitepress-blog-theme\\n","desc":"<blockquote>\\n<p>这两天写了一个 vitepress blog 主题, 用来替换掉 hugo, 原本的<a href=\\"https://github.com/fzdwx/blog-history\\" target=\\"_blank\\" rel=\\"noreferrer\\">博客存档</a></p>\\n</blockquote>\\n<p>在功能上尽可能的和原本的主题一致,比如说:</p>\\n<ol>\\n<li>post, 用于存放普通的博客</li>\\n<li>issue, 一种可以动态更新的博客, 个人以前用来存放一些资料和收藏夹等\\n<ul>\\n<li>现在跟以前一样都是用 Gtihub action 来实现的, 不同点是现在直接提供了一个 cli 工具, 用户可以随时拉取</li>\\n<li>以前则全部都是用 action 实现的 - <a href=\\"/content/posts/2022-10-15-about-github-action.html\\">相关介绍</a></li>\\n</ul>\\n</li>\\n<li>docs, 用于存放文档/笔记. 得益于使用 vitepress, 所以文档的功能很强大, 有侧边栏,大纲等\\n<ul>\\n<li>并且添加了大纲自动生成功能, 根据一个 <code>group</code> 来进行分组</li>\\n</ul>\\n</li>\\n</ol>\\n<p>我还提供了一个 cli 工具, 它可以同来辅助使用 vitepress-blog-theme:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bang</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">init</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\"># 初始化主题</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bang</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">sync</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\"># 同步 issue</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bang</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">new</span><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #676E95; font-style: italic\\"># 创建 page</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bang</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">update</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\"># 同步主题</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><hr>\\n<p>主题地址: <a href=\\"https://github.com/fzdwx/vitepress-blog-theme\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://github.com/fzdwx/vitepress-blog-theme</a></p>\\n","date":1679917992000,"update":1679917992000},{"title":"浏览器字体加重不生效","url":"/content/posts/2023-03-22-web-font.html","frontmatter":{"title":"浏览器字体加重不生效","date":"2023-03-22T12:32:27.000Z","update":"2023-03-22T12:32:27.000Z","layout":"post","tags":["web"]},"src":"\\n\\n> 最近在研究 vitepress 的主题, 准备把博客从 hugo 改成 vitepress (还是前端写页面比较有优势).\\n\\n在写主题时, 发现我添加的自定义的字体设置 `font-weight` 怎么也不生效, 但是在 hugo 中是可以的.\\n\\n最后一个个 `F12` 一个个样式的去尝试, 发现 vitepress 的 body 会带下面的样式:\\n\\n```css\\ntext-rendering: optimizeLegibility;\\ndirection: ltr;\\nfont-synthesis: style;\\n-webkit-font-smoothing: antialiased;\\n```\\n\\n问题就是出在 `font-synthesis: style;` 上, 改成 `weight` 即可.\\n","desc":"<blockquote>\\n<p>最近在研究 vitepress 的主题, 准备把博客从 hugo 改成 vitepress (还是前端写页面比较有优势).</p>\\n</blockquote>\\n<p>在写主题时, 发现我添加的自定义的字体设置 <code>font-weight</code> 怎么也不生效, 但是在 hugo 中是可以的.</p>\\n<p>最后一个个 <code>F12</code> 一个个样式的去尝试, 发现 vitepress 的 body 会带下面的样式:</p>\\n<div class=\\"language-css line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">css</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">text-rendering</span><span style=\\"color: #A6ACCD\\">: optimizeLegibility;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">direction: ltr;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">font-synthesis</span><span style=\\"color: #A6ACCD\\">: style;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">-webkit-font-smoothing: antialiased;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><p>问题就是出在 <code>font-synthesis: style;</code> 上, 改成 <code>weight</code> 即可.</p>\\n","date":1679488347000,"update":1679488347000},{"title":"在 Obsidian 中预览 hugo ","url":"/content/posts/2022-12-04-hugo-preview-obsidian.html","frontmatter":{"title":"在 Obsidian 中预览 hugo ","date":"2022-12-04T14:45:02.000Z","update":"2023-03-08T22:09:34+0800","layout":"post","summary":"前段时间玩过几天的 obsidian,由于太费神了所以转向了 hugo ,然后直接用文本编辑器写 md ,体验还是不太好,然后我想起还有 obsidian 这个软件,所以就有了这个插件.","tags":["obsidian","project"]},"src":"\\n\\n> 前段时间玩过几天的 obsidian,由于太费神了所以转向了 hugo ,然后直接用文本编辑器写 md ,体验还是不太好,然后我想起还有\\n> obsidian 这个软件,所以就有了这个插件.\\n\\n仓库: https://github.com/fzdwx/hugo-preview-obsidian\\n\\n![运行图例,左编辑区域,右预览区域](/images/12.png)\\n\\n---\\n\\n### 1. 当前主要功能\\n\\n1. 开一个 `custome iframe` 预览 hugo (via https://github.com/Ellpeck/ObsidianCustomFrames)\\n2. 后台启动 `hugo server`\\n\\n### 2. 遇到的问题\\n\\n1. ~~获取 obsidian 打开的目录不知道 api( cwd ),后提 issue 知道了获取方法~~\\n\\n### 3. 更新\\n\\n1. 支持自定义 exec command, 例如可以用来启动终端. 使用 `ALT+F12` 唤起.\\n    1. 由于我使用 git 进行同步,时常需要打开终端并且进入到具体的目录,所以需要一个快速启动终端在当前的目录下的命令： `wezterm start --class float --cwd ${cwd}`.\\n    2. 目前只提供了 cwd 这个变量,它会替换为当前笔记的路径\\n2. 添加定义 `hugo` 的路径,如果不设置则使用系统的 `hugo` 命令\\n\\n![自定义 command 配置示例](/images/13.png)\\n","desc":"前段时间玩过几天的 obsidian,由于太费神了所以转向了 hugo ,然后直接用文本编辑器写 md ,体验还是不太好,然后我想起还有 obsidian 这个软件,所以就有了这个插件.","date":1670165102000,"update":1678284574000},{"title":"记录学习 jyyos 操作系统课","url":"/content/posts/2023-03-05-jyyos_c_compile.html","frontmatter":{"title":"记录学习 jyyos 操作系统课","date":"2023-03-05T14:27:31.000Z","update":"2023-03-08T22:09:34+0800","tags":["os","linux"],"layout":"post"},"src":"\\n\\n> 最近也是又追起了南京大学的操作系统课(前面几次都中途放弃了),记录一下\\n>\\n> 1. 课程网站: <http://jyywiki.cn/OS/2023/>\\n> 2. 课程代码仓库: <https://git.nju.edu.cn/jyy/os-workbench>\\n> 3. 课程视频: <https://www.bilibili.com/video/BV1xX4y1d7v2>\\n> 4. OSTEP: <https://pages.cs.wisc.edu/~remzi/OSTEP/> [中文](https://github.com/remzi-arpacidusseau/ostep-translations/tree/master/chinese)\\n\\n### 1. 首先就是编译第三节课的一个 demo 时,找不到 ld 等命令\\n\\n> <http://jyywiki.cn/OS/2023/build/lect3.ipynb> demo(\'hello-os\', \'i/hello-os\')\\n\\n由于我使用的是 archlinux, `binutils` 编译出来的 ld, gcc 等命令都是不带 x86 的前缀的,\\n而 Makefile 中定义的都是带 x86 的, 所以需要建立一个链接:\\n\\n```shell\\nln -s /usr/bin/ld /usr/bin/x86_64-linux-gnu-ld\\n```\\n\\n:::tip 来自 chatgpt 的解释:\\n该命令创建了一个名为“x86_64-linux-gnu-ld”的符号链接,指向“/usr/bin/ld”.这个符号链接可以被用作“x86_64-linux-gnu-ld”二进制文件的替代品.\\n符号链接是一种特殊的文件类型,它是一个指向另一个文件的文件,可以用来在文件系统中创建指向其他文件或目录的别名.\\n\\n在 Linux 系统中,“/usr/bin/ld”是一个连接器（linker）,用于将多个目标文件合并为单个可执行文件.通过创建“x86_64-linux-gnu-ld”的符号链接,可以使该链接器的功能可以在不同的系统上使用,并且不需要更改可执行文件的代码. [123](http://jyywiki.cn/OS/2023/build/lect3.ipynb)\\n这个符号链接通常被用于交叉编译（cross-compiling）应用程序,这种情况下,应用程序在不同的硬件平台上运行.\\n:::\\n\\n### 2. 使用 vscode 等编辑器时,第一个问题的代码中头文件无法跳转\\n\\n使用 bear 生成 compile_commands.json, 然后编辑器就会自动识别了\\n\\n```shell\\nbear -- make\\n```\\n\\n:::tip 来自 chatgpt 的解释:\\n该命令使用 Bear 和 Make 工具,用于自动捕获 Makefile 的编译命令和编译期间的调用链.\\n\\n具体来说,Bear 是一个工具,它可以将系统调用跟踪器（strace）输出转换为 JSON 格式的文件,这个文件包含了所有运行期间的系统调用.\\nMake 是一个工具,它用于根据 Makefile 规则自动构建和编译程序.\\n\\n当这两个工具一起使用时,可以使用“bear -- make”命令自动捕获 Makefile 的编译命令和编译期间的调用链,这个过程可以在后续的调试中使用.\\n该命令的执行将产生一个 JSON 格式的文件,其中包含编译期间的所有系统调用和它们的参数.这个文件可以用于调试,性能优化,以及自动化编译和构建系统的开发.\\n\\n总之,“bear -- make”命令可以帮助程序员更好地理解他们的代码在编译期间所做的事情,以及识别代码中的潜在问题.\\n:::\\n\\n### 3. 写一个 pstree - M1\\n\\n> <http://jyywiki.cn/OS/2023/labs/M1>\\n\\n实现思路:\\n\\n1. 扫描 `/proc/` 目录下所有为数字的文件夹\\n2. 读取 `/proc/{pid}/status` 文件\\n3. 读取 name 以及 ppid\\n4. 建树并打印树结构\\n\\n### ~~4. 关于编译新的 os-workbench~~\\n\\n~~今天尝试下载了一下 2023 年的代码仓库,没想到可以下了~~\\n\\n```shell\\n~~git clone https://git.nju.edu.cn/jyy/os-workbench.git~~\\n```\\n\\n~~然后我就拉了 L0 来跑,但是怎么样都跑不动: `[-Werror=array-bounds]` 是关于数组越界的~~\\n~~文件是 `os-workbench/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o:433`~~\\n\\n```shell\\n~~git pull origin L0~~\\n```\\n\\n~~解决办法是在 `os-workbench/abstract-machine/Makefile` 的 `CFLAGS` 最后添加 `-Wno-array-bounds`~~\\n\\n### 5. 跑起来 2023 版的代码\\n\\n昨天晚上在我在本机的 L0 代码下 `make run` 是跑不起来的,qemu 正常启动了但是界面是黑的,环境是\\n\\n```shell\\nLinux archlinux 6.2.2-arch1-1\\nqemu 7.2\\ngcc 12.2.1\\n```\\n\\n最后只能曲线救国,在 docker 中 build, 然后在本机跑 qemu (docker 中不方便按图形化界面)\\n\\n```shell\\nFROM ubuntu:22.04\\nENV DEBIAN_FRONTEND=noninteractive\\nRUN apt-get update\\nRUN apt-get install -y build-essential git gcc-multilib qemu-system strace gdb sudo python3 libsdl2-dev libreadline-dev llvm-11\\nRUN useradd -ms /bin/bash user\\nUSER user\\nWORKDIR /home/users\\n```\\n\\n```shell\\ndocker build -t jyyos .\\n# os-workbench\\ndocker run --rm -it -v ${PWD}:/mnt -w /mnt jyyos bash\\n\\n# exit docker : os-workbench/kernel\\nmake\\nqemu-system-x86_64 -serial mon:stdio -machine accel=tcg -smp \\"\\" -drive format=raw,file=./build/kernel-x86_64-qemu\\n```\\n\\n可能还是编译出了问题, 使用 docker 编译后就没有出现第 4 个问题\\n\\n![run kernel](/images/12333.png)\\n\\n### 6. 在 AbstractMachine 中显示一张图片 - L0\\n\\n这个我记得去年是做一个可以动的游戏,根据键盘的输入去做一些响应,而今年的是只要打印一张图片,大概思路:\\n\\n1. `xxd -i xxx.png > img_data.h`\\n2. 遍历这个数组,取 rgb 并调用 `draw_title`\\n3. 解析参数,获取要输出的分辨率,然后在获得宽高的缩放比,最后获得对于的像素点\\n\\n![1800x1200](/images/1001.png)\\n\\n![320x240](/images/2023-03-16-21-45-20.png)\\n\\n感觉我的实现有问题,只是放大了左上角\\n","desc":"<blockquote>\\n<p>最近也是又追起了南京大学的操作系统课(前面几次都中途放弃了),记录一下</p>\\n<ol>\\n<li>课程网站: <a href=\\"http://jyywiki.cn/OS/2023/\\" target=\\"_blank\\" rel=\\"noreferrer\\">http://jyywiki.cn/OS/2023/</a></li>\\n<li>课程代码仓库: <a href=\\"https://git.nju.edu.cn/jyy/os-workbench\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://git.nju.edu.cn/jyy/os-workbench</a></li>\\n<li>课程视频: <a href=\\"https://www.bilibili.com/video/BV1xX4y1d7v2\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://www.bilibili.com/video/BV1xX4y1d7v2</a></li>\\n<li>OSTEP: <a href=\\"https://pages.cs.wisc.edu/~remzi/OSTEP/\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://pages.cs.wisc.edu/~remzi/OSTEP/</a> <a href=\\"https://github.com/remzi-arpacidusseau/ostep-translations/tree/master/chinese\\" target=\\"_blank\\" rel=\\"noreferrer\\">中文</a></li>\\n</ol>\\n</blockquote>\\n<h3 id=\\"_1-首先就是编译第三节课的一个-demo-时-找不到-ld-等命令\\" tabindex=\\"-1\\">1. 首先就是编译第三节课的一个 demo 时,找不到 ld 等命令 <a class=\\"header-anchor\\" href=\\"#_1-首先就是编译第三节课的一个-demo-时-找不到-ld-等命令\\" aria-label=\\"Permalink to &quot;1. 首先就是编译第三节课的一个 demo 时,找不到 ld 等命令&quot;\\">&ZeroWidthSpace;</a></h3>\\n<blockquote>\\n<p><a href=\\"http://jyywiki.cn/OS/2023/build/lect3.ipynb\\" target=\\"_blank\\" rel=\\"noreferrer\\">http://jyywiki.cn/OS/2023/build/lect3.ipynb</a> demo(\'hello-os\', \'i/hello-os\')</p>\\n</blockquote>\\n<p>由于我使用的是 archlinux, <code>binutils</code> 编译出来的 ld, gcc 等命令都是不带 x86 的前缀的,\\n而 Makefile 中定义的都是带 x86 的, 所以需要建立一个链接:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">ln</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-s</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/usr/bin/ld</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/usr/bin/x86_64-linux-gnu-ld</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">来自 chatgpt 的解释:</p>\\n<p>该命令创建了一个名为“x86_64-linux-gnu-ld”的符号链接,指向“/usr/bin/ld”.这个符号链接可以被用作“x86_64-linux-gnu-ld”二进制文件的替代品.\\n符号链接是一种特殊的文件类型,它是一个指向另一个文件的文件,可以用来在文件系统中创建指向其他文件或目录的别名.</p>\\n<p>在 Linux 系统中,“/usr/bin/ld”是一个连接器（linker）,用于将多个目标文件合并为单个可执行文件.通过创建“x86_64-linux-gnu-ld”的符号链接,可以使该链接器的功能可以在不同的系统上使用,并且不需要更改可执行文件的代码. <a href=\\"http://jyywiki.cn/OS/2023/build/lect3.ipynb\\" target=\\"_blank\\" rel=\\"noreferrer\\">123</a>\\n这个符号链接通常被用于交叉编译（cross-compiling）应用程序,这种情况下,应用程序在不同的硬件平台上运行.</p>\\n</div>\\n<h3 id=\\"_2-使用-vscode-等编辑器时-第一个问题的代码中头文件无法跳转\\" tabindex=\\"-1\\">2. 使用 vscode 等编辑器时,第一个问题的代码中头文件无法跳转 <a class=\\"header-anchor\\" href=\\"#_2-使用-vscode-等编辑器时-第一个问题的代码中头文件无法跳转\\" aria-label=\\"Permalink to &quot;2. 使用 vscode 等编辑器时,第一个问题的代码中头文件无法跳转&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>使用 bear 生成 compile_commands.json, 然后编辑器就会自动识别了</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bear</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">make</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">来自 chatgpt 的解释:</p>\\n<p>该命令使用 Bear 和 Make 工具,用于自动捕获 Makefile 的编译命令和编译期间的调用链.</p>\\n<p>具体来说,Bear 是一个工具,它可以将系统调用跟踪器（strace）输出转换为 JSON 格式的文件,这个文件包含了所有运行期间的系统调用.\\nMake 是一个工具,它用于根据 Makefile 规则自动构建和编译程序.</p>\\n<p>当这两个工具一起使用时,可以使用“bear -- make”命令自动捕获 Makefile 的编译命令和编译期间的调用链,这个过程可以在后续的调试中使用.\\n该命令的执行将产生一个 JSON 格式的文件,其中包含编译期间的所有系统调用和它们的参数.这个文件可以用于调试,性能优化,以及自动化编译和构建系统的开发.</p>\\n<p>总之,“bear -- make”命令可以帮助程序员更好地理解他们的代码在编译期间所做的事情,以及识别代码中的潜在问题.</p>\\n</div>\\n<h3 id=\\"_3-写一个-pstree-m1\\" tabindex=\\"-1\\">3. 写一个 pstree - M1 <a class=\\"header-anchor\\" href=\\"#_3-写一个-pstree-m1\\" aria-label=\\"Permalink to &quot;3. 写一个 pstree - M1&quot;\\">&ZeroWidthSpace;</a></h3>\\n<blockquote>\\n<p><a href=\\"http://jyywiki.cn/OS/2023/labs/M1\\" target=\\"_blank\\" rel=\\"noreferrer\\">http://jyywiki.cn/OS/2023/labs/M1</a></p>\\n</blockquote>\\n<p>实现思路:</p>\\n<ol>\\n<li>扫描 <code>/proc/</code> 目录下所有为数字的文件夹</li>\\n<li>读取 <code>/proc/{pid}/status</code> 文件</li>\\n<li>读取 name 以及 ppid</li>\\n<li>建树并打印树结构</li>\\n</ol>\\n<h3 id=\\"_4-关于编译新的-os-workbench\\" tabindex=\\"-1\\"><s>4. 关于编译新的 os-workbench</s> <a class=\\"header-anchor\\" href=\\"#_4-关于编译新的-os-workbench\\" aria-label=\\"Permalink to &quot;~~4. 关于编译新的 os-workbench~~&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p><s>今天尝试下载了一下 2023 年的代码仓库,没想到可以下了</s></p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">~</span><span style=\\"color: #A6ACCD\\">~git clone https://git.nju.edu.cn/jyy/os-workbench.git~~</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p><s>然后我就拉了 L0 来跑,但是怎么样都跑不动: <code>[-Werror=array-bounds]</code> 是关于数组越界的</s>\\n<s>文件是 <code>os-workbench/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o:433</code></s></p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">~</span><span style=\\"color: #A6ACCD\\">~git pull origin L0~~</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p><s>解决办法是在 <code>os-workbench/abstract-machine/Makefile</code> 的 <code>CFLAGS</code> 最后添加 <code>-Wno-array-bounds</code></s></p>\\n<h3 id=\\"_5-跑起来-2023-版的代码\\" tabindex=\\"-1\\">5. 跑起来 2023 版的代码 <a class=\\"header-anchor\\" href=\\"#_5-跑起来-2023-版的代码\\" aria-label=\\"Permalink to &quot;5. 跑起来 2023 版的代码&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>昨天晚上在我在本机的 L0 代码下 <code>make run</code> 是跑不起来的,qemu 正常启动了但是界面是黑的,环境是</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">Linux</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">archlinux</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">6.2.2-arch1-</span><span style=\\"color: #F78C6C\\">1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">qemu</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">7.2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">gcc</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">12.2.1</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><p>最后只能曲线救国,在 docker 中 build, 然后在本机跑 qemu (docker 中不方便按图形化界面)</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">FROM</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">ubuntu:</span><span style=\\"color: #F78C6C\\">22.04</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">ENV</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">DEBIAN_FRONTEND=noninteractive</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">RUN</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">apt-get</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">update</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">RUN</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">apt-get</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">install</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-y</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">build-essential</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">git</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">gcc-multilib</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">qemu-system</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">strace</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">gdb</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">sudo</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">python3</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">libsdl2-dev</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">libreadline-dev</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">llvm-</span><span style=\\"color: #F78C6C\\">11</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">RUN</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">useradd</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-ms</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/bin/bash</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">user</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">USER</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">user</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">WORKDIR</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/home/users</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br></div></div><div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">docker</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">build</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-t</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">jyyos</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># os-workbench</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">docker</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">run</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--rm</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-it</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-v</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">PWD</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #C3E88D\\">:/mnt</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-w</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/mnt</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">jyyos</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">bash</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># exit docker : os-workbench/kernel</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">make</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">qemu-system-x86_64</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-serial</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">mon:stdio</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-machine</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">accel=tcg</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-smp</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;&quot;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-drive</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">format=raw,file=./build/kernel-x86_64-qemu</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br></div></div><p>可能还是编译出了问题, 使用 docker 编译后就没有出现第 4 个问题</p>\\n<p><img src=\\"/images/12333.png\\" alt=\\"run kernel\\"></p>\\n<h3 id=\\"_6-在-abstractmachine-中显示一张图片-l0\\" tabindex=\\"-1\\">6. 在 AbstractMachine 中显示一张图片 - L0 <a class=\\"header-anchor\\" href=\\"#_6-在-abstractmachine-中显示一张图片-l0\\" aria-label=\\"Permalink to &quot;6. 在 AbstractMachine 中显示一张图片 - L0&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>这个我记得去年是做一个可以动的游戏,根据键盘的输入去做一些响应,而今年的是只要打印一张图片,大概思路:</p>\\n<ol>\\n<li><code>xxd -i xxx.png &gt; img_data.h</code></li>\\n<li>遍历这个数组,取 rgb 并调用 <code>draw_title</code></li>\\n<li>解析参数,获取要输出的分辨率,然后在获得宽高的缩放比,最后获得对于的像素点</li>\\n</ol>\\n<p><img src=\\"/images/1001.png\\" alt=\\"1800x1200\\"></p>\\n<p><img src=\\"/images/2023-03-16-21-45-20.png\\" alt=\\"320x240\\"></p>\\n<p>感觉我的实现有问题,只是放大了左上角</p>\\n","date":1678026451000,"update":1678284574000},{"title":"用 Rust 写的弹窗翻译软件","url":"/content/posts/2023-02-13-asd.html","frontmatter":{"title":"用 Rust 写的弹窗翻译软件","date":"2023-02-13T12:10:04.000Z","layout":"post","tags":["project","rust"]},"src":"\\n\\n项目地址： https://github.com/fzdwx/popup-translation, 目前已经用 tauri + vue3 改写了\\n\\n支持两种模式:\\n\\n1. 聚合模式, 一次性请求所有的平台\\n2. 单平台模式, 一次请求一个平台\\n\\n然后还添加了配置功能, 可以自定义快捷键等, 以及最重要的 划词翻译, 也就是选中文本后, 按下快捷键, 就会弹出翻译窗口.\\n\\n不过只测试 linux(x11) 上的运行情况\\n\\n使用 tauri 的话好处就是打包分发的包很小, 但是缺点就是编译太慢了, 好在可以用 github action release.\\n\\n![123123](/images/2023-03-28-17-57-41.png)\\n\\n![123123](/images/2023-03-28-17-30-31.png)\\n","desc":"<p>项目地址： <a href=\\"https://github.com/fzdwx/popup-translation\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://github.com/fzdwx/popup-translation</a>, 目前已经用 tauri + vue3 改写了</p>\\n<p>支持两种模式:</p>\\n<ol>\\n<li>聚合模式, 一次性请求所有的平台</li>\\n<li>单平台模式, 一次请求一个平台</li>\\n</ol>\\n<p>然后还添加了配置功能, 可以自定义快捷键等, 以及最重要的 划词翻译, 也就是选中文本后, 按下快捷键, 就会弹出翻译窗口.</p>\\n<p>不过只测试 linux(x11) 上的运行情况</p>\\n<p>使用 tauri 的话好处就是打包分发的包很小, 但是缺点就是编译太慢了, 好在可以用 github action release.</p>\\n<p><img src=\\"/images/2023-03-28-17-57-41.png\\" alt=\\"123123\\"></p>\\n<p><img src=\\"/images/2023-03-28-17-30-31.png\\" alt=\\"123123\\"></p>\\n","date":1676290204000,"update":1676290204000},{"title":"使用 tmux + st","url":"/content/posts/2023-02-12-tmux-st.html","frontmatter":{"title":"使用 tmux + st","layout":"post","date":"2023-02-12T08:10:50.000Z","tags":["linux"]},"src":"\\n\\n[st](https://st.suckless.org/) 是一个非常的简单的终端软件,它对我的来说只少一个功能,就是多路服用(上下左右切分窗口),这在其他终端软件中都有提供,比如说 wezterm.\\n\\n而 tmux 刚好可以提供这个功能:\\n\\n```shell\\ntmux split-window    # 向下切分\\ntmux split-window -h # 向右切分\\n```\\n\\n然后就可以在 st 中设置快捷键:\\n:::details\\n```c\\n/* 切分 */\\nstatic char *sp[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux split-window\\",\\"externalpipe\\", NULL };\\nstatic char *sph[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux split-window -h\\",\\"externalpipe\\", NULL };\\n\\n/* 切换窗口 */\\nstatic char *gd[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux select-pane -D\\",\\"externalpipe\\", NULL };\\nstatic char *gu[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux select-pane -U\\",\\"externalpipe\\", NULL };\\nstatic char *gr[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux select-pane -R\\",\\"externalpipe\\", NULL };\\nstatic char *gl[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux select-pane -L\\",\\"externalpipe\\", NULL };\\n\\n/* 调整窗口大小 */\\nstatic char *rd[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux resize-pane -D 2\\",\\"externalpipe\\", NULL };\\nstatic char *ru[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux resize-pane -U 2\\",\\"externalpipe\\", NULL };\\nstatic char *rr[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux resize-pane -R 2\\",\\"externalpipe\\", NULL };\\nstatic char *rl[] = { \\"/bin/sh\\", \\"-c\\", \\"tmux resize-pane -L 2\\",\\"externalpipe\\", NULL };\\n\\nstatic Shortcut shortcuts[] = {\\n{ ControlMask, XK_minus, externalpipe, {.v = sp } },\\n{ ControlMask, XK_backslash, externalpipe, {.v = sph } },\\n\\n{ MODKEY, XK_Up, externalpipe, {.v = gu} },\\n{ MODKEY, XK_Down, externalpipe, {.v = gd} },\\n{ MODKEY, XK_Left, externalpipe, {.v = gl} },\\n{ MODKEY, XK_Right, externalpipe, {.v = gr} },\\n\\n{ ControlMask, XK_Up, externalpipe, {.v = ru} },\\n{ ControlMask, XK_Down, externalpipe, {.v = rd} },\\n{ ControlMask, XK_Left, externalpipe, {.v = rl} },\\n{ ControlMask, XK_Right, externalpipe, {.v = rr} },\\n};\\n```\\n:::\\n\\n最后关闭 tmux 的 status line, 因为我只需要它的 pane 功能,其他的都太碍眼了.\\n```c\\nset -g status off\\n```\\n\\n\\n![preview](https://user-images.githubusercontent.com/65269574/218301130-4e361459-e366-4793-b94f-a8b4b07a47e4.gif)\\n\\n----\\n\\n我的分支: https://github.com/fzdwx/st\\n","desc":"<p><a href=\\"https://st.suckless.org/\\" target=\\"_blank\\" rel=\\"noreferrer\\">st</a> 是一个非常的简单的终端软件,它对我的来说只少一个功能,就是多路服用(上下左右切分窗口),这在其他终端软件中都有提供,比如说 wezterm.</p>\\n<p>而 tmux 刚好可以提供这个功能:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">tmux</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">split-window</span><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #676E95; font-style: italic\\"># 向下切分</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">tmux</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">split-window</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-h</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\"># 向右切分</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>然后就可以在 st 中设置快捷键:</p>\\n<details class=\\"details custom-block\\"><summary>Details</summary>\\n<div class=\\"language-c line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">c</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">/* 切分 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">sp</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux split-window</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">sph</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux split-window -h</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">/* 切换窗口 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">gd</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux select-pane -D</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">gu</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux select-pane -U</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">gr</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux select-pane -R</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">gl</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux select-pane -L</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">/* 调整窗口大小 */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">rd</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux resize-pane -D 2</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">ru</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux resize-pane -U 2</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">rr</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux resize-pane -R 2</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">char</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">*</span><span style=\\"color: #A6ACCD\\">rl</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">/bin/sh</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">-c</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">tmux resize-pane -L 2</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">externalpipe</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">NULL</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">};</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">static</span><span style=\\"color: #A6ACCD\\"> Shortcut shortcuts</span><span style=\\"color: #C792EA\\">[]</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> ControlMask</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_minus</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> sp </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> ControlMask</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_backslash</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> sph </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> MODKEY</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Up</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> gu</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> MODKEY</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Down</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> gd</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> MODKEY</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Left</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> gl</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> MODKEY</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Right</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> gr</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> ControlMask</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Up</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> ru</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> ControlMask</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Down</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> rd</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> ControlMask</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Left</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> rl</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> ControlMask</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> XK_Right</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> externalpipe</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\">.v </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> rr</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">};</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br></div></div></details>\\n<p>最后关闭 tmux 的 status line, 因为我只需要它的 pane 功能,其他的都太碍眼了.</p>\\n<div class=\\"language-c line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">c</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">set </span><span style=\\"color: #89DDFF\\">-</span><span style=\\"color: #A6ACCD\\">g status off</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p><img src=\\"https://user-images.githubusercontent.com/65269574/218301130-4e361459-e366-4793-b94f-a8b4b07a47e4.gif\\" alt=\\"preview\\"></p>\\n<hr>\\n<p>我的分支: <a href=\\"https://github.com/fzdwx/st\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://github.com/fzdwx/st</a></p>\\n","date":1676189450000,"update":1676189450000},{"title":"linux 连接蓝牙耳机","url":"/content/posts/2023-02-09-bluetooth.html","frontmatter":{"title":"linux 连接蓝牙耳机","date":"2023-02-09T04:50:21.000Z","tags":["linux"],"layout":"post"},"src":"\\n\\n以 Archlinux 为例子\\n\\n```shell\\nbluetoothctl power on\\n# 扫描\\nbluetoothctl scan on\\n# 结对\\nbluetoothctl pair xxx\\n# 连接\\nbluetoothctl connect xxx\\n# 设置 蓝牙为默认输出\\npavucontrol\\n```\\n\\n![设置 蓝牙为默认输出](/images/20230209125317.png)\\n","desc":"<p>以 Archlinux 为例子</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bluetoothctl</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">power</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">on</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 扫描</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bluetoothctl</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">scan</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">on</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 结对</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bluetoothctl</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">pair</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">xxx</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 连接</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">bluetoothctl</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">connect</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">xxx</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 设置 蓝牙为默认输出</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">pavucontrol</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br></div></div><p><img src=\\"/images/20230209125317.png\\" alt=\\"设置 蓝牙为默认输出\\"></p>\\n","date":1675918221000,"update":1675918221000},{"title":"自定义一个 Neovim bufferline","url":"/content/posts/2023-02-01-bufline.html","frontmatter":{"title":"自定义一个 Neovim bufferline","date":"2023-02-01T15:59:53.000Z","tags":["project","nvim"],"layout":"post","cover":{"image":"/images/img%201.png"}},"src":"\\n\\n> 现在比较流行的 buffer line 插件是 [akinsho/bufferline](https://github.com/akinsho/bufferline.nvim),但是我感觉他太重了,而且不好看.比如说它可以跟 lsp 集成,可以切换各种 tab/buffer 模式等,但是不一定每个人都需要,而且各个顺序都固定了,总之就是*我想造轮子*: [fzdwx/bufline.nvim](https://github.com/fzdwx/bufline.nvim.git)\\n\\n在 nvim 中定义 tabline 可以使用 `vim.opt.tabline=xxx` 来设置, 比如说下面这段代码,就很容易的实现一个 buffer line：\\n\\n```lua\\nfunction _G.qweqweqwe()\\n\\tretrun \\"this is my line\\"\\nend\\n\\n-- config\\nvim.opt.tabline = \\"%!v:lua.qweqweqwe()\\"\\n```\\n\\n![Show](/images/20230202002815.png)\\n\\n那么接下来就很容易想到:\\n\\n1. 获取所有 buffer\\n2. 获取 buffer 对应文件的信息\\n   - 比如说文件名称\\n   - 显示文件 icon(由 [nvim-tree/nvim-web-devicons](https://github.com/nvim-tree/nvim-web-devicons) 支持)\\n3. 支持高亮\\n\\n如何实现的就不赘述了,如果有兴趣可以查看: [fzdwx/bufline.nvim](https://github.com/fzdwx/bufline.nvim.git). 目前所有的内容都可以自定义：\\n\\n```lua\\nM.folder  -- 入参是 buffer 数量,要求返回 Group: {hl,str}\\nM.dirName -- 入参是当前 buffer id, 要求返回 Group\\nM.devicon -- 入参是当前 buffer id,\\"Sel/NoSel\\",是否选中, 要求返回 Group\\nM.title   -- 入参是当前 buffer id,\\"Sel/NoSel\\", 要求返回 Group\\nM.modified  -- 入参是当前 buffer id, 要求返回 str\\nM.separator -- 要求返回 Group\\n\\n-- 下面这两个方法也可以自定义,需要用户自己保证正确性\\nM.cell  -- 每个 buffer 对应的信息,入参是当前 buffer id,当前选择的buffer id,要求返回 group 列表\\nM.bufline -- 构造整个 bufline\\n```\\n\\n`str` 就是具体内容, `hl` 就是要高亮标签, 例如 `BufLineFolder`当前支持：\\n\\n```\\nBufLineTitleSel\\nBufLineTitleNoSel\\nBufLineFill\\nBufLine\\nBufLineFolder\\n```\\n\\n这些高亮标签都没有默认设置,需要用户自定义,例如:\\n\\n```\\nvim.cmd([[au ColorScheme * hi BufLineTitleSel gui=none guibg=\'#282C34\' guifg=\'#5C6370\']])\\n```\\n\\n设置高亮遇到的问题,当设置 icon 的背景为空时,有背景颜色的 icon 跟没有的会一大一小,后来没办法,只能让它都开启颜色的,也就是没选中的 buffer 也会开启颜色跟 bufferline 的一样.\\n\\n在 lazy 中使用:\\n\\n```lua\\n{\\n    \\"fzdwx/bufline.nvim\\",\\n    event = \\"BufEnter\\",\\n    dependencies = {\\n        \\"nvim-tree/nvim-web-devicons\\",\\n    },\\n    config = function()\\n        local buf = require(\\"bufline\\")\\n        buf.setup({\\n            -- 自定义 separator\\n            separator = function()\\n                return {\\n                    str = \'\',\\n                    hl = \\"\\"\\n                }\\n            end\\n        })\\n    end,\\n},\\n```\\n","desc":"<blockquote>\\n<p>现在比较流行的 buffer line 插件是 <a href=\\"https://github.com/akinsho/bufferline.nvim\\" target=\\"_blank\\" rel=\\"noreferrer\\">akinsho/bufferline</a>,但是我感觉他太重了,而且不好看.比如说它可以跟 lsp 集成,可以切换各种 tab/buffer 模式等,但是不一定每个人都需要,而且各个顺序都固定了,总之就是<em>我想造轮子</em>: <a href=\\"https://github.com/fzdwx/bufline.nvim.git\\" target=\\"_blank\\" rel=\\"noreferrer\\">fzdwx/bufline.nvim</a></p>\\n</blockquote>\\n<p>在 nvim 中定义 tabline 可以使用 <code>vim.opt.tabline=xxx</code> 来设置, 比如说下面这段代码,就很容易的实现一个 buffer line：</p>\\n<div class=\\"language-lua line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">lua</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">_G</span><span style=\\"color: #A6ACCD\\">.</span><span style=\\"color: #82AAFF\\">qweqweqwe</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">\\t</span><span style=\\"color: #82AAFF\\">retrun</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">this is my line</span><span style=\\"color: #89DDFF\\">&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">end</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">-- config</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">vim.</span><span style=\\"color: #FFCB6B\\">opt</span><span style=\\"color: #A6ACCD\\">.</span><span style=\\"color: #FFCB6B\\">tabline</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">%!v:lua.qweqweqwe()</span><span style=\\"color: #89DDFF\\">&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br></div></div><p><img src=\\"/images/20230202002815.png\\" alt=\\"Show\\"></p>\\n<p>那么接下来就很容易想到:</p>\\n<ol>\\n<li>获取所有 buffer</li>\\n<li>获取 buffer 对应文件的信息\\n<ul>\\n<li>比如说文件名称</li>\\n<li>显示文件 icon(由 <a href=\\"https://github.com/nvim-tree/nvim-web-devicons\\" target=\\"_blank\\" rel=\\"noreferrer\\">nvim-tree/nvim-web-devicons</a> 支持)</li>\\n</ul>\\n</li>\\n<li>支持高亮</li>\\n</ol>\\n<p>如何实现的就不赘述了,如果有兴趣可以查看: <a href=\\"https://github.com/fzdwx/bufline.nvim.git\\" target=\\"_blank\\" rel=\\"noreferrer\\">fzdwx/bufline.nvim</a>. 目前所有的内容都可以自定义：</p>\\n<div class=\\"language-lua line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">lua</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">folder</span><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #676E95; font-style: italic\\">-- 入参是 buffer 数量,要求返回 Group: {hl,str}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">dirName</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\">-- 入参是当前 buffer id, 要求返回 Group</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">devicon</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\">-- 入参是当前 buffer id,&quot;Sel/NoSel&quot;,是否选中, 要求返回 Group</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">title</span><span style=\\"color: #A6ACCD\\">   </span><span style=\\"color: #676E95; font-style: italic\\">-- 入参是当前 buffer id,&quot;Sel/NoSel&quot;, 要求返回 Group</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">modified</span><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #676E95; font-style: italic\\">-- 入参是当前 buffer id, 要求返回 str</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">separator</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\">-- 要求返回 Group</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">-- 下面这两个方法也可以自定义,需要用户自己保证正确性</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">cell</span><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #676E95; font-style: italic\\">-- 每个 buffer 对应的信息,入参是当前 buffer id,当前选择的buffer id,要求返回 group 列表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">M.</span><span style=\\"color: #FFCB6B\\">bufline</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\">-- 构造整个 bufline</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br></div></div><p><code>str</code> 就是具体内容, <code>hl</code> 就是要高亮标签, 例如 <code>BufLineFolder</code>当前支持：</p>\\n<div class=\\"language- line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">BufLineTitleSel</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">BufLineTitleNoSel</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">BufLineFill</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">BufLine</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">BufLineFolder</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br></div></div><p>这些高亮标签都没有默认设置,需要用户自定义,例如:</p>\\n<div class=\\"language- line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\"></span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">vim.cmd([[au ColorScheme * hi BufLineTitleSel gui=none guibg=&#39;#282C34&#39; guifg=&#39;#5C6370&#39;]])</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>设置高亮遇到的问题,当设置 icon 的背景为空时,有背景颜色的 icon 跟没有的会一大一小,后来没办法,只能让它都开启颜色的,也就是没选中的 buffer 也会开启颜色跟 bufferline 的一样.</p>\\n<p>在 lazy 中使用:</p>\\n<div class=\\"language-lua line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">lua</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">fzdwx/bufline.nvim</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    event </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">BufEnter</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    dependencies </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">nvim-tree/nvim-web-devicons</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #82AAFF\\">config</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">function</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        </span><span style=\\"color: #89DDFF\\">local</span><span style=\\"color: #A6ACCD\\"> buf </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">require</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">bufline</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        buf.</span><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">            </span><span style=\\"color: #676E95; font-style: italic\\">-- 自定义 separator</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            </span><span style=\\"color: #82AAFF\\">separator</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">function</span><span style=\\"color: #89DDFF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">                </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #A6ACCD\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">                    str </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\"></span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">                    hl </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">                }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">            </span><span style=\\"color: #89DDFF; font-style: italic\\">end</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        })</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">end</span><span style=\\"color: #A6ACCD\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">},</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br></div></div>","date":1675267193000,"update":1675267193000},{"title":"Wayland下的窗口管理器： Hyprland","url":"/content/posts/2023-01-26-hyprland.html","frontmatter":{"title":"Wayland下的窗口管理器： Hyprland","date":"2023-01-26T03:04:48.000Z","layout":"post","tags":["linux","wm"]},"src":"\\n\\n今天简单尝试了一下 [Hyprland](https://hyprland.org/),它的功能类似于 [DWM](/content/posts/2022-09-29-dwm) + picom 的组合.只是粗略的尝试了一下,发现还是有一些问题:\\n1. 分屏的时候,扩展屏幕的光标不显示\\n\\t-  设置 `WLR_NO_HARDWARE_CURSORS=1`  即可解决\\n2. 扩展屏幕不时有一些黑块闪烁\\n\\t- 替换安装包为 `hyprland-nvidia-git`  即可解决\\n3. waybar 有一点用的不爽,它的 workspaces 不是每个屏幕都是独立的(DWM 中的 tag 功能)\\n\\n当然它还是有一些好处的:\\n1. 不打任何补丁就有很好的可用性\\n2. 自带了一些动画效果\\n3. 配置文件热加载(即每次修改就会立即生效)\\n\\t- 这一点好评,DWM 是每次修改了配置都要重新 `make`\\n\\n但是我还是选择继续使用 DWM,因为它没有什么必须切换的理由,而且有一些我常用的功能在 Hyprland 中没有找到替代的,加上我的 DWM 的配置也趋于稳定了,也新增了可以点击的 status bar（Hyprland 下使用waybar 可以做到这个功能）.\\n\\n\\n:::details 相关代码\\n安装脚本:\\n```shell\\n# 安装 hyperland\\nyay -S hyprland-nvidia-git\\n# 安装 waybar\\nyay -S waybar-hyprland-git\\n# 安装 hyprland share\\nyay -S xdg-desktop-portal-hyprland-git\\n# 安装 rofi for wayland\\nyay -S rofi-lbonn-wayland-git\\n\\n# 安装 壁纸切换\\ngit clone https://github.com/Horus645xx/swww\\ncd swww\\ncargo build --release\\ncp /target/release/swww /usr/bin\\ncp /target/release/swww-daemon /usr/bin\\nswww init\\nswww img --transition-type left  ~/Pictures/bg/0494e945880511ebb6edd017c2d2eca2.png\\n```\\n\\n供参考的启动脚本:\\n```shell\\nexport LIBVA_DRIVER_NAME=nvidia\\nexport XDG_SESSION_TYPE=wayland\\nexport GBM_BACKEND=nvidia-drm\\nexport __GLX_VENDOR_LIBRARY_NAME=nvidia\\nexport WLR_NO_HARDWARE_CURSORS=1 # fix cursor\\n\\n# Example IME Support: fcitx5\\nexport GTK_IM_MODULE=fcitx5\\nexport QT_IM_MODULE=fcitx5\\nexport XMODIFIERS=@im=fcitx5\\nexport SDL_IM_MODULE=fcitx5\\nexport GLFW_IM_MODULE=ibus\\n\\n\\nexec Hyprland\\n```\\n\\n~/.config/hypr/hyprland.conf:\\n\\n```txt\\n########################################################################################\\nAUTOGENERATED HYPR CONFIG.\\nPLEASE USE THE CONFIG PROVIDED IN THE GIT REPO /examples/hypr.conf AND EDIT IT,\\nOR EDIT THIS ONE ACCORDING TO THE WIKI INSTRUCTIONS.\\n########################################################################################\\n\\n#\\n# Please note not all available settings / options are set here.\\n# For a full list, see the wiki\\n#\\n\\n# See https://wiki.hyprland.org/Configuring/Monitors/\\nmonitor=,preferred,auto,auto\\n#monitor=eDP-1-1, 1920x1080@144, 1920x0, 1\\n#monitor=HDMI-0, 1920x1080@60, 0x0, 1\\n\\n# See https://wiki.hyprland.org/Configuring/Keywords/ for more\\n\\n# Execute your favorite apps at launch\\n# exec-once = waybar & hyprpaper & firefox\\n\\nexec-once = fcitx5\\nexec-once = flameshot\\nexec-once = /opt/clash/cfw\\nexec-once = waybar\\n#exec-once = dunst\\n\\n# Source a file (multi-file configs)\\n# source = ~/.config/hypr/myColors.conf\\n\\n#misc {\\n#    no_vfr = 1\\n#}\\n# For all categories, see https://wiki.hyprland.org/Configuring/Variables/\\ninput {\\n    kb_layout = us\\n    kb_variant =\\n    kb_model =\\n    kb_options =\\n    kb_rules =\\n\\n    follow_mouse = 1\\n\\n    touchpad {\\n        natural_scroll = no\\n    }\\n\\n    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.\\n}\\n\\ngeneral {\\n    # See https://wiki.hyprland.org/Configuring/Variables/ for more\\n\\n    gaps_in = 5\\n    gaps_out = 20\\n    border_size = 2\\n    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg\\n    col.inactive_border = rgba(595959aa)\\n\\n    layout = dwindle\\n}\\n\\ndecoration {\\n    # See https://wiki.hyprland.org/Configuring/Variables/ for more\\n\\n    rounding = 10\\n    blur = yes\\n    blur_size = 3\\n    blur_passes = 1\\n    blur_new_optimizations = on\\n\\n    drop_shadow = yes\\n    shadow_range = 4\\n    shadow_render_power = 3\\n    col.shadow = rgba(1a1a1aee)\\n}\\n\\nanimations {\\n    enabled = yes\\n\\n    # Some default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more\\n\\n    bezier = myBezier, 0.05, 0.9, 0.1, 1.05\\n\\n    animation = windows, 1, 7, myBezier\\n    animation = windowsOut, 1, 7, default, popin 80%\\n    animation = border, 1, 10, default\\n    animation = fade, 1, 7, default\\n    animation = workspaces, 1, 6, default\\n}\\n\\ndwindle {\\n    # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more\\n    pseudotile = yes # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below\\n    preserve_split = yes # you probably want this\\n}\\n\\nmaster {\\n    # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more\\n    new_is_master = true\\n}\\n\\ngestures {\\n    # See https://wiki.hyprland.org/Configuring/Variables/ for more\\n    workspace_swipe = off\\n}\\n\\n# Example per-device config\\n# See https://wiki.hyprland.org/Configuring/Keywords/#executing for more\\ndevice:epic mouse V1 {\\n    sensitivity = -0.5\\n}\\n\\n# Example windowrule v1\\n# windowrule = float, ^(kitty)$\\n# Example windowrule v2\\n# windowrulev2 = float,class:^(kitty)$,title:^(kitty)$\\n# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more\\n#\\n# 定义 class 带 float 的都初始为 float 启动\\nwindowrulev2 = float,class:^(float)$\\nwindowrulev2 = noborder,class:^(noborder)$\\n\\n# See https://wiki.hyprland.org/Configuring/Keywords/ for more\\n$mainMod = SUPER\\n$term = wezterm\\n$term_float = wezterm start --class float\\n$rofi = rofi -show window -show-icons\\n\\n# start term\\nbind = $mainMod,       Return,       exec, $term\\n# start float term\\nbind = $mainMod,   minus,        exec, $term_float\\n# start launch\\nbind = ALT,        SPACE,        exec, $rofi\\n\\n# kill window\\nbind = $mainMod, Q, killactive,\\nbind = $mainMod, P, pseudo, # dwindle\\nbind = $mainMod, J, togglesplit, # dwindle\\n# super + f 全屏窗口\\nbind=$mainMod,F,fullscreen,0\\n# super + space 将窗口切换为浮动\\nbind=$mainMod,SPACE,togglefloating,active\\n\\n\\n# 切换聚焦窗口\\nbind=SUPER,left,movefocus,l\\nbind=SUPER,right,movefocus,r\\nbind=SUPER,up,movefocus,u\\nbind=SUPER,down,movefocus,d\\n\\n# 将当前窗口移动 可以一直移动\\nbind=SUPERSHIFT,left,movewindow,l\\nbind=SUPERSHIFT,right,movewindow,r\\nbind=SUPERSHIFT,up,movewindow,u\\nbind=SUPERSHIFT,down,movewindow,d\\n\\n# 切换工作空间\\nbind=SUPER,TAB,workspace,previous\\nbind = $mainMod, 1, workspace, 1\\nbind = $mainMod, 2, workspace, 2\\nbind = $mainMod, 3, workspace, 3\\nbind = $mainMod, 4, workspace, 4\\nbind = $mainMod, 5, workspace, 5\\nbind = $mainMod, 6, workspace, 6\\nbind = $mainMod, 7, workspace, 7\\nbind = $mainMod, 8, workspace, 8\\nbind = $mainMod, 9, workspace, 9\\nbind = $mainMod, 0, workspace, 10\\n\\n\\n# alt+super + 方向键 控制窗口大小\\nbind=$mainMod,comma,resizeactive,-20 0\\nbind=$mainMod,period,resizeactive,20 0\\nbind=ALT_SUPER,up,resizeactive,0 -20\\nbind=ALT_SUPER,down,resizeactive,0 20\\n\\n# Move active window to a workspace with mainMod + SHIFT + [0-9]\\nbind = $mainMod SHIFT, 1, movetoworkspace, 1\\nbind = $mainMod SHIFT, 2, movetoworkspace, 2\\nbind = $mainMod SHIFT, 3, movetoworkspace, 3\\nbind = $mainMod SHIFT, 4, movetoworkspace, 4\\nbind = $mainMod SHIFT, 5, movetoworkspace, 5\\nbind = $mainMod SHIFT, 6, movetoworkspace, 6\\nbind = $mainMod SHIFT, 7, movetoworkspace, 7\\nbind = $mainMod SHIFT, 8, movetoworkspace, 8\\nbind = $mainMod SHIFT, 9, movetoworkspace, 9\\nbind = $mainMod SHIFT, 0, movetoworkspace, 10\\n\\n\\n# shift + super + left/right 移动窗口 到下一个或上一个工作区\\nbind = $mainMod SHIFT,Left,movetoworkspace,e-1\\nbind = $mainMod SHIFT,right,movetoworkspace,e+1\\n\\n# Scroll through existing workspaces with mainMod + scroll\\nbind = $mainMod, mouse_down, workspace, e+1\\nbind = $mainMod, mouse_up, workspace, e-1\\n\\n# Move/resize windows with mainMod + LMB/RMB and dragging\\nbindm = $mainMod, mouse:272, movewindow\\nbindm = $mainMod, mouse:273, resizewindow\\n```\\n:::\\n","desc":"<p>今天简单尝试了一下 <a href=\\"https://hyprland.org/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Hyprland</a>,它的功能类似于 <a href=\\"/content/posts/2022-09-29-dwm.html\\">DWM</a> + picom 的组合.只是粗略的尝试了一下,发现还是有一些问题:</p>\\n<ol>\\n<li>分屏的时候,扩展屏幕的光标不显示\\n<ul>\\n<li>设置 <code>WLR_NO_HARDWARE_CURSORS=1</code>  即可解决</li>\\n</ul>\\n</li>\\n<li>扩展屏幕不时有一些黑块闪烁\\n<ul>\\n<li>替换安装包为 <code>hyprland-nvidia-git</code>  即可解决</li>\\n</ul>\\n</li>\\n<li>waybar 有一点用的不爽,它的 workspaces 不是每个屏幕都是独立的(DWM 中的 tag 功能)</li>\\n</ol>\\n<p>当然它还是有一些好处的:</p>\\n<ol>\\n<li>不打任何补丁就有很好的可用性</li>\\n<li>自带了一些动画效果</li>\\n<li>配置文件热加载(即每次修改就会立即生效)\\n<ul>\\n<li>这一点好评,DWM 是每次修改了配置都要重新 <code>make</code></li>\\n</ul>\\n</li>\\n</ol>\\n<p>但是我还是选择继续使用 DWM,因为它没有什么必须切换的理由,而且有一些我常用的功能在 Hyprland 中没有找到替代的,加上我的 DWM 的配置也趋于稳定了,也新增了可以点击的 status bar（Hyprland 下使用waybar 可以做到这个功能）.</p>\\n<details class=\\"details custom-block\\"><summary>相关代码</summary>\\n<p>安装脚本:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 安装 hyperland</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">yay</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-S</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">hyprland-nvidia-git</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 安装 waybar</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">yay</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-S</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">waybar-hyprland-git</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 安装 hyprland share</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">yay</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-S</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">xdg-desktop-portal-hyprland-git</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 安装 rofi for wayland</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">yay</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-S</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">rofi-lbonn-wayland-git</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 安装 壁纸切换</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">git</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">clone</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">https://github.com/Horus645xx/swww</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">cd</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">swww</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">cargo</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">build</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--release</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">cp</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/target/release/swww</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/usr/bin</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">cp</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/target/release/swww-daemon</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/usr/bin</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">swww</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">init</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">swww</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">img</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--transition-type</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">left</span><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #C3E88D\\">~/Pictures/bg/0494e945880511ebb6edd017c2d2eca2.png</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br></div></div><p>供参考的启动脚本:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> LIBVA_DRIVER_NAME</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">nvidia</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> XDG_SESSION_TYPE</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">wayland</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> GBM_BACKEND</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">nvidia-drm</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> __GLX_VENDOR_LIBRARY_NAME</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">nvidia</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> WLR_NO_HARDWARE_CURSORS</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F78C6C\\">1</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #676E95; font-style: italic\\"># fix cursor</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># Example IME Support: fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> GTK_IM_MODULE</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> QT_IM_MODULE</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> XMODIFIERS</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">@im=fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> SDL_IM_MODULE</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">export</span><span style=\\"color: #A6ACCD\\"> GLFW_IM_MODULE</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #C3E88D\\">ibus</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">exec</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">Hyprland</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br></div></div><p>~/.config/hypr/hyprland.conf:</p>\\n<div class=\\"language-txt line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">txt</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">########################################################################################</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">AUTOGENERATED HYPR CONFIG.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">PLEASE USE THE CONFIG PROVIDED IN THE GIT REPO /examples/hypr.conf AND EDIT IT,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">OR EDIT THIS ONE ACCORDING TO THE WIKI INSTRUCTIONS.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">########################################################################################</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Please note not all available settings / options are set here.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># For a full list, see the wiki</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># See https://wiki.hyprland.org/Configuring/Monitors/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">monitor=,preferred,auto,auto</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#monitor=eDP-1-1, 1920x1080@144, 1920x0, 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#monitor=HDMI-0, 1920x1080@60, 0x0, 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># See https://wiki.hyprland.org/Configuring/Keywords/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Execute your favorite apps at launch</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># exec-once = waybar &amp; hyprpaper &amp; firefox</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">exec-once = fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">exec-once = flameshot</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">exec-once = /opt/clash/cfw</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">exec-once = waybar</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#exec-once = dunst</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Source a file (multi-file configs)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># source = ~/.config/hypr/myColors.conf</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#misc {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#    no_vfr = 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># For all categories, see https://wiki.hyprland.org/Configuring/Variables/</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">input {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    kb_layout = us</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    kb_variant =</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    kb_model =</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    kb_options =</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    kb_rules =</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    follow_mouse = 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    touchpad {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">        natural_scroll = no</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">general {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    # See https://wiki.hyprland.org/Configuring/Variables/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    gaps_in = 5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    gaps_out = 20</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    border_size = 2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    col.inactive_border = rgba(595959aa)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    layout = dwindle</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">decoration {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    # See https://wiki.hyprland.org/Configuring/Variables/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    rounding = 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    blur = yes</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    blur_size = 3</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    blur_passes = 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    blur_new_optimizations = on</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    drop_shadow = yes</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    shadow_range = 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    shadow_render_power = 3</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    col.shadow = rgba(1a1a1aee)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">animations {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    enabled = yes</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    # Some default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    bezier = myBezier, 0.05, 0.9, 0.1, 1.05</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    animation = windows, 1, 7, myBezier</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    animation = windowsOut, 1, 7, default, popin 80%</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    animation = border, 1, 10, default</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    animation = fade, 1, 7, default</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    animation = workspaces, 1, 6, default</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">dwindle {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    pseudotile = yes # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    preserve_split = yes # you probably want this</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">master {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    new_is_master = true</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">gestures {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    # See https://wiki.hyprland.org/Configuring/Variables/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    workspace_swipe = off</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Example per-device config</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># See https://wiki.hyprland.org/Configuring/Keywords/#executing for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">device:epic mouse V1 {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    sensitivity = -0.5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Example windowrule v1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># windowrule = float, ^(kitty)$</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Example windowrule v2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># windowrulev2 = float,class:^(kitty)$,title:^(kitty)$</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># See https://wiki.hyprland.org/Configuring/Window-Rules/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">#</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># 定义 class 带 float 的都初始为 float 启动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">windowrulev2 = float,class:^(float)$</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">windowrulev2 = noborder,class:^(noborder)$</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># See https://wiki.hyprland.org/Configuring/Keywords/ for more</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">$mainMod = SUPER</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">$term = wezterm</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">$term_float = wezterm start --class float</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">$rofi = rofi -show window -show-icons</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># start term</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod,       Return,       exec, $term</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># start float term</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod,   minus,        exec, $term_float</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># start launch</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = ALT,        SPACE,        exec, $rofi</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># kill window</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, Q, killactive,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, P, pseudo, # dwindle</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, J, togglesplit, # dwindle</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># super + f 全屏窗口</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=$mainMod,F,fullscreen,0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># super + space 将窗口切换为浮动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=$mainMod,SPACE,togglefloating,active</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># 切换聚焦窗口</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPER,left,movefocus,l</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPER,right,movefocus,r</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPER,up,movefocus,u</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPER,down,movefocus,d</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># 将当前窗口移动 可以一直移动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPERSHIFT,left,movewindow,l</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPERSHIFT,right,movewindow,r</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPERSHIFT,up,movewindow,u</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPERSHIFT,down,movewindow,d</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># 切换工作空间</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=SUPER,TAB,workspace,previous</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 1, workspace, 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 2, workspace, 2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 3, workspace, 3</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 4, workspace, 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 5, workspace, 5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 6, workspace, 6</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 7, workspace, 7</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 8, workspace, 8</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 9, workspace, 9</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, 0, workspace, 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># alt+super + 方向键 控制窗口大小</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=$mainMod,comma,resizeactive,-20 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=$mainMod,period,resizeactive,20 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=ALT_SUPER,up,resizeactive,0 -20</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind=ALT_SUPER,down,resizeactive,0 20</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Move active window to a workspace with mainMod + SHIFT + [0-9]</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 1, movetoworkspace, 1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 2, movetoworkspace, 2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 3, movetoworkspace, 3</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 4, movetoworkspace, 4</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 5, movetoworkspace, 5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 6, movetoworkspace, 6</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 7, movetoworkspace, 7</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 8, movetoworkspace, 8</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 9, movetoworkspace, 9</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT, 0, movetoworkspace, 10</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># shift + super + left/right 移动窗口 到下一个或上一个工作区</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT,Left,movetoworkspace,e-1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod SHIFT,right,movetoworkspace,e+1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Scroll through existing workspaces with mainMod + scroll</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, mouse_down, workspace, e+1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bind = $mainMod, mouse_up, workspace, e-1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"></span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\"># Move/resize windows with mainMod + LMB/RMB and dragging</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bindm = $mainMod, mouse:272, movewindow</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">bindm = $mainMod, mouse:273, resizewindow</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br><span class=\\"line-number\\">14</span><br><span class=\\"line-number\\">15</span><br><span class=\\"line-number\\">16</span><br><span class=\\"line-number\\">17</span><br><span class=\\"line-number\\">18</span><br><span class=\\"line-number\\">19</span><br><span class=\\"line-number\\">20</span><br><span class=\\"line-number\\">21</span><br><span class=\\"line-number\\">22</span><br><span class=\\"line-number\\">23</span><br><span class=\\"line-number\\">24</span><br><span class=\\"line-number\\">25</span><br><span class=\\"line-number\\">26</span><br><span class=\\"line-number\\">27</span><br><span class=\\"line-number\\">28</span><br><span class=\\"line-number\\">29</span><br><span class=\\"line-number\\">30</span><br><span class=\\"line-number\\">31</span><br><span class=\\"line-number\\">32</span><br><span class=\\"line-number\\">33</span><br><span class=\\"line-number\\">34</span><br><span class=\\"line-number\\">35</span><br><span class=\\"line-number\\">36</span><br><span class=\\"line-number\\">37</span><br><span class=\\"line-number\\">38</span><br><span class=\\"line-number\\">39</span><br><span class=\\"line-number\\">40</span><br><span class=\\"line-number\\">41</span><br><span class=\\"line-number\\">42</span><br><span class=\\"line-number\\">43</span><br><span class=\\"line-number\\">44</span><br><span class=\\"line-number\\">45</span><br><span class=\\"line-number\\">46</span><br><span class=\\"line-number\\">47</span><br><span class=\\"line-number\\">48</span><br><span class=\\"line-number\\">49</span><br><span class=\\"line-number\\">50</span><br><span class=\\"line-number\\">51</span><br><span class=\\"line-number\\">52</span><br><span class=\\"line-number\\">53</span><br><span class=\\"line-number\\">54</span><br><span class=\\"line-number\\">55</span><br><span class=\\"line-number\\">56</span><br><span class=\\"line-number\\">57</span><br><span class=\\"line-number\\">58</span><br><span class=\\"line-number\\">59</span><br><span class=\\"line-number\\">60</span><br><span class=\\"line-number\\">61</span><br><span class=\\"line-number\\">62</span><br><span class=\\"line-number\\">63</span><br><span class=\\"line-number\\">64</span><br><span class=\\"line-number\\">65</span><br><span class=\\"line-number\\">66</span><br><span class=\\"line-number\\">67</span><br><span class=\\"line-number\\">68</span><br><span class=\\"line-number\\">69</span><br><span class=\\"line-number\\">70</span><br><span class=\\"line-number\\">71</span><br><span class=\\"line-number\\">72</span><br><span class=\\"line-number\\">73</span><br><span class=\\"line-number\\">74</span><br><span class=\\"line-number\\">75</span><br><span class=\\"line-number\\">76</span><br><span class=\\"line-number\\">77</span><br><span class=\\"line-number\\">78</span><br><span class=\\"line-number\\">79</span><br><span class=\\"line-number\\">80</span><br><span class=\\"line-number\\">81</span><br><span class=\\"line-number\\">82</span><br><span class=\\"line-number\\">83</span><br><span class=\\"line-number\\">84</span><br><span class=\\"line-number\\">85</span><br><span class=\\"line-number\\">86</span><br><span class=\\"line-number\\">87</span><br><span class=\\"line-number\\">88</span><br><span class=\\"line-number\\">89</span><br><span class=\\"line-number\\">90</span><br><span class=\\"line-number\\">91</span><br><span class=\\"line-number\\">92</span><br><span class=\\"line-number\\">93</span><br><span class=\\"line-number\\">94</span><br><span class=\\"line-number\\">95</span><br><span class=\\"line-number\\">96</span><br><span class=\\"line-number\\">97</span><br><span class=\\"line-number\\">98</span><br><span class=\\"line-number\\">99</span><br><span class=\\"line-number\\">100</span><br><span class=\\"line-number\\">101</span><br><span class=\\"line-number\\">102</span><br><span class=\\"line-number\\">103</span><br><span class=\\"line-number\\">104</span><br><span class=\\"line-number\\">105</span><br><span class=\\"line-number\\">106</span><br><span class=\\"line-number\\">107</span><br><span class=\\"line-number\\">108</span><br><span class=\\"line-number\\">109</span><br><span class=\\"line-number\\">110</span><br><span class=\\"line-number\\">111</span><br><span class=\\"line-number\\">112</span><br><span class=\\"line-number\\">113</span><br><span class=\\"line-number\\">114</span><br><span class=\\"line-number\\">115</span><br><span class=\\"line-number\\">116</span><br><span class=\\"line-number\\">117</span><br><span class=\\"line-number\\">118</span><br><span class=\\"line-number\\">119</span><br><span class=\\"line-number\\">120</span><br><span class=\\"line-number\\">121</span><br><span class=\\"line-number\\">122</span><br><span class=\\"line-number\\">123</span><br><span class=\\"line-number\\">124</span><br><span class=\\"line-number\\">125</span><br><span class=\\"line-number\\">126</span><br><span class=\\"line-number\\">127</span><br><span class=\\"line-number\\">128</span><br><span class=\\"line-number\\">129</span><br><span class=\\"line-number\\">130</span><br><span class=\\"line-number\\">131</span><br><span class=\\"line-number\\">132</span><br><span class=\\"line-number\\">133</span><br><span class=\\"line-number\\">134</span><br><span class=\\"line-number\\">135</span><br><span class=\\"line-number\\">136</span><br><span class=\\"line-number\\">137</span><br><span class=\\"line-number\\">138</span><br><span class=\\"line-number\\">139</span><br><span class=\\"line-number\\">140</span><br><span class=\\"line-number\\">141</span><br><span class=\\"line-number\\">142</span><br><span class=\\"line-number\\">143</span><br><span class=\\"line-number\\">144</span><br><span class=\\"line-number\\">145</span><br><span class=\\"line-number\\">146</span><br><span class=\\"line-number\\">147</span><br><span class=\\"line-number\\">148</span><br><span class=\\"line-number\\">149</span><br><span class=\\"line-number\\">150</span><br><span class=\\"line-number\\">151</span><br><span class=\\"line-number\\">152</span><br><span class=\\"line-number\\">153</span><br><span class=\\"line-number\\">154</span><br><span class=\\"line-number\\">155</span><br><span class=\\"line-number\\">156</span><br><span class=\\"line-number\\">157</span><br><span class=\\"line-number\\">158</span><br><span class=\\"line-number\\">159</span><br><span class=\\"line-number\\">160</span><br><span class=\\"line-number\\">161</span><br><span class=\\"line-number\\">162</span><br><span class=\\"line-number\\">163</span><br><span class=\\"line-number\\">164</span><br><span class=\\"line-number\\">165</span><br><span class=\\"line-number\\">166</span><br><span class=\\"line-number\\">167</span><br><span class=\\"line-number\\">168</span><br><span class=\\"line-number\\">169</span><br><span class=\\"line-number\\">170</span><br><span class=\\"line-number\\">171</span><br><span class=\\"line-number\\">172</span><br><span class=\\"line-number\\">173</span><br><span class=\\"line-number\\">174</span><br><span class=\\"line-number\\">175</span><br><span class=\\"line-number\\">176</span><br><span class=\\"line-number\\">177</span><br><span class=\\"line-number\\">178</span><br><span class=\\"line-number\\">179</span><br><span class=\\"line-number\\">180</span><br><span class=\\"line-number\\">181</span><br><span class=\\"line-number\\">182</span><br><span class=\\"line-number\\">183</span><br><span class=\\"line-number\\">184</span><br><span class=\\"line-number\\">185</span><br><span class=\\"line-number\\">186</span><br><span class=\\"line-number\\">187</span><br><span class=\\"line-number\\">188</span><br><span class=\\"line-number\\">189</span><br><span class=\\"line-number\\">190</span><br><span class=\\"line-number\\">191</span><br><span class=\\"line-number\\">192</span><br><span class=\\"line-number\\">193</span><br><span class=\\"line-number\\">194</span><br><span class=\\"line-number\\">195</span><br><span class=\\"line-number\\">196</span><br><span class=\\"line-number\\">197</span><br><span class=\\"line-number\\">198</span><br><span class=\\"line-number\\">199</span><br><span class=\\"line-number\\">200</span><br><span class=\\"line-number\\">201</span><br><span class=\\"line-number\\">202</span><br></div></div></details>\\n","date":1674702288000,"update":1674702288000},{"title":"RISC-V 简介","url":"/content/posts/2022-12-10-risc-v.html","frontmatter":{"title":"RISC-V 简介","date":"2022-12-10T12:41:41.000Z","tags":["risc-v","os","asm"],"layout":"post","summary":"RISC-V 是一种指令集(汇编语言),是一种 low-level 的编程语言,高级语言通过编译器编译到汇编语言"},"src":"\\n\\n## Resource\\n\\n1. [RISC-V Green Card](https://inst.eecs.berkeley.edu/~cs61c/sp21/resources-pdfs/riscvcard.pdf)\\n2. [RISC-V Call convertion](https://inst.eecs.berkeley.edu/~cs61c/sp21/resources-pdfs/RISCV_Calling_Convention.pdf)\\n3. [P&H(RISC-V)](https://github.com/fzdwx/fzdwx.github.io/releases/download/v1.0/p.h.pdf)\\n\\n在汇编语言中没有变量这个概念,汇编语言通常操作的是**寄存器**.算术指令的操作数必须取自寄存器,内建于硬件的特殊位置(CPU 内？).\\n\\n:::tip\\n\\n**寄存器**（Register）是[中央处理器](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8 \\"中央处理器\\")内用来暂存指令、[数据](https://zh.wikipedia.org/wiki/%E6%95%B8%E6%93%9A \\"数据\\")和[地址](https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80 \\"内存地址\\")的[电脑存储器](https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E8%A8%98%E6%86%B6%E9%AB%94 \\"电脑存储器\\").寄存器的存贮容量有限,读写速度非常快.在[计算机体系结构](https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E6%9E%B6%E6%A7%8B \\"计算机体系结构\\")里,寄存器存储在已知时间点所作计算的中间结果,通过快速地访问数据来加速[计算机程序](https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%A8%8B%E5%BC%8F \\"计算机程序\\")的执行.\\n\\n:::\\n\\n## RISC-V Card\\n\\n### RISC-V 操作数\\n\\n![123](/images/20221210211515.png)\\n\\n- 如果寄存器的大小是 64 位 则称为**双字**,32 位 则是**单字**.\\n- x<sub>0</sub> 被硬连接到 0\\n  - `add x3, x4, x0` => `x3 = x4` (x0 is hard-wired to value 0)\\n\\n## 汇编指令\\n\\n![](/images/20221210211545.png)\\n\\n![](/images/3.png)\\n\\n## 存储操作数\\n\\n:::tip\\n\\n将数据从内存复制到寄存器的数据传输指令称为 _载入指令(`load`)_.在 RISC-V 中指令是 **ld**,表示取双字.\\n\\n:::\\n\\n### 一个从数组中取值的 C 程序,写出汇编代码\\n\\n```c\\ng = h + A[8];\\n```\\n\\nA 是一个 100 个双字组成的数组,g, h 分别存储在 x20, x21 中,数组起始地址或*基址*位于 x22 中.\\n\\n```asm\\nld x9, 8(x22) // x9 = A[8]\\nadd x21, x20, x9; // x21 = x20 + x9\\n```\\n\\n存放基址的寄存器(x22)被称为*基址寄存器*, 数据传输指令中的 8 称为*偏移量*.\\n\\n![实际的RISC-V内存地址和内存中双字的内容. 双字地址是 8 的倍数,同理单字地址是 4 的倍数](/images/20221212130603.png)\\n\\n:::tip 大端与小端编址\\n计算机分为两种,一种使用最左边或“大端”字节的地址作为双字地址,另一种使用最右端或“小端”字节的地址作为双字地址.\\n\\nRISC-V 使用小端 .由于仅在以双字形式和 8 个单独字节访问相同数据时,字节顺序才有影响,因此大多情况不需要关系“大小端”.\\n:::\\n\\n所以为了上面的代码获得正确的字节地址加到 x22 这个寄存器的偏移量为 64（8x8）.\\n\\n与载入指令相反的指令通常被成为*存储指令(store)*,从寄存器复制数据到内存.指令是`sd`,表示存储双字.\\n\\n:::tip\\n在一些体系结构中,字的起始地址必须是 4 的倍数,双字的起始地址必须是 8 的倍数.该要求成为*对齐限制*\\n:::\\n\\nRISC-V 和 Intel x86 没有对齐限制,但 MIPS 有这个限制.\\n\\n![](/images/20221212152022.png)\\n\\n### 使用 load 和 store 编译生成指令\\n\\n```c\\nA[12] = h + A[8];\\n```\\n\\nh 存放在 x21 中,A 的基址存放在 x22 中.\\n\\n```asm\\nld x9, 64(x22)  // x9 = A[8]\\nadd x9, x21, x9 // x9 = h + A[8]\\nsd x9, 96(x22)  // A[12] = x9\\n```\\n\\n### 将字符串复制程序编译为汇编\\n\\n```c\\nvoid strcpy(char x[],char y[]){\\n\\tsize_t i;\\n\\ti = 0;\\n\\twhile((x[i] = y[i]) != \'\\\\0\'){\\n\\t\\ti += 1;\\n\\t}\\n}\\n```\\n\\nx, y 的基址存放在 x10 和 x11 中, i 存放在 x19 中.\\n\\n```asm\\nstrcpy:\\n\\taddi sp, sp, -8  // 调整栈指针,以存放一个item(x19)\\n\\tsd x19, 0(sp)    // x19 入栈\\n\\tadd x19, x0, x0  // x19 = 0 + 0\\nL1: add x5, x19, x11 // x5 = x19 + x11 => address of y[i] in x5\\n\\tlbu x6, 0(x5)    // temp: x6 = y[i]\\n\\tadd x7, x19, x10 // x5 = x19 + x11 => address of x[i] in x7\\n\\tsd  x6, 0(x7)    // x[i] = y[i]\\n\\tbeq x6, x0, L2   // if x6 ==0 then go to L2\\n\\taddi x19, x19, 1 // i = i  + 1\\n\\tjal x0, L1       // go to L1\\nL2: ld x19, 0(sp)    // 恢复 x19 以及栈指针\\n\\taddi sp, sp, 8\\n\\tjalr x0, 0(x1)\\n```\\n\\n### 一段循环代码编译为汇编\\n\\n```c\\nint A[20];\\nint sum = 0;\\nfor (int  3i = 0; i < 20; i++){\\n\\tsum += A[i];\\n}\\n```\\n\\nRISC-V 汇编（32 bit)\\n\\n```asm\\n\\tadd x9, x8, x0     # x9 = &A[0]\\n\\tadd x10, x0, x0    # sum\\n\\tadd x11, x0, x0    # i\\n\\taddi x13,x0, 20    # 20\\nLoop:\\n\\tbge x11, x13, Done # if x11 > x13 go to Down(end loop)\\n\\tlw x12, 0(x9)      # x12 = A[i]\\n\\tadd x10, x10, x12  # sum\\n\\taddi x9, x9, 4     # x9 = &A[i+1]\\n\\taddi x11, x11, 1   # i++\\n\\tj loop\\nDone:\\n```\\n\\n## 逻辑操作\\n\\n- `and` `andi`\\n  - `and x5, x6, x9` => x5 = x6 & x9\\n  - `addi x5, x6, 3` => x5 = x6 & 3\\n- `sll` `ssli` , 左移(扩大)\\n  - `slli x11, x23, 2` => x11 = x23 << 2\\n  - 0000 0010 => 2\\n  - 0000 1000 => 8\\n- `srl` `srli` , 右移（缩小)\\n  - `srli x23, x11, 2` = > x23 = x11 >> 2\\n  - 0000 1000 => 8\\n  - 0000 0010 => 2\\n- `sra` `srai`, 算数右移\\n  - 1111 1111 1111 1111 1111 1111 1110 0111 = -25\\n  - `srai x10, x10, 4`\\n  - 1111 1111 1111 1111 1111 1111 1111 1110 = -2\\n\\n## Helpful RISC-V Assmebler Features\\n\\n1. a0 - a7 是参数寄存器(x10 - x17,用于函数调用.\\n2. zero 代表 x0\\n3. `mv rd, rs = addi rd, rs, 0`\\n4. `li rd, 13 = addi rd, x0, 13`\\n5. `nop = addi x0, x0`\\n6. `la a1 Lable` 将 Label 的 地址 加载到 a1\\n7. a0 - a7(x10 - x17): 8 个寄存器用于参数传递以及两个返回值(a0 - a1)\\n8. ra（x1）: 一个返回 address 的寄存器,用于返回原点（调用的位置）\\n9. s0 - s1(x8 - x9) and s2 - s11 (s18 - x27): 保存的寄存器\\n\\n## RISC-V 函数调用的转换\\n\\n1. 寄存器比内存快,所以使用它们\\n2. `jal rd, Label` 跳转和链接\\n   1. `jal x1, 100`\\n3. `jalr rd, rs, imm` 跳转和链接寄存器\\n   1. `jalr x1, 100(x5)`\\n4. `jal Lable` => `jal ra, Lable` 调用函数\\n5. `jalr s1` 当 s1 是方法指针时,这就是一个函数调用\\n\\n### 一段函数调用转换为汇编\\n\\n```c\\n...\\nsum(a,b);\\n...\\n\\nint sum(int x, int y){\\n\\tretrun x + y;\\n}\\n```\\n\\n```asm\\n1000 mv a0, s0              # x = a\\n1004 mv a1, s1              # y= b\\n1008 addi ra, zero, 1016    # 1016 is sum function\\n1012 j                      # jump to sum\\n1016 ...\\n...\\n2000 sum: add a0, a0, a1\\n2004 jr ra\\n```\\n\\n1008 ~ 1012 可以使用 `jal sum` 来替代、\\n\\n### 调用函数的基本步骤\\n\\n1. 把需要的参数放到方法可以访问的地方（寄存器）\\n2. 转移控制权给函数,使用(`jal`)\\n   1. 保持地址,并跳转到函数的地址\\n3. 获取函数执行所需的(local)存储资源\\n4. 执行预期的函数\\n5. 将返回值放在调用代码可以访问的地方,并恢复我们使用到的寄存器,释放本地存储\\n6. 将控制器返回给主处理器（`ret`), 使用存储在寄存器中的地址,返回到调用它的地方\\n\\n### 方法调用示例\\n\\n```c\\nint leaf(int g, int h, int i, int j){\\n\\tint f;\\n\\tf = (g + h) - (i + j);\\n\\tretrun f;\\n}\\n```\\n\\n1. g,h,i,j in a0,a1,a2,a3\\n2. f in s0\\n3. temp is s1\\n\\n```asm\\nleaf:\\n\\t# prologue start\\n\\taddi sp, sp, -8   # 腾出 8byte 来存放的2个整数\\n\\tsw s1, 4(sp)      # 保存 s1, s0 到 sp 中\\n\\tsw s0, 0(sp)\\n\\t# prologue end\\n\\tadd s0, a0, a1    # f = g + h\\n\\tadd s1, a2, a3    # temp = i + j\\n\\tsub a0, s0, s1    # a0 = （g + h) - (i + j)\\n\\n\\t# epilogue\\n\\tlw s0, 0(sp)      # 恢复 s1, s0\\n\\tlw s1, 4(sp)\\n\\taddi sp, sp 8\\n\\n\\tjr ra\\n```\\n\\n## sp\\n\\n:::tip\\n\\nsp 是栈指针,从内存空间 的最顶部开始向下增长,在 RISC-V 中使用 x2 这个寄存器.\\n\\n1. push 是减少 sp 的指针地址\\n2. pop 是增加\\n\\n:::\\n\\n每个函数都有一组存放在栈上的数据,它们是**栈帧**（stack frame ）,栈帧通常包含：\\n\\n1. 返回地址\\n2. 参数\\n3. 使用的局部变量的空间\\n\\n## 嵌套函数调用\\n\\n```c\\nint sumSquare(int x,int y){\\n\\treturn mult(x,x) + y;\\n}\\n```\\n\\n在 ra 中有一个 sumSquare 想要跳回的值,但是这个值会被调用 mult 覆盖.\\n\\n1. caller: 调用函数的人\\n2. calle： 被调用的函数\\n3. 当被调用者从执行中返回时,调用者需要知道哪些寄存器可能发生了变化,哪些寄存器被保证是不变的.\\n4. 寄存器规定： 即哪些寄存器在程序调用(`jal`) 后将被取消缓存 ,哪些可以被改变.\\n   1. 即有一些寄存器是易失的(temp),一些是要保存的（**调用者需要恢复它们原来的值**）.\\n   2. 这优化了每次进入栈帧的寄存器的数量\\n5. 分类:\\n   1. 跨函数调用保留:\\n      1. sp, gp, tp\\n      2. s0 - s11 (s0 is also fp)\\n   2. 不保留:\\n      1. 参数寄存器以及返回寄存器： a0 - a7, ra\\n      2. temp 寄存器: t0 - t6\\n\\n上面代码的 RISC-V\\n\\nx in a1, y in a1\\n\\n```asm\\nsumSquare:\\n\\taddi sp, sp -8\\n\\tsw ra, 4(sp)             // save retrun address to sp\\n\\tsw a1, 0(sp)             // save s1 to y\\n\\tmv a1, a0                // y = x => mult(x,x)\\n\\tjal mult                 // call mult\\n\\tlw a1, 0(sp)             // get y from sp\\n\\tadd a0, a0, a1           // mult() + y\\n\\tlw ra, 4(sp)             // get retrun address from sp\\n\\taddi sp, sp, 8\\n\\tjr ra\\n```\\n\\n## RISC-V 寄存器名称\\n\\n![](/images/20221213192858.png)\\n\\n## RISC-V 方法调用套路\\n\\n```asm\\nmatmul:\\n    # 压栈,腾出空间保存我们要使用的几个 s 寄存器\\n    addi sp sp -36\\n    sw ra 0(sp)\\n    sw s0 4(sp)\\n    sw s1 8(sp)\\n    sw s2 12\\n    sw s3 16(sp)\\n    sw s4 20(sp)\\n    sw s5 24(sp)\\n    sw s6 28(sp)\\n    sw s7 32(sp)\\nbody:\\n    # xxx xxx\\n\\nend:\\n    # 恢复寄存器的值\\n    lw ra 0(sp)\\n    lw s0 4(sp)\\n    lw s1 8(sp)\\n    lw s2 12(sp)\\n    lw s3 16(sp)\\n    lw s4 20(sp)\\n    lw s5 24(sp)\\n    lw s6 28(sp)\\n    lw s7 32(sp)\\n    addi sp sp 36\\n    ret\\n```\\n\\n# RISC-V 指令二进制的表示\\n\\n## R 格式布局\\n\\n用于算术和逻辑运算的指令\\n\\n![](/images/20221224214056.png)\\n\\n1. opcode,funct3, funct7 : 将告诉我们是否要执行加,减,左移,异或等操作.\\n   1. R-format 的 opcode 固定为 0110011\\n2. 一个 add 操作： `add x18 x19 x10` => `x18 = x19 + x10`\\n3. `0000000 01010 10011 000 10010 0110011`\\n4. `rs2 = x19`, `rs1 = x10`, `rd = x18`\\n\\n## I 格式布局\\n\\n处理立即数,比如`addi rd rs1, imm` => `addi a0 a0 1`\\n\\n![](/images/20221224220039.png)\\n\\n1. imm 的范围是 -2084 ～ 2047\\n\\n![addi x15 x1 -50](/images/20221224220349.png)\\n\\n## RISC-V Loads\\n\\nload 指令也是 I 类型的.\\n\\n![lw x14 8(x2)](/images/20221224221104.png)\\n\\n## S 格式布局\\n\\n![](/images/20221224221434.png)\\n","desc":"RISC-V 是一种指令集(汇编语言),是一种 low-level 的编程语言,高级语言通过编译器编译到汇编语言","date":1670676101000,"update":1670676101000},{"title":"隐写术","url":"/content/posts/2022-12-07-steganography.html","frontmatter":{"title":"隐写术","date":"2022-12-07T13:37:59.000Z","tags":["fun"],"layout":"post","summary":"最近在跟 cs61c,第一个 project 中介绍了隐写术,大意可以理解为一个文件的内容是`123`,在经过特定的编码转换后成了`456`.","cover":{"image":"/images/14.png"}},"src":"\\n\\n在这个项目中是用的图片来作为案例的,首先通过介绍了一种图片的编码形式, ppm:\\n- 第一行表示是什么格式的 ppm 文件\\n- 第二行表示宽和高\\n- 第三行表示颜色范围\\n- 后面的就是各个像素的RGB值\\n\\n```txt\\nP3\\n2 2\\n255\\n 29  83  36      45  64  57\\n188 229 201     123 162 184\\n\\n```\\n\\n他是这么介绍的:\\n\\n> 我们将探索一种隐藏消息的方法.虽然大多数图像的每个 RGB 通道都有 8 位数据,但人眼无法轻易看出后 4 位的差异.因此,我们可以将信息隐藏在图像的底部位中.我们通过修改每个像素 B 值的最低有效位, 如果最后一位是 0,则把整个像素转换为黑色(255,255,255),如果最后一位是 1,则转换为白色(0,0,0).\\n\\n关键就是： **每个 RGB 通道都有 8 位数据,但人眼无法轻易看出后 4 位的差异**,所以这就给了我们操作的空间.\\n","desc":"最近在跟 cs61c,第一个 project 中介绍了隐写术,大意可以理解为一个文件的内容是`123`,在经过特定的编码转换后成了`456`.","date":1670420279000,"update":1670420279000},{"title":"关于 git 游离分支","url":"/content/posts/2022-10-23-about-git-detached-head.html","frontmatter":{"title":"关于 git 游离分支","date":"2022-10-22T16:09:44.000Z","tags":["git"],"summary":"如何在切换了分支之后恢复游离分支提交的代码.","layout":"post"},"src":"\\n\\n刚刚改[nvim](https://github.com/fzdwx/nvim)配置时,不知道怎么回事,出现了游离分支(英文名称大概是 _detached head_ ).主要症状就是\\ngit提交不了,由于我用的 lazygit ,它的提示不明显,我以为提交了.然后后面打开 idea 看到底是什么.发现提示是游离分支,这个时候我也没在意.\\n最致命的操作来了: 我直接 checkout main 分支,然后今天晚上修改的记录全没了.\\n\\n我的解决方案:\\n\\n1. 查看`git log`,只能显示当前分支的修改 commit 记录. **无效**\\n2. 利用 idea 的 local history 功能,只能找到文件,文件里面的内容是空白的. **无效**\\n3. 搜索 detached head 的解决方案,只能搜到没切换分支前的解决方案,不适用与我的现象. **无效**\\n4. 最后搜索 git 查看所有 commit ,找到了`git reflog`,它能显示可引用的历史版本记录,最后找到我要的那个 commit\\n   之后直接`git rest --hard xxx`完美解决.\\n\\n\\n说实话,有点慌也有点烦,如果找不回来我可能会弃坑 nvim 了.\\n","desc":"如何在切换了分支之后恢复游离分支提交的代码.","date":1666454984000,"update":1666454984000},{"title":"写一个自己的github action","url":"/content/posts/2022-10-15-about-github-action.html","frontmatter":{"title":"写一个自己的github action","layout":"post","date":"2022-10-15T11:25:10.000Z","summary":"起因是因为想要有一种可以不用编辑文件而作用到网站上的方式,然后就了解到了 github action 的形式.","tags":["project"]},"src":"\\n\\n主要原理就是通过 github action 的来监听 issue 的相关事件,然后读取 issue 中的内容创建文件提交到 git 上,最后直接部署.这样就能随时编辑并展示了.\\n\\n具体可以看 [add event to myb log](https://github.com/fzdwx/add-event-to-myblog) 这个仓库,\\n以及[使用方式](https://github.com/fzdwx/fzdwx.github.io/blob/main/.github/workflows/add-event.yml).\\n\\n接下来介绍如何开发一个 github action:\\n\\n### 1. 克隆官方提供的 template\\n\\n官方主要对 typescript 的支持比较好,提供了一系列的[工具包](https://github.com/actions/toolkit),没办法只能同 ts 来进行开发,\\n\\nhttps://github.com/actions/typescript-action\\n\\n### 2. 定义想要在运行时用户输入的参数\\n\\n通过编辑`action.yml`这个文件来定义想要在运行时定义的参数,比如说`GITHUB_TOKEN`:\\n\\n```yaml\\nname: \\"add event to my blog\\"\\ndescription: \\"add event to my blog\\"\\nauthor: \\"fzdwx\\"\\nbranding:\\n  icon: \\"archive\\"\\n  color: \\"white\\"\\ninputs: # 在这个key下面添加自定义参数\\n  token:\\n    required: true\\n    description: \\"the repo PAT or GITHUB_TOKEN\\"\\nruns:\\n  using: \\"node16\\"\\n  main: \\"dist/index.js\\"\\n```\\n\\n参数有三个属性:\\n\\n```yaml\\nrequired: 是否必须\\ndescription: 描述\\ndefault: 默认值\\n```\\n\\n### 3. 实现想要的功能\\n\\n详细可以查看我的[主要代码](https://github.com/fzdwx/add-event-to-myblog/blob/v2.1/src/main.ts).我的里面主要做了:\\n\\n1. 根据当前 issue number[获取该 issue 的内容](https://github.com/fzdwx/add-event-to-myblog/blob/v2.1/src/main.ts#L16).\\n2. 根据预定义的模板,[创建文件内容](https://github.com/fzdwx/add-event-to-myblog/blob/v2.1/src/main.ts#L18-L33).\\n3. 提交到[git](https://github.com/fzdwx/add-event-to-myblog/blob/v2.1/src/main.ts#L34-L38)上.\\n\\n### 4. 发布到 marketplace\\n\\n需要勾选 **Publish this Action to the GitHub Marketplace**,可能需要 2fa 认证,找一个 github 支持(我用的是 authy,防止后面忘记了)就 ok 了.\\n\\n![Figure 1](/images/8.png)\\n\\n成功 release 后就能在别的项目中使用了.\\n","desc":"起因是因为想要有一种可以不用编辑文件而作用到网站上的方式,然后就了解到了 github action 的形式.","date":1665833110000,"update":1665833110000},{"title":"在shell脚本中执行cd后改变main shell的路径","url":"/content/posts/2022-10-11-about-source.html","frontmatter":{"title":"在shell脚本中执行cd后改变main shell的路径","date":"2022-10-11T08:55:35.000Z","tags":["linux","idea"],"layout":"post"},"src":"\\n\\n## 起因\\n\\n昨天晚上想用fzf与cd联动,就是fzf的结果传递给cd来执行于是有了这么一条命令:\\n\\n```shell\\ncd $(fd --type d | fzf)\\n```\\n\\n这个命令也确实能完成任务,但是问题有两个:\\n\\n1. 如果直接退出的话会回到家目录,因为`$(..)`的执行结果为空\\n2. 每次都要输入这么多会很麻烦\\n\\n## 用alias\\n\\n然后尝试用alias来试试,所以就往`.zshrc`里面添加:\\n\\n```shell\\nalias cdf=\\"cd $(fd --type d | fzf)\\"\\n```\\n\\n结果是直接不能运行,因为它直接识别了`$(..)`这一段,然后直接运行了,但是后面就不会运行.\\n\\n## 用shell脚本\\n\\n然后就写了这个文件:\\n\\n```shell\\n#!/bin/sh\\npath=$(fd --type d --strip-cwd-prefix --hidden --follow --exclude .git --exclude node_modules | fzf)\\n\\nif [ -z \\"$path\\" ]; then\\n    exit\\nfi\\n\\ncd \\"$path\\" || exit\\n```\\n\\n结果也是不行,后面我在最下面加了一行`echo \\"$PWD\\"`,我看到是执行了的,但是程序退出了就失效了.\\n\\n## 解决\\n\\n最后我搜索到可以使用`source xxx`或者`. xxx`来解决,最后是alias+shell脚本来完成这个操作的:\\n\\n```shell\\nalias cdf=\\"source /path/to/cdf\\"\\n```\\n\\n同时它也解决我上面提到的两个问题.\\n\\n## source为什么能解决？\\n\\n之所以直接用shell脚本直接运行会不行,是因为它不是在当前shell环境中运行的,而是一个子shell,所以结果就不能改变当前的文件目录了.\\n\\n而`source`或者`.`就代表着在当前的shell环境中执行,所以就能成功.\\n\\n## 更新\\n\\n### 2022/11/18\\n\\n今天发现一种更容易解决的办法,就是在写一个 shell 方法:\\n\\n```shell\\nfunction cd() {\\n    cd \\"$(fzf)\\"\\n}\\n```\\n\\n把它加入到`.zshrc`(我用的是 zsh)中,然后在命令行中输入 `cd` 就好了.\\n","desc":"<h2 id=\\"起因\\" tabindex=\\"-1\\">起因 <a class=\\"header-anchor\\" href=\\"#起因\\" aria-label=\\"Permalink to &quot;起因&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>昨天晚上想用fzf与cd联动,就是fzf的结果传递给cd来执行于是有了这么一条命令:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">cd</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">$(</span><span style=\\"color: #FFCB6B\\">fd</span><span style=\\"color: #C3E88D\\"> --type d </span><span style=\\"color: #89DDFF\\">|</span><span style=\\"color: #C3E88D\\"> </span><span style=\\"color: #FFCB6B\\">fzf</span><span style=\\"color: #89DDFF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>这个命令也确实能完成任务,但是问题有两个:</p>\\n<ol>\\n<li>如果直接退出的话会回到家目录,因为<code>$(..)</code>的执行结果为空</li>\\n<li>每次都要输入这么多会很麻烦</li>\\n</ol>\\n<h2 id=\\"用alias\\" tabindex=\\"-1\\">用alias <a class=\\"header-anchor\\" href=\\"#用alias\\" aria-label=\\"Permalink to &quot;用alias&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>然后尝试用alias来试试,所以就往<code>.zshrc</code>里面添加:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">alias</span><span style=\\"color: #A6ACCD\\"> cdf</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">cd </span><span style=\\"color: #89DDFF\\">$(</span><span style=\\"color: #FFCB6B\\">fd</span><span style=\\"color: #C3E88D\\"> --type d </span><span style=\\"color: #89DDFF\\">|</span><span style=\\"color: #C3E88D\\"> </span><span style=\\"color: #FFCB6B\\">fzf</span><span style=\\"color: #89DDFF\\">)&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>结果是直接不能运行,因为它直接识别了<code>$(..)</code>这一段,然后直接运行了,但是后面就不会运行.</p>\\n<h2 id=\\"用shell脚本\\" tabindex=\\"-1\\">用shell脚本 <a class=\\"header-anchor\\" href=\\"#用shell脚本\\" aria-label=\\"Permalink to &quot;用shell脚本&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>然后就写了这个文件:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">#!/bin/sh</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">path</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">$(</span><span style=\\"color: #FFCB6B\\">fd</span><span style=\\"color: #C3E88D\\"> --type d --strip-cwd-prefix --hidden --follow --exclude .git --exclude node_modules </span><span style=\\"color: #89DDFF\\">|</span><span style=\\"color: #C3E88D\\"> </span><span style=\\"color: #FFCB6B\\">fzf</span><span style=\\"color: #89DDFF\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">if</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">-z</span><span style=\\"color: #89DDFF\\"> &quot;</span><span style=\\"color: #A6ACCD\\">$path</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">];</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">then</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #82AAFF\\">exit</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">fi</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">cd</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">$path</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">||</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">exit</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br></div></div><p>结果也是不行,后面我在最下面加了一行<code>echo &quot;$PWD&quot;</code>,我看到是执行了的,但是程序退出了就失效了.</p>\\n<h2 id=\\"解决\\" tabindex=\\"-1\\">解决 <a class=\\"header-anchor\\" href=\\"#解决\\" aria-label=\\"Permalink to &quot;解决&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>最后我搜索到可以使用<code>source xxx</code>或者<code>. xxx</code>来解决,最后是alias+shell脚本来完成这个操作的:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">alias</span><span style=\\"color: #A6ACCD\\"> cdf</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">source /path/to/cdf</span><span style=\\"color: #89DDFF\\">&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>同时它也解决我上面提到的两个问题.</p>\\n<h2 id=\\"source为什么能解决\\" tabindex=\\"-1\\">source为什么能解决？ <a class=\\"header-anchor\\" href=\\"#source为什么能解决\\" aria-label=\\"Permalink to &quot;source为什么能解决？&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>之所以直接用shell脚本直接运行会不行,是因为它不是在当前shell环境中运行的,而是一个子shell,所以结果就不能改变当前的文件目录了.</p>\\n<p>而<code>source</code>或者<code>.</code>就代表着在当前的shell环境中执行,所以就能成功.</p>\\n<h2 id=\\"更新\\" tabindex=\\"-1\\">更新 <a class=\\"header-anchor\\" href=\\"#更新\\" aria-label=\\"Permalink to &quot;更新&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"_2022-11-18\\" tabindex=\\"-1\\">2022/11/18 <a class=\\"header-anchor\\" href=\\"#_2022-11-18\\" aria-label=\\"Permalink to &quot;2022/11/18&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>今天发现一种更容易解决的办法,就是在写一个 shell 方法:</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">cd()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #82AAFF\\">cd</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;$(</span><span style=\\"color: #FFCB6B\\">fzf</span><span style=\\"color: #89DDFF\\">)&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><p>把它加入到<code>.zshrc</code>(我用的是 zsh)中,然后在命令行中输入 <code>cd</code> 就好了.</p>\\n","date":1665478535000,"update":1665478535000},{"title":"Code:alias","url":"/content/posts/2022-10-10-code-alias.html","frontmatter":{"title":"Code:alias","date":"2022-10-10T14:43:27.000Z","tags":["idea"],"layout":"post"},"src":"\\n\\n## idea\\n\\n目前有一个想法,是在命令行下管理脚本的工具.\\n\\n例如说我有一些常用的脚本:\\n\\n```sh\\ncd $(find . -name \\"*\\" -type d | fzf)\\n```\\n\\n然后通过命令行添加\\n\\n```sh\\ncli load \\"cd $(find . -name \\"*\\" -type d | fzf)\\" -alias cdf\\n```\\n\\n然后使用cdf进行运行\\n\\n```sh\\ncli cdf\\n```\\n\\n## 后续\\n\\n> 2022-10-18 22:47\\n\\n刚刚找到了一个跟我这个想法很契合的项目: https://github.com/denisidoro/navi.\\n\\n今天一晚上都在调研技术的可行性,但是都达不到我想要的效果.还是这个例子,`cd $(find . -name \\"*\\" -type d | fzf)`,\\n主要有两种思路:\\n\\n1. 在运行程序的使用利用shell的tab键盘补全,直接替换成这段命令,然后运行.比如说程序叫`qwe`,在shell里面输入`qwe cdf<TAB>`\\n   ,然后就直接替换为上面的命令.我在go里面找到`cobra`这个包,它能动态补全命令,有点效果,但还不够,不能做到全部替换,遂搁置.\\n2. 直接在程序里面运行这段命令,我试了之后还是不行,`cd`执行后没有生效,应该还是跟`fork`有关.\\n\\n然后就到github里面找别人的实现,没想到找到了一个,但是试过之后还是不支持,但确实做的还不错.\\n\\n想要做成我想要的效果就是实现:\\n\\n1. 在shell中补全能直接替换所有,而不是一段.\\n2. 在程序中不用`fork`运行.\\n\\n还需要在看看.\\n\\n\\n","desc":"<h2 id=\\"idea\\" tabindex=\\"-1\\">idea <a class=\\"header-anchor\\" href=\\"#idea\\" aria-label=\\"Permalink to &quot;idea&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>目前有一个想法,是在命令行下管理脚本的工具.</p>\\n<p>例如说我有一些常用的脚本:</p>\\n<div class=\\"language-sh line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">cd</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">$(</span><span style=\\"color: #FFCB6B\\">find</span><span style=\\"color: #C3E88D\\"> . -name </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">*</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\"> -type d </span><span style=\\"color: #89DDFF\\">|</span><span style=\\"color: #C3E88D\\"> </span><span style=\\"color: #FFCB6B\\">fzf</span><span style=\\"color: #89DDFF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>然后通过命令行添加</p>\\n<div class=\\"language-sh line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">cli</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">load</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">cd </span><span style=\\"color: #89DDFF\\">$(</span><span style=\\"color: #FFCB6B\\">find</span><span style=\\"color: #C3E88D\\"> . -name </span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">*</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\"> -type d </span><span style=\\"color: #89DDFF\\">|</span><span style=\\"color: #C3E88D\\"> </span><span style=\\"color: #FFCB6B\\">fzf</span><span style=\\"color: #89DDFF\\">)&quot;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-alias</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">cdf</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>然后使用cdf进行运行</p>\\n<div class=\\"language-sh line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">cli</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">cdf</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><h2 id=\\"后续\\" tabindex=\\"-1\\">后续 <a class=\\"header-anchor\\" href=\\"#后续\\" aria-label=\\"Permalink to &quot;后续&quot;\\">&ZeroWidthSpace;</a></h2>\\n<blockquote>\\n<p>2022-10-18 22:47</p>\\n</blockquote>\\n<p>刚刚找到了一个跟我这个想法很契合的项目: <a href=\\"https://github.com/denisidoro/navi\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://github.com/denisidoro/navi</a>.</p>\\n<p>今天一晚上都在调研技术的可行性,但是都达不到我想要的效果.还是这个例子,<code>cd $(find . -name &quot;*&quot; -type d | fzf)</code>,\\n主要有两种思路:</p>\\n<ol>\\n<li>在运行程序的使用利用shell的tab键盘补全,直接替换成这段命令,然后运行.比如说程序叫<code>qwe</code>,在shell里面输入<code>qwe cdf&lt;TAB&gt;</code>\\n,然后就直接替换为上面的命令.我在go里面找到<code>cobra</code>这个包,它能动态补全命令,有点效果,但还不够,不能做到全部替换,遂搁置.</li>\\n<li>直接在程序里面运行这段命令,我试了之后还是不行,<code>cd</code>执行后没有生效,应该还是跟<code>fork</code>有关.</li>\\n</ol>\\n<p>然后就到github里面找别人的实现,没想到找到了一个,但是试过之后还是不支持,但确实做的还不错.</p>\\n<p>想要做成我想要的效果就是实现:</p>\\n<ol>\\n<li>在shell中补全能直接替换所有,而不是一段.</li>\\n<li>在程序中不用<code>fork</code>运行.</li>\\n</ol>\\n<p>还需要在看看.</p>\\n","date":1665413007000,"update":1665413007000},{"title":"在Abstract Machine上玩超级马里奥","url":"/content/posts/2022-10-09-mario-nes.html","frontmatter":{"title":"在Abstract Machine上玩超级马里奥","date":"2022-10-09T11:40:42.000Z","tags":["linux","ics"],"layout":"post","cover":{"image":"/images/4.png"}},"src":"\\n\\n最近在学习 jyy 的[计算机系统基础习题课 ](http://jyywiki.cn/ICS/2021/),\\n在做[pa1](https://nju-projectn.github.io/ics-pa-gitbook/ics2021/1.1.html#nemu%E6%98%AF%E4%BB%80%E4%B9%88)的时候提\\n到一个运行红白机游戏的[项目](https://github.com/NJU-ProjectN/fceux-am)\\n\\n遇到的坑:\\n\\n1.`SIGSTKSZ` 参数找不到\\n\\n![SIGSTKSZ参数找不到](/images/5.png)\\n\\n将`SIGSTKSZ`修改为一个固定的参数\\n\\n```c\\n//uint8_t sigstack[SIGSTKSZ];\\nuint8_t sigstack[8192];\\n```\\n\\n2.serial 不正确\\n\\n![serial不正确](/images/6.png)\\n\\n修改`nemu/src/device/serial.c#init_serial`,每个人的不同,我的是 9.\\n","desc":"<p>最近在学习 jyy 的<a href=\\"http://jyywiki.cn/ICS/2021/\\" target=\\"_blank\\" rel=\\"noreferrer\\">计算机系统基础习题课 </a>,\\n在做<a href=\\"https://nju-projectn.github.io/ics-pa-gitbook/ics2021/1.1.html#nemu%E6%98%AF%E4%BB%80%E4%B9%88\\" target=\\"_blank\\" rel=\\"noreferrer\\">pa1</a>的时候提\\n到一个运行红白机游戏的<a href=\\"https://github.com/NJU-ProjectN/fceux-am\\" target=\\"_blank\\" rel=\\"noreferrer\\">项目</a></p>\\n<p>遇到的坑:</p>\\n<p>1.<code>SIGSTKSZ</code> 参数找不到</p>\\n<p><img src=\\"/images/5.png\\" alt=\\"SIGSTKSZ参数找不到\\"></p>\\n<p>将<code>SIGSTKSZ</code>修改为一个固定的参数</p>\\n<div class=\\"language-c line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">c</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">//uint8_t sigstack[SIGSTKSZ];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">uint8_t</span><span style=\\"color: #A6ACCD\\"> sigstack</span><span style=\\"color: #89DDFF\\">[</span><span style=\\"color: #F78C6C\\">8192</span><span style=\\"color: #89DDFF\\">];</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>2.serial 不正确</p>\\n<p><img src=\\"/images/6.png\\" alt=\\"serial不正确\\"></p>\\n<p>修改<code>nemu/src/device/serial.c#init_serial</code>,每个人的不同,我的是 9.</p>\\n","date":1665315642000,"update":1665315642000},{"title":"GFS","url":"/content/posts/2022-10-07-gfs.html","frontmatter":{"title":"GFS","date":"2022-10-07T13:12:56.000Z","layout":"post","tags":["gfs","transaction"]},"src":"\\n\\n1. 为了性能(**Performance**), 所以将数据分割放到大量的服务器上,从而实现并行的读取数据,这就是分片(**Sharding**).\\n2. 而成败上千的机器总会发生错误,所以有了容错(**Fault Tolerance**).\\n3. 实现容错最简单的方式就是复制(**Replication**),其中一个发生故障了就切换另一个.\\n4. 使用了复制,如果你不够小心,那么它们之间就可能会不一致.数据就有可能出现问题,所以就有了不一致的问题(**Inconsistency**).\\n5. 如果为了实现一致性(**Consistency**),那么就需要多进行额外的交互来保证一致性,所以代价就是低性能(**Low Perf**)\\n   ,但这与我们开始的希望不符合.\\n\\n:::tip\\nSo,强一致性代表着低性能.\\n:::\\n\\n## 设计目标\\n\\n1. 由于GFS是建立在大量的计算机上的,而这些计算机会不可避免的发生故障.所以必须要进行：**检查,容错以及快速从故障恢复**.\\n2. **主要支持大文件**(例如说好几个G的文件),同时也支持小文件但不做针对性的优化.\\n3. 工作负载主要由两种类型的读取组成：**大的流式读取**和**小的随机读取**\\n  .对于性能有过特别考虑的应用通常会作批处理并且对他们读取的内容进行排序,这样可以使得他们的读取始终是单向顺序读取,而不需要往回读取数据.\\n    - 在大的流式读取中,单个操作通常要读取数百k,甚至1m或者更大的数据.对于同一个客户端来说,往往会发起连续的读取操作顺序读取一个文件.\\n    - 小的随机读取通常在某个任意的偏移位置读取几kb的数据.小规模的随机读取通常在文件的不同位置,读取几k数据.\\n4. GFS中的文件通常上一旦完成写入就很少会再次修改,所以主要针对**大的流式读取**,同时夜支持任意位置的小规模写入操作.\\n5. GFS对多个客户端并行添加同一个文件必须要有非常有效且明确语义的支持,即**原子操作**.通常会有多个客户端会并行的对同一个文件进行append.\\n6. 高性能的稳定带宽的网络要比低延时更加重要.我们大多数的目标应用程序都非常**重视高速批量处理数据**\\n   ,而很少有人对单个读写操作有严格的响应时间要求.\\n\\n## 架构\\n\\n1. 单个master,多个chunk server(保存具体的文件),多个client.\\n2. 每个文件被拆分为一定大小(64mb)的块(chunk),且每个chunk有一个唯一的64位的标志(chunk handle).\\n3. 每个chunk都会在不同的chunk server上保存备份(默认是3个),用户可以指定不同的复制级别.\\n4. master管理元数据(metadata),例如文件到chunk的映射关系,chunk的位置信息等.\\n5. master管理chunk的分片,孤点chunk的垃圾回收机制,chunk server之间的镜像管理等\\n6. 每个chunk server与master之间有心跳机制,并在检测的过程中年发出指令并收集状态.\\n\\n## GFS Master中的metadata\\n\\n1. filename -> chunk ids(chunk handles) _**NV**_\\n2. chunk handle与chunk数据的对应关系\\n    - chunk保存在哪个服务器上(chunk server list)\\n    - chunk的version no _**NV**_\\n    - chunk的primary chunk server,因为写操作在在其上进行\\n    - primary chunk server的lease expiration\\n\\n这两个data table都在master的内存中存放,为了容错(例如说重启后数据不丢失数据),它会在磁盘上存储log,读取的使用从内存里面读取,写的时候会写入内存以及磁盘.\\n每当有数据变更时,就会在磁盘上的日志进行追加,并且定期(日志增长超过某一个大小)创建checkpoint(类似快照,不用从头开始读取)\\n\\n## GFS Read Steps\\n\\n1. 首先读请求就表明client有filename以及想要读取的位置(offset),然后发送给master.\\n2. master收到请求后就从filenames中获取对应的chunk handles.而每个chunk的大小上固定的,所以就得到的具体开始的chunk handle.\\n3. 然后根据chunk handle找到对应存放数据的chunk server的列表返回给client.\\n4. client可以选择一个server来进行读取(论文中说会选择一个最近的服务器,应为google里面ip是连续的,可以根据ip判断远近)\\n   ,应为客户端每次只读取1mb或者64kb的数据,所以它会缓存chunk与chunk server的关系,这样就不用每次都请求.\\n5. chunk server收到请求后,根据chunk handle(推测chunk是安装chunk handle进行命名的)找到对应的chunk以及offset对应的数据给客户端.\\n\\n### q1: 如果读取的数据跨越了一个chunk怎么办？\\n\\n例如说client想要读取的数据超过了64mb,或者仅仅上是2个byte却跨越了chunk,client会在发送请求时注意到这次请求跨越了边界,\\n所以会将一个请求拆分为2个请求发送到master,所以这里可能上向master发送两次读请求,之后在向不同的chunk server读取数据.\\n\\n## 多个副本之间变更顺序的一致性\\n\\n针对一个chunk\\n\\n1. master授权给某个持有这个chunk的server一个租约期限(60s),称为primary.\\n2. primary对所有的更改操作进行排序(serial order),然后其他的secondary根据这个顺序进行变更.\\n3. 只要这个chunk正在变更,那么primary就可以向master申请延长租约.\\n\\n## GFS Write Steps\\n\\n1. client向master发送请求获取chunk server list(primary,secondaries),\\n   如果没有primary,master就会选择一个secondary成为primary.\\n2. client获取到chunk server list后会缓存下来,只有当primary\\n   没有响应或租约过期后才会再次请求.\\n3. client将数据推送到所有replicas,客户端不保证推送的顺序,每个chunk server会将数据保存在内部的lur cache中,直到数据被使用或过期.\\n4. 当所有replicas都收到了数据,client将会发送一个写请求到primary,它标识了之前推送到每个副本的数据.\\n   primary将这些写入组织成一定的顺序应用到自己本地.\\n5. primary然后将这个应用顺序转发给各个secondary.\\n6. secondaries应用这个顺序完成修改并答复primary.\\n7. primary答复client,如果出现了任意错误也会答复给client.在出现错误的情况下,write request也可能在primary以及secondary中成功\\n   (如果primary直接就失败了,那么它将不会转发serial order给secondaries),client将认为这次请求是失败的,它会通过重试来处理(\\n   3-7尝试几次重新写入)\\n\\n## GFS Atomic Record Appends\\n\\n:::tip 对同一片区域个并发写入是不可序列化的\\n这片区域可能最终包含多个客户端的数据片段.\\n:::\\n\\n一个原子的append操作.`recored append`至少会在给定的offset(GFS自己选择的,因为这里可能会失败,可能有一些chunk server上有这个数据)\\n上追加到文件上一次,并将该offset返回给client.它类似`O_APPEND`保证原子性.\\n`recored append`遵守[ GFS Write Steps ](#gfs-write-steps)流程,但是有一些特别的地方:\\n\\n1. client推送所有数据后,primary会检查append到该chunk后是否超过了单个chunk的大小.\\n2. 如果超过了,则在当前chunk填充到最大offset时(secondary也要保存),回复client,指出该操作应该在下一个chunk上重试(\\n   record的大小需要控制在单个chunk最大值的四分之一,以保证碎片在可接收的水平).\\n3. 如果没有超过最大大小,则按照正常的情况进行保存.\\n\\n\\n## 过期副本检测\\n\\n如果chunk server发生故障而宕机或者丢失了某些更新请求,那么它就有可能过期了.对于每个chunk,master都维护了一个version\\nno来标识最新和过期的副本.\\n\\n当master为一个chunk的primary server授权或续期时就会增加version no并通知所有replicas进行更新.\\n\\n在数据一致的情况下,master和所有replicas的version no是一致的(在client发送写请求之前可以保证).\\n\\n当chunk server重启或上报version no时,master会检查它时否包含过期的副本,如果发现master发现version\\nno大于它的记录,master会采用更高的version no进行更新.\\n\\nmaster通过周期性的垃圾回收来删除过期的副本,在删除前,它会确认在它所有client的chunk信息请求的应答中没有包含这个过期的副本.\\n\\nclient在从master获取chunk server列表时会附带获取version no,所以它可以进行比对,选择最新的副本进行操作.\\n\\n## 总结\\n\\n这并不是一个合格的多副本,多活,高可用,故障自修复的分布式系统.\\n\\n## Links\\n\\n1. [gfs paper 原文](https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/gfs-sosp2003.pdf)\\n2. [gfs paper 中文翻译](https://zhuanlan.zhihu.com/p/424677701)\\n3. [gfs 视频](https://www.bilibili.com/video/BV1R7411t71W/?p=3&spm_id_from=333.788.top_right_bar_window_history.content.click&vd_source=98f230be6561d2fc7450e7ce05876f68)\\n4. [gfs 视频翻译](https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/lecture-03-gfs/3.1)\\n5. [Bad Replication Design](https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/lecture-03-gfs/3.2-qiang-yi-zhi-xing-strong-consistency)\\n","desc":"<ol>\\n<li>为了性能(<strong>Performance</strong>), 所以将数据分割放到大量的服务器上,从而实现并行的读取数据,这就是分片(<strong>Sharding</strong>).</li>\\n<li>而成败上千的机器总会发生错误,所以有了容错(<strong>Fault Tolerance</strong>).</li>\\n<li>实现容错最简单的方式就是复制(<strong>Replication</strong>),其中一个发生故障了就切换另一个.</li>\\n<li>使用了复制,如果你不够小心,那么它们之间就可能会不一致.数据就有可能出现问题,所以就有了不一致的问题(<strong>Inconsistency</strong>).</li>\\n<li>如果为了实现一致性(<strong>Consistency</strong>),那么就需要多进行额外的交互来保证一致性,所以代价就是低性能(<strong>Low Perf</strong>)\\n,但这与我们开始的希望不符合.</li>\\n</ol>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">TIP</p>\\n<p>So,强一致性代表着低性能.</p>\\n</div>\\n<h2 id=\\"设计目标\\" tabindex=\\"-1\\">设计目标 <a class=\\"header-anchor\\" href=\\"#设计目标\\" aria-label=\\"Permalink to &quot;设计目标&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ol>\\n<li>由于GFS是建立在大量的计算机上的,而这些计算机会不可避免的发生故障.所以必须要进行：<strong>检查,容错以及快速从故障恢复</strong>.</li>\\n<li><strong>主要支持大文件</strong>(例如说好几个G的文件),同时也支持小文件但不做针对性的优化.</li>\\n<li>工作负载主要由两种类型的读取组成：<strong>大的流式读取</strong>和<strong>小的随机读取</strong>\\n.对于性能有过特别考虑的应用通常会作批处理并且对他们读取的内容进行排序,这样可以使得他们的读取始终是单向顺序读取,而不需要往回读取数据.\\n<ul>\\n<li>在大的流式读取中,单个操作通常要读取数百k,甚至1m或者更大的数据.对于同一个客户端来说,往往会发起连续的读取操作顺序读取一个文件.</li>\\n<li>小的随机读取通常在某个任意的偏移位置读取几kb的数据.小规模的随机读取通常在文件的不同位置,读取几k数据.</li>\\n</ul>\\n</li>\\n<li>GFS中的文件通常上一旦完成写入就很少会再次修改,所以主要针对<strong>大的流式读取</strong>,同时夜支持任意位置的小规模写入操作.</li>\\n<li>GFS对多个客户端并行添加同一个文件必须要有非常有效且明确语义的支持,即<strong>原子操作</strong>.通常会有多个客户端会并行的对同一个文件进行append.</li>\\n<li>高性能的稳定带宽的网络要比低延时更加重要.我们大多数的目标应用程序都非常<strong>重视高速批量处理数据</strong>\\n,而很少有人对单个读写操作有严格的响应时间要求.</li>\\n</ol>\\n<h2 id=\\"架构\\" tabindex=\\"-1\\">架构 <a class=\\"header-anchor\\" href=\\"#架构\\" aria-label=\\"Permalink to &quot;架构&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ol>\\n<li>单个master,多个chunk server(保存具体的文件),多个client.</li>\\n<li>每个文件被拆分为一定大小(64mb)的块(chunk),且每个chunk有一个唯一的64位的标志(chunk handle).</li>\\n<li>每个chunk都会在不同的chunk server上保存备份(默认是3个),用户可以指定不同的复制级别.</li>\\n<li>master管理元数据(metadata),例如文件到chunk的映射关系,chunk的位置信息等.</li>\\n<li>master管理chunk的分片,孤点chunk的垃圾回收机制,chunk server之间的镜像管理等</li>\\n<li>每个chunk server与master之间有心跳机制,并在检测的过程中年发出指令并收集状态.</li>\\n</ol>\\n<h2 id=\\"gfs-master中的metadata\\" tabindex=\\"-1\\">GFS Master中的metadata <a class=\\"header-anchor\\" href=\\"#gfs-master中的metadata\\" aria-label=\\"Permalink to &quot;GFS Master中的metadata&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ol>\\n<li>filename -&gt; chunk ids(chunk handles) <em><strong>NV</strong></em></li>\\n<li>chunk handle与chunk数据的对应关系\\n<ul>\\n<li>chunk保存在哪个服务器上(chunk server list)</li>\\n<li>chunk的version no <em><strong>NV</strong></em></li>\\n<li>chunk的primary chunk server,因为写操作在在其上进行</li>\\n<li>primary chunk server的lease expiration</li>\\n</ul>\\n</li>\\n</ol>\\n<p>这两个data table都在master的内存中存放,为了容错(例如说重启后数据不丢失数据),它会在磁盘上存储log,读取的使用从内存里面读取,写的时候会写入内存以及磁盘.\\n每当有数据变更时,就会在磁盘上的日志进行追加,并且定期(日志增长超过某一个大小)创建checkpoint(类似快照,不用从头开始读取)</p>\\n<h2 id=\\"gfs-read-steps\\" tabindex=\\"-1\\">GFS Read Steps <a class=\\"header-anchor\\" href=\\"#gfs-read-steps\\" aria-label=\\"Permalink to &quot;GFS Read Steps&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ol>\\n<li>首先读请求就表明client有filename以及想要读取的位置(offset),然后发送给master.</li>\\n<li>master收到请求后就从filenames中获取对应的chunk handles.而每个chunk的大小上固定的,所以就得到的具体开始的chunk handle.</li>\\n<li>然后根据chunk handle找到对应存放数据的chunk server的列表返回给client.</li>\\n<li>client可以选择一个server来进行读取(论文中说会选择一个最近的服务器,应为google里面ip是连续的,可以根据ip判断远近)\\n,应为客户端每次只读取1mb或者64kb的数据,所以它会缓存chunk与chunk server的关系,这样就不用每次都请求.</li>\\n<li>chunk server收到请求后,根据chunk handle(推测chunk是安装chunk handle进行命名的)找到对应的chunk以及offset对应的数据给客户端.</li>\\n</ol>\\n<h3 id=\\"q1-如果读取的数据跨越了一个chunk怎么办\\" tabindex=\\"-1\\">q1: 如果读取的数据跨越了一个chunk怎么办？ <a class=\\"header-anchor\\" href=\\"#q1-如果读取的数据跨越了一个chunk怎么办\\" aria-label=\\"Permalink to &quot;q1: 如果读取的数据跨越了一个chunk怎么办？&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>例如说client想要读取的数据超过了64mb,或者仅仅上是2个byte却跨越了chunk,client会在发送请求时注意到这次请求跨越了边界,\\n所以会将一个请求拆分为2个请求发送到master,所以这里可能上向master发送两次读请求,之后在向不同的chunk server读取数据.</p>\\n<h2 id=\\"多个副本之间变更顺序的一致性\\" tabindex=\\"-1\\">多个副本之间变更顺序的一致性 <a class=\\"header-anchor\\" href=\\"#多个副本之间变更顺序的一致性\\" aria-label=\\"Permalink to &quot;多个副本之间变更顺序的一致性&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>针对一个chunk</p>\\n<ol>\\n<li>master授权给某个持有这个chunk的server一个租约期限(60s),称为primary.</li>\\n<li>primary对所有的更改操作进行排序(serial order),然后其他的secondary根据这个顺序进行变更.</li>\\n<li>只要这个chunk正在变更,那么primary就可以向master申请延长租约.</li>\\n</ol>\\n<h2 id=\\"gfs-write-steps\\" tabindex=\\"-1\\">GFS Write Steps <a class=\\"header-anchor\\" href=\\"#gfs-write-steps\\" aria-label=\\"Permalink to &quot;GFS Write Steps&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ol>\\n<li>client向master发送请求获取chunk server list(primary,secondaries),\\n如果没有primary,master就会选择一个secondary成为primary.</li>\\n<li>client获取到chunk server list后会缓存下来,只有当primary\\n没有响应或租约过期后才会再次请求.</li>\\n<li>client将数据推送到所有replicas,客户端不保证推送的顺序,每个chunk server会将数据保存在内部的lur cache中,直到数据被使用或过期.</li>\\n<li>当所有replicas都收到了数据,client将会发送一个写请求到primary,它标识了之前推送到每个副本的数据.\\nprimary将这些写入组织成一定的顺序应用到自己本地.</li>\\n<li>primary然后将这个应用顺序转发给各个secondary.</li>\\n<li>secondaries应用这个顺序完成修改并答复primary.</li>\\n<li>primary答复client,如果出现了任意错误也会答复给client.在出现错误的情况下,write request也可能在primary以及secondary中成功\\n(如果primary直接就失败了,那么它将不会转发serial order给secondaries),client将认为这次请求是失败的,它会通过重试来处理(\\n3-7尝试几次重新写入)</li>\\n</ol>\\n<h2 id=\\"gfs-atomic-record-appends\\" tabindex=\\"-1\\">GFS Atomic Record Appends <a class=\\"header-anchor\\" href=\\"#gfs-atomic-record-appends\\" aria-label=\\"Permalink to &quot;GFS Atomic Record Appends&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">对同一片区域个并发写入是不可序列化的</p>\\n<p>这片区域可能最终包含多个客户端的数据片段.</p>\\n</div>\\n<p>一个原子的append操作.<code>recored append</code>至少会在给定的offset(GFS自己选择的,因为这里可能会失败,可能有一些chunk server上有这个数据)\\n上追加到文件上一次,并将该offset返回给client.它类似<code>O_APPEND</code>保证原子性.\\n<code>recored append</code>遵守<a href=\\"#gfs-write-steps\\"> GFS Write Steps </a>流程,但是有一些特别的地方:</p>\\n<ol>\\n<li>client推送所有数据后,primary会检查append到该chunk后是否超过了单个chunk的大小.</li>\\n<li>如果超过了,则在当前chunk填充到最大offset时(secondary也要保存),回复client,指出该操作应该在下一个chunk上重试(\\nrecord的大小需要控制在单个chunk最大值的四分之一,以保证碎片在可接收的水平).</li>\\n<li>如果没有超过最大大小,则按照正常的情况进行保存.</li>\\n</ol>\\n<h2 id=\\"过期副本检测\\" tabindex=\\"-1\\">过期副本检测 <a class=\\"header-anchor\\" href=\\"#过期副本检测\\" aria-label=\\"Permalink to &quot;过期副本检测&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>如果chunk server发生故障而宕机或者丢失了某些更新请求,那么它就有可能过期了.对于每个chunk,master都维护了一个version\\nno来标识最新和过期的副本.</p>\\n<p>当master为一个chunk的primary server授权或续期时就会增加version no并通知所有replicas进行更新.</p>\\n<p>在数据一致的情况下,master和所有replicas的version no是一致的(在client发送写请求之前可以保证).</p>\\n<p>当chunk server重启或上报version no时,master会检查它时否包含过期的副本,如果发现master发现version\\nno大于它的记录,master会采用更高的version no进行更新.</p>\\n<p>master通过周期性的垃圾回收来删除过期的副本,在删除前,它会确认在它所有client的chunk信息请求的应答中没有包含这个过期的副本.</p>\\n<p>client在从master获取chunk server列表时会附带获取version no,所以它可以进行比对,选择最新的副本进行操作.</p>\\n<h2 id=\\"总结\\" tabindex=\\"-1\\">总结 <a class=\\"header-anchor\\" href=\\"#总结\\" aria-label=\\"Permalink to &quot;总结&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>这并不是一个合格的多副本,多活,高可用,故障自修复的分布式系统.</p>\\n<h2 id=\\"links\\" tabindex=\\"-1\\">Links <a class=\\"header-anchor\\" href=\\"#links\\" aria-label=\\"Permalink to &quot;Links&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ol>\\n<li><a href=\\"https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/gfs-sosp2003.pdf\\" target=\\"_blank\\" rel=\\"noreferrer\\">gfs paper 原文</a></li>\\n<li><a href=\\"https://zhuanlan.zhihu.com/p/424677701\\" target=\\"_blank\\" rel=\\"noreferrer\\">gfs paper 中文翻译</a></li>\\n<li><a href=\\"https://www.bilibili.com/video/BV1R7411t71W/?p=3&amp;spm_id_from=333.788.top_right_bar_window_history.content.click&amp;vd_source=98f230be6561d2fc7450e7ce05876f68\\" target=\\"_blank\\" rel=\\"noreferrer\\">gfs 视频</a></li>\\n<li><a href=\\"https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/lecture-03-gfs/3.1\\" target=\\"_blank\\" rel=\\"noreferrer\\">gfs 视频翻译</a></li>\\n<li><a href=\\"https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/lecture-03-gfs/3.2-qiang-yi-zhi-xing-strong-consistency\\" target=\\"_blank\\" rel=\\"noreferrer\\">Bad Replication Design</a></li>\\n</ol>\\n","date":1665148376000,"update":1665148376000},{"title":"调节linux屏幕的亮度","url":"/content/posts/2022-10-04-backlight.html","frontmatter":{"title":"调节linux屏幕的亮度","date":"2022-10-04T02:07:28.000Z","tags":["linux"],"layout":"post","summary":"由于使用DWM,它不能像KDE那样之间有图形化的亮度调节功能,所以记录一下."},"src":"\\n\\n**查看当前backlight由什么控制:**\\n\\n> 一般都是`intel`.\\n\\n```shell\\nls /sys/class/backlight\\n```\\n\\n**查看当前的亮度:**\\n\\n```shell\\ncat /sys/class/backlight/intel_backlight/max_brightness\\n```\\n\\n**修改亮度:**\\n\\n```shell\\necho 5000 | sudo tee /sys/class/backlight/intel_backlight/brightness\\n```\\n","desc":"由于使用DWM,它不能像KDE那样之间有图形化的亮度调节功能,所以记录一下.","date":1664849248000,"update":1664849248000},{"title":"Dwm初体验","url":"/content/posts/2022-09-29-dwm.html","frontmatter":{"title":"Dwm初体验","date":"2022-09-29T15:42:41.000Z","tags":["wm","linux"],"layout":"post","cover":{"image":"/images/20230126191021.png"}},"src":"\\n\\n## 安装\\n\\n```shell\\ngit clone https://git.suckless.org/dwm\\ncd dwm\\nsudo make clean install\\n```\\n\\n## 启动\\n\\n如果已经有了 sddm,可以使用`sudo systemctl disable sddm.service`\\n来进行关闭,如果到时候不想用了可以用`sudo systemctl enable sddm.service`来开启 sddm.\\n\\n```shell\\n# 准备配置文件\\ncp /etc/X11/xinit/xinitrc ~/.xinitrc\\nvim ~/.xinitrc\\n\\n# 添加\\nexec dwm\\n\\n# 注释\\n#twm &\\n#xclock -geometry 50x50-1+1 &\\n#xterm -geometry 80x50+494+51 &\\n#xterm -geometry 80x20+494-0 &\\n#exec xterm -geometry 80x66+0+0 -name login\\n```\\n\\n然后重启并调用`startx`即可.\\n\\n## 遇到的问题\\n\\n### 直接断网\\n\\n使用 NetworkManager 进行连接,可能要用到`dhcpcd`.\\n\\n```shell\\nnmcli device wifi list\\nnmcli device wifi connect ${wifi name} password ${pwd}\\n```\\n\\n可能会连接失败,你可以试试`nmcli connection show`\\n来查看是否存在以前的连接信息,可以用`nmcli connection delete ${wifi name}`来删除对应的信息\\n\\n### 输入法失效\\n\\n添加配置文件\\n\\n```shell\\nvim ~/.pam_environment\\n\\nINPUT_METHOD DEFAULT=fcitx5\\nGTK_IM_MODULE DEFAULT=fcitx5\\nQT_IM_MODULE DEFAULT=fcitx5\\nXMODIFIERS DEFAULT=@im=fcitx5\\n```\\n\\n添加启动命令\\n\\n```shell\\nvim ~/.xinitrc1\\n\\n# 在exec dwm之前添加\\nexec fcitx5 &\\n```\\n\\n### 扩展屏幕无效\\n\\n```shell\\n# 可以先查看有哪些屏幕\\nxrandr\\n#\\n# 将下面的命令加入 ~/.xinitrc1 中,在exec dwm之前添加\\n# 我有两个,是上下关系,所以用below 其他有 left 以及 right\\nxrandr --output eDP-1-1  --auto --below HDMI-0\\n```\\n\\n## 常用快捷键\\n\\n可以参考我配置： https://github.com/fzdwx/dwm\\n\\n`MOD` -> `WIN`\\n\\n| 快捷键            | desc     |\\n| ----------------- | -------- |\\n| `MOD+SHIFT+ENTER` | 新开终端 |\\n\\n### 在本 tag 内切换聚焦窗口\\n\\n| 快捷键       | desc         |\\n| ------------ | ------------ |\\n| `ALT + tab`  | 切换聚焦窗口 |\\n| `MOD + up`   | 切换聚焦窗口 |\\n| `MOD + down` | 切换聚焦窗口 |\\n\\n### 跨 tag 操作\\n\\n| 快捷键                       | desc                                                    |\\n| ---------------------------- | ------------------------------------------------------- |\\n| `MOD + left / right`         | 切换 tag                                                |\\n| `MOD + SHIGT + left / tight` | 将当前窗口移动到其他 tag                                |\\n| `MOD + a`                    | 第一次是显示所有 tag,第二次是跳转到聚焦的窗口所在的窗口 |\\n\\n### 窗口操作\\n\\n| 快捷键                | desc                         |\\n| --------------------- | ---------------------------- |\\n| `MOD + q`             | 退出窗口                     |\\n| `MOD + h`             | 隐藏窗口                     |\\n| `MOD + SHIFT + h`     | 显示窗口（像一个栈一样.）    |\\n| `MOD + ENTER`         | 将当前窗口设置为主窗口       |\\n| `MOD + f`             | 将当前窗口全屏               |\\n| `MOD + CTRL + 方向键` | 移动窗口                     |\\n| `MOD + ALT + 方向键`  | 调整窗口大小                 |\\n| `MOD + o`             | 只显示当前窗口/显示所有窗口  |\\n| `MOD + t`             | 开启/关闭 聚焦目标的浮动模式 |\\n| `MOD + SHIFT + t`     | 开启/关闭 全部目标的浮动模式 |\\n\\n| `MOD + SHIFT + f` | 开启/关闭 状态栏 |\\n\\n### 切换屏幕\\n\\n| 快捷键            | desc                     |\\n| ----------------- | ------------------------ |\\n| `MOD + x`         | 将鼠标移动到其他屏幕     |\\n| `MOD + SHIFT + X` | 将当前窗口移动到其他屏幕 |\\n\\n## 更新\\n\\n### click status bar\\n\\n最近跟进了大佬的配置[yaocccc](https://github.com/yaocccc/dwm), 可点击的 status bar.\\n\\n主要原理就是根据预定义的格式解析出`signal`\\n,然后调用预定义的脚本文件([commit](https://github.com/fzdwx/dwm/commit/b30b5bedb1661e70acf6830f924857650831b441#diff-62eebf5eaf0e6a76a21dfed9da6556ee5413ddb49f06013bd83403cc1a485d98))\\n\\n也很容易扩展,可以参考我的[fm](https://github.com/fzdwx/dwm/blob/main/statusbar/packages/fm.sh), `update`是构造要返回的内容,\\n`click`就是点击时调用的方法,`wezterm start --class float ranger`我这一段就是启动 wezterm 并调用 ranger.\\n\\n![img.png](/images/11.png)\\n\\n## Links\\n\\n- [ArchWiki Dwm](<https://wiki.archlinux.org/title/Dwm_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)>)\\n- [Dwm patches](https://dwm.suckless.org/patches/)\\n- [Dwm patches 中文翻译](https://github.com/Katzeee/dwm-patches-chinese/blob/master/dwm-patches-chinese.md)\\n- [picom 美化](https://yaocc.cc/2022/06/19/linux%E4%B8%9D%E6%BB%91%E7%9A%84%E5%8A%A8%E7%94%BB%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94picom/)\\n","desc":"<h2 id=\\"安装\\" tabindex=\\"-1\\">安装 <a class=\\"header-anchor\\" href=\\"#安装\\" aria-label=\\"Permalink to &quot;安装&quot;\\">&ZeroWidthSpace;</a></h2>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">git</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">clone</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">https://git.suckless.org/dwm</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">cd</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">dwm</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">sudo</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">make</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">clean</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">install</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br></div></div><h2 id=\\"启动\\" tabindex=\\"-1\\">启动 <a class=\\"header-anchor\\" href=\\"#启动\\" aria-label=\\"Permalink to &quot;启动&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>如果已经有了 sddm,可以使用<code>sudo systemctl disable sddm.service</code>\\n来进行关闭,如果到时候不想用了可以用<code>sudo systemctl enable sddm.service</code>来开启 sddm.</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 准备配置文件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">cp</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">/etc/X11/xinit/xinitrc</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">~/.xinitrc</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">vim</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">~/.xinitrc</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 添加</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">exec</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">dwm</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 注释</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">#twm &amp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">#xclock -geometry 50x50-1+1 &amp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">#xterm -geometry 80x50+494+51 &amp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">#xterm -geometry 80x20+494-0 &amp;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">#exec xterm -geometry 80x66+0+0 -name login</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br><span class=\\"line-number\\">7</span><br><span class=\\"line-number\\">8</span><br><span class=\\"line-number\\">9</span><br><span class=\\"line-number\\">10</span><br><span class=\\"line-number\\">11</span><br><span class=\\"line-number\\">12</span><br><span class=\\"line-number\\">13</span><br></div></div><p>然后重启并调用<code>startx</code>即可.</p>\\n<h2 id=\\"遇到的问题\\" tabindex=\\"-1\\">遇到的问题 <a class=\\"header-anchor\\" href=\\"#遇到的问题\\" aria-label=\\"Permalink to &quot;遇到的问题&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"直接断网\\" tabindex=\\"-1\\">直接断网 <a class=\\"header-anchor\\" href=\\"#直接断网\\" aria-label=\\"Permalink to &quot;直接断网&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>使用 NetworkManager 进行连接,可能要用到<code>dhcpcd</code>.</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">nmcli</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">device</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">wifi</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">list</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">nmcli</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">device</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">wifi</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">connect</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">wifi name</span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">password</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">pwd</span><span style=\\"color: #89DDFF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>可能会连接失败,你可以试试<code>nmcli connection show</code>\\n来查看是否存在以前的连接信息,可以用<code>nmcli connection delete ${wifi name}</code>来删除对应的信息</p>\\n<h3 id=\\"输入法失效\\" tabindex=\\"-1\\">输入法失效 <a class=\\"header-anchor\\" href=\\"#输入法失效\\" aria-label=\\"Permalink to &quot;输入法失效&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>添加配置文件</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">vim</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">~/.pam_environment</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">INPUT_METHOD</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">DEFAULT=fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">GTK_IM_MODULE</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">DEFAULT=fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">QT_IM_MODULE</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">DEFAULT=fcitx5</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">XMODIFIERS</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">DEFAULT=@im=fcitx5</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br></div></div><p>添加启动命令</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">vim</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">~/.xinitrc1</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 在exec dwm之前添加</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">exec</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">fcitx5</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&amp;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br></div></div><h3 id=\\"扩展屏幕无效\\" tabindex=\\"-1\\">扩展屏幕无效 <a class=\\"header-anchor\\" href=\\"#扩展屏幕无效\\" aria-label=\\"Permalink to &quot;扩展屏幕无效&quot;\\">&ZeroWidthSpace;</a></h3>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 可以先查看有哪些屏幕</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">xrandr</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">#</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 将下面的命令加入 ~/.xinitrc1 中,在exec dwm之前添加</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\"># 我有两个,是上下关系,所以用below 其他有 left 以及 right</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">xrandr</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--output</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">eDP-</span><span style=\\"color: #F78C6C\\">1</span><span style=\\"color: #C3E88D\\">-</span><span style=\\"color: #F78C6C\\">1</span><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #C3E88D\\">--auto</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">--below</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">HDMI-</span><span style=\\"color: #F78C6C\\">0</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br><span class=\\"line-number\\">6</span><br></div></div><h2 id=\\"常用快捷键\\" tabindex=\\"-1\\">常用快捷键 <a class=\\"header-anchor\\" href=\\"#常用快捷键\\" aria-label=\\"Permalink to &quot;常用快捷键&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>可以参考我配置： <a href=\\"https://github.com/fzdwx/dwm\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://github.com/fzdwx/dwm</a></p>\\n<p><code>MOD</code> -&gt; <code>WIN</code></p>\\n<table>\\n<thead>\\n<tr>\\n<th>快捷键</th>\\n<th>desc</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>MOD+SHIFT+ENTER</code></td>\\n<td>新开终端</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\"在本-tag-内切换聚焦窗口\\" tabindex=\\"-1\\">在本 tag 内切换聚焦窗口 <a class=\\"header-anchor\\" href=\\"#在本-tag-内切换聚焦窗口\\" aria-label=\\"Permalink to &quot;在本 tag 内切换聚焦窗口&quot;\\">&ZeroWidthSpace;</a></h3>\\n<table>\\n<thead>\\n<tr>\\n<th>快捷键</th>\\n<th>desc</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>ALT + tab</code></td>\\n<td>切换聚焦窗口</td>\\n</tr>\\n<tr>\\n<td><code>MOD + up</code></td>\\n<td>切换聚焦窗口</td>\\n</tr>\\n<tr>\\n<td><code>MOD + down</code></td>\\n<td>切换聚焦窗口</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\"跨-tag-操作\\" tabindex=\\"-1\\">跨 tag 操作 <a class=\\"header-anchor\\" href=\\"#跨-tag-操作\\" aria-label=\\"Permalink to &quot;跨 tag 操作&quot;\\">&ZeroWidthSpace;</a></h3>\\n<table>\\n<thead>\\n<tr>\\n<th>快捷键</th>\\n<th>desc</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>MOD + left / right</code></td>\\n<td>切换 tag</td>\\n</tr>\\n<tr>\\n<td><code>MOD + SHIGT + left / tight</code></td>\\n<td>将当前窗口移动到其他 tag</td>\\n</tr>\\n<tr>\\n<td><code>MOD + a</code></td>\\n<td>第一次是显示所有 tag,第二次是跳转到聚焦的窗口所在的窗口</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\"窗口操作\\" tabindex=\\"-1\\">窗口操作 <a class=\\"header-anchor\\" href=\\"#窗口操作\\" aria-label=\\"Permalink to &quot;窗口操作&quot;\\">&ZeroWidthSpace;</a></h3>\\n<table>\\n<thead>\\n<tr>\\n<th>快捷键</th>\\n<th>desc</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>MOD + q</code></td>\\n<td>退出窗口</td>\\n</tr>\\n<tr>\\n<td><code>MOD + h</code></td>\\n<td>隐藏窗口</td>\\n</tr>\\n<tr>\\n<td><code>MOD + SHIFT + h</code></td>\\n<td>显示窗口（像一个栈一样.）</td>\\n</tr>\\n<tr>\\n<td><code>MOD + ENTER</code></td>\\n<td>将当前窗口设置为主窗口</td>\\n</tr>\\n<tr>\\n<td><code>MOD + f</code></td>\\n<td>将当前窗口全屏</td>\\n</tr>\\n<tr>\\n<td><code>MOD + CTRL + 方向键</code></td>\\n<td>移动窗口</td>\\n</tr>\\n<tr>\\n<td><code>MOD + ALT + 方向键</code></td>\\n<td>调整窗口大小</td>\\n</tr>\\n<tr>\\n<td><code>MOD + o</code></td>\\n<td>只显示当前窗口/显示所有窗口</td>\\n</tr>\\n<tr>\\n<td><code>MOD + t</code></td>\\n<td>开启/关闭 聚焦目标的浮动模式</td>\\n</tr>\\n<tr>\\n<td><code>MOD + SHIFT + t</code></td>\\n<td>开启/关闭 全部目标的浮动模式</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>| <code>MOD + SHIFT + f</code> | 开启/关闭 状态栏 |</p>\\n<h3 id=\\"切换屏幕\\" tabindex=\\"-1\\">切换屏幕 <a class=\\"header-anchor\\" href=\\"#切换屏幕\\" aria-label=\\"Permalink to &quot;切换屏幕&quot;\\">&ZeroWidthSpace;</a></h3>\\n<table>\\n<thead>\\n<tr>\\n<th>快捷键</th>\\n<th>desc</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>MOD + x</code></td>\\n<td>将鼠标移动到其他屏幕</td>\\n</tr>\\n<tr>\\n<td><code>MOD + SHIFT + X</code></td>\\n<td>将当前窗口移动到其他屏幕</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\"更新\\" tabindex=\\"-1\\">更新 <a class=\\"header-anchor\\" href=\\"#更新\\" aria-label=\\"Permalink to &quot;更新&quot;\\">&ZeroWidthSpace;</a></h2>\\n<h3 id=\\"click-status-bar\\" tabindex=\\"-1\\">click status bar <a class=\\"header-anchor\\" href=\\"#click-status-bar\\" aria-label=\\"Permalink to &quot;click status bar&quot;\\">&ZeroWidthSpace;</a></h3>\\n<p>最近跟进了大佬的配置<a href=\\"https://github.com/yaocccc/dwm\\" target=\\"_blank\\" rel=\\"noreferrer\\">yaocccc</a>, 可点击的 status bar.</p>\\n<p>主要原理就是根据预定义的格式解析出<code>signal</code>\\n,然后调用预定义的脚本文件(<a href=\\"https://github.com/fzdwx/dwm/commit/b30b5bedb1661e70acf6830f924857650831b441#diff-62eebf5eaf0e6a76a21dfed9da6556ee5413ddb49f06013bd83403cc1a485d98\\" target=\\"_blank\\" rel=\\"noreferrer\\">commit</a>)</p>\\n<p>也很容易扩展,可以参考我的<a href=\\"https://github.com/fzdwx/dwm/blob/main/statusbar/packages/fm.sh\\" target=\\"_blank\\" rel=\\"noreferrer\\">fm</a>, <code>update</code>是构造要返回的内容,\\n<code>click</code>就是点击时调用的方法,<code>wezterm start --class float ranger</code>我这一段就是启动 wezterm 并调用 ranger.</p>\\n<p><img src=\\"/images/11.png\\" alt=\\"img.png\\"></p>\\n<h2 id=\\"links\\" tabindex=\\"-1\\">Links <a class=\\"header-anchor\\" href=\\"#links\\" aria-label=\\"Permalink to &quot;Links&quot;\\">&ZeroWidthSpace;</a></h2>\\n<ul>\\n<li><a href=\\"https://wiki.archlinux.org/title/Dwm_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\\" target=\\"_blank\\" rel=\\"noreferrer\\">ArchWiki Dwm</a></li>\\n<li><a href=\\"https://dwm.suckless.org/patches/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Dwm patches</a></li>\\n<li><a href=\\"https://github.com/Katzeee/dwm-patches-chinese/blob/master/dwm-patches-chinese.md\\" target=\\"_blank\\" rel=\\"noreferrer\\">Dwm patches 中文翻译</a></li>\\n<li><a href=\\"https://yaocc.cc/2022/06/19/linux%E4%B8%9D%E6%BB%91%E7%9A%84%E5%8A%A8%E7%94%BB%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94picom/\\" target=\\"_blank\\" rel=\\"noreferrer\\">picom 美化</a></li>\\n</ul>\\n","date":1664466161000,"update":1664466161000},{"title":"Neovim使用记录","url":"/content/posts/2022-09-28-neovim-use-notes.html","frontmatter":{"title":"Neovim使用记录","layout":"post","date":"2022-09-28T07:59:37.000Z","tags":["nvim","editor"],"summary":"由于最近切换到了 linux,不可避免的经常需要使用 vi 等编辑器,所以这次好好折腾一下."},"src":"\\n\\n> 由于最近切换到了linux,不可避免的经常需要使用vi等编辑器,所以这次好好折腾一下.\\n\\n我的配置地址: https://github.com/fzdwx/nvim ,现在直接使用 [LazyVim](https://github.com/LazyVim/LazyVim).\\n\\n---\\n\\n> 过期\\n\\n\\n## 我的配置\\n\\n### pakcer\\n\\n我选用的插件管理器是`packer`,我也不知道选什么好,就按最新的来吧.\\n\\n```lua\\n--- setup packer\\nlocal fn = vim.fn\\nlocal install_path = fn.stdpath(\'data\') .. \'/site/pack/packer/start/packer.nvim\'\\n\\nif fn.empty(fn.glob(install_path)) > 0 then\\n    packer_bootstrap = fn.system({ \'git\', \'clone\', \'--depth\', \'1\', \'https://github.com/wbthomason/packer.nvim\', install_path })\\n    vim.cmd(\\"packadd packer.nvim\\")\\nend\\n--- add plugins\\nrequire(\'packer\').startup(function(use)\\n    -- 自托管\\n    use \'wbthomason/packer.nvim\'\\n    -- 其他插件\\n    -- 如果是第一次则同步\\n    if packer_bootstrap then\\n        require(\'packer\').sync()\\n    end\\nend)\\n```\\n\\n### [alpha](https://github.com/goolord/alpha-nvim)\\n\\n是一个dashboard,也可以说是一个欢迎界面.\\n\\n```lua\\nrequire(\'packer\').startup(function(use)\\n    -- ...\\n    --- 添加下面两行进行安装\\n    use \\"goolord/alpha-nvim\\";\\n    use \\"kyazdani42/nvim-web-devicons\\";\\n    -- ...\\nend)\\n```\\n\\n配置代码太长了就不放了,可以点击这里[ 这里 ](https://github.com/fzdwx/nvim/blob/main/lua/config/plugins/alpha.lua)参考.\\n\\n### [telescope](https://github.com/nvim-telescope/telescope.nvim)\\n\\n主要作用是文件的查找与预览.\\n\\n```lua\\nrequire(\'packer\').startup(function(use)\\n    -- ...\\n    --- 添加下面代码进行安装\\n    use {\\n        \'nvim-telescope/telescope.nvim\', tag = \'0.1.0\',\\n        \\"ahmedkhalf/project.nvim\\",\\n        \'nvim-lua/plenary.nvim\',\\n    }\\n    -- ...\\nend)\\n```\\n\\n- [配置](https://github.com/fzdwx/nvim/blob/main/lua/config/plugins/telescope.lua)\\n- [key map](https://github.com/fzdwx/nvim/blob/main/lua/config/key/init.lua#L34-L52)\\n\\n## 一些教程\\n\\n1. [Rust and nvim](https://rsdlt.github.io/posts/rust-nvim-ide-guide-walkthrough-development-debug/)\\n","desc":"由于最近切换到了 linux,不可避免的经常需要使用 vi 等编辑器,所以这次好好折腾一下.","date":1664351977000,"update":1664351977000},{"title":"HTTP协议","url":"/content/posts/2022-09-28-http-protocol.html","frontmatter":{"layout":"post","title":"HTTP协议","date":"2022-09-28T04:19:15.000Z","tags":["network","http","interview"],"summary":"简介HTTP/1.1与H2."},"src":"\\n\\n> HTTP 1.1之前的实现就不讨论了,因为它们已经过时太久了,我上网的时候就已经接触不到了,所以主要说说HTTP/1.1、HTTP/2.\\n\\n## HTTP/1.1\\n\\n### HTTP/1.1协议报文简介\\n\\n> CRLF: `\\\\r\\\\n`\\n>\\n> METHOD: HTTP请求,`GET`、`POST`、`PUT`、`DELETE`...\\n>\\n> URI: 统一资源标识符,例如`/`,`/index.html`...\\n>\\n> HTTPVersion: HTTP协议的版本号,例如`HTTP/1.1`,`HTTP/2`\\n>\\n> HEADERS: 请求头,例如`Host:localhost`,`Accept: */*`.\\n>\\n> BODY: 请求体,例如说一个JSON数据`{\\"name\\":\\"fzdwx\\"}`\\n>\\n> HTTPStatus: HTTP响应状态,常见的有`200`,`404`等\\n>\\n> HTTPStatusDesc: HTTP响应状态描述,`200`对应的`OK`.\\n\\n#### 请求\\n\\n```txt\\nMETHOD<SPACE>URI<SPACE>HTTPVersion\\nHEADERS\\n<CRLF>\\nBODY\\n```\\n\\n示例:\\n\\n```http\\nGET /hello HTTP/1.1\\nHost: 192.168.1.107:8889\\nConnection: keep-alive\\nCache-Control: max-age=0\\nUpgrade-Insecure-Requests: 1\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\\nAccept-Encoding: gzip, deflate\\nAccept-Language: zh-CN,zh;q=0.9\\n```\\n\\n#### 响应\\n\\n```txt\\nHTTPVersion HTTPStatus HTTPStatusDesc\\nHEADERS\\n<CRLF>\\nBODY\\n```\\n\\n示例:\\n\\n> 如果响应中使用了`transfer-encoding: chunked`这个来替代`Content-Length`\\n> ,就表示这是一个不固定大小的响应,结尾通常用`0\\\\r\\\\n`来分割.\\n\\n```http\\nHTTP/1.1 200 OK\\ntransfer-encoding: chunked\\ncontent-type: application/json; charset=utf-8\\n\\n0/r/n\\n```\\n\\n### HTTP/1.1主要新特性\\n\\n1. 默认是长连接(`Connection: Keep-alive`),支持一个TCP连接处理多个请求.\\n2. 缓存策略,在请求头中使用`Cache-Control`,`Expires`,`Last-Modified`,`ETag`等来控制.\\n3. 允许响应分块,就是上面提到的`transfer-encoding: chunked`,允许服务端可以多次返回响应体.\\n\\n但是还是存在一定的问题,例如说如果有一个TCP连接阻塞了,还是会开启新的TCP连接进行处理请求.\\n\\n## H2\\n\\nHTTP2中的主要概念:\\n\\n1. `Connection`: 一个TCP连接包含一个或多个`Stream`,所有的通讯都在**一个TCP连接**上完成.\\n2. `Stream`: 一个可以双向通讯的数据流,包含一条或多条`Message`,每个数据流都一个**唯一标识符**以及**可选的优先级**信息.\\n3. `Message`: 对应HTTP/1.1中的请求或响应,包含一条或多条`Frame`.\\n4. `Frame`: **最小传输单位**,它以**二进制**进行编码.\\n\\n[HTTP通讯简图](/images/1.png)\\n\\n在HTTP/1.1中是有`Start Line` + `header` + `body` 组成的,而在H2中是由一个`HEADER Frame`以及多个`DATA Frame`组成的.\\n\\n![HTTP/1.1与H2报文组成的区别](/images/2.png)\\n\\n### Frame\\n\\n通常有一些公共的字段,例如`Length`,`Type`,`Flags`以及`Stream Id`；也各个类型所独有的字段.\\n\\n分类如下:\\n\\n- [DATA](https://halfrost.com/http2-http-frames-definitions/#toc-0): 用于传输http消息体.\\n- [HEADERS](https://halfrost.com/http2-http-frames-definitions/#toc-1): 用于传输首部字段.\\n- [PRIORITY](https://halfrost.com/http2-http-frames-definitions/#toc-2): 用于指定或重新指定引用资源的优先级.\\n- [RST_STREAM](https://halfrost.com/http2-http-frames-definitions/#toc-3): 用于通知流的非正常终止.\\n- [SETTINGS](https://halfrost.com/http2-http-frames-definitions/#toc-4): 用于约定客户端和服务端的配置数据.例如设置初识的双向流量控制窗口大小.\\n- [PUSH_PROMISE](https://halfrost.com/http2-http-frames-definitions/#toc-9): 服务端推送许可.\\n- [PING](https://halfrost.com/http2-http-frames-definitions/#toc-10): 用于计算往返时间,执行“ 活性” 检活.\\n- [GOAWAY](https://halfrost.com/http2-http-frames-definitions/#toc-11): 用于通知对端停止在当前连接中创建流.\\n- [WINDOW_UPDATE](https://halfrost.com/http2-http-frames-definitions/#toc-12): 用于调整个别流或个别连接的流量.\\n- [CONTINUATION](https://halfrost.com/http2-http-frames-definitions/#toc-17): 专门用于传递较大 HTTP 头部时的持续帧.\\n\\n### 为什么H2必须要走HTTPS？\\n\\n这其实在H2标准中没有规定,主要是为了更方便的进行HTTP协议的 升级/协商,确认一个Web服务器是否支持H2通常有两种方式:\\n\\n1. 在请求头中设置`Upgrade: HTTP/2.0`以及`Connection: Upgrade,HTTP2-Settings`等,类似升级到`Websocket`.\\n2. 使用`TLS`中的`ALPN`(Application Layer Protocol Negotiation,应用层协议协商)中的`ALPN Next Protocol`\\n   字段,在`Client Hello`与`Server Hello`这个阶段就可以确定下来.\\n\\n而现在的**浏览器**基本都是**实现的方式二**,即**与HTTPS绑定在一起**.但是如果我们不用浏览器进行访问,当然也可以不用HTTPS.\\n\\n详细可[参考](https://imququ.com/post/protocol-negotiation-in-http2.html).\\n\\n### 为什么H2能实现并行响应请求?\\n\\n在HTTP/1.1中,请求与响应是一一对应的,在同一个连接里,客户端依次发送两个请求,一段时间以后收到来自服务器的一个响应,这个响应一定是对应于第一个发出去的请求的.\\n因为**没有一个标志来表示哪个响应对应哪个请求**.\\n\\n而在H2中基于`Stream`和`Frame`的设计: **每个`Frame`都带有`Stream Id`来标识是否为同一个`Stream`里面的数据**,每个`Stream`\\n互不影响,这样就能做到在一个TCP里面连接里面传输多对请求/响应.\\n\\n## H2的新特性\\n\\nH2的对HTTP/1.1优化的核心就是 **使用尽可能少的连接数**.\\n\\n1. 多路复用: 只用一个TCP连接就能处理多对 请求/响应 ,不用在开启另外的TCP连接,就是通过`Stream`与`Frame`来实现的.\\n2. 二进制分帧: 使用`Frame`为最小单位进行通讯,并采用二进制编码.\\n3. [头部压缩](https://juejin.cn/post/7133238781452222472): 使用`HPACK`算法进行优化.\\n    - 维护一份相同的[静态字典](https://httpwg.org/specs/rfc7541.html#static.table.definition),包含常见的请求头的KV组合\\n    - 一份动态字典,可以动态的扩容(每个连接单独维护)\\n    - 支持哈夫曼编码([静态哈夫曼码表](https://httpwg.org/specs/rfc7541.html#huffman.code))\\n   > 在HTTP/1中消息体可以用gzip进行压缩,但是请求头通常没有任何压缩,有时候请求头的数据可能比请求体的数据还多.\\n4. 请求优先级: 一般在`HEADERS`帧与`PRIORITY`帧中携带,通常依赖于服务端的支持程度.\\n\\n## 工具\\n\\n### 生成测试签名\\n\\n```shell\\ngo run $GOROOT/src/crypto/tls/generate_cert.go --host localhost\\n```\\n\\n### 使用curl调试HTTPS\\n\\n```shell\\ncurl https://zcygov.cn -vv\\n```\\n\\n## Links\\n\\n- [Hypertext Transfer Protocol Version 2 (HTTP/2)](https://httpwg.org/specs/rfc7540.html)\\n- [HPACK: Header Compression for HTTP/2](https://httpwg.org/specs/rfc7541.html)\\n- [HTTP/2资料汇总](https://imququ.com/post/http2-resource.html)\\n- [HTTP/2中帧的定义](https://halfrost.com/http2-http-frames-definitions/)\\n- [HTTP/2新的机遇与挑战](https://www.dropbox.com/s/4duv6cqrhud4qzw/HTTP2%EF%BC%9A%E6%96%B0%E7%9A%84%E6%9C%BA%E9%81%87%E4%B8%8E%E6%8C%91%E6%88%98.pdf?dl=0)\\n- [探索http1.0到http3.0的发展史,详解http2.0](https://zhuanlan.zhihu.com/p/566351358)\\n- [HTTP/2相比1.0有哪些重大改进](https://www.zhihu.com/question/34074946/answer/2264788574)\\n","desc":"简介HTTP/1.1与H2.","date":1664338755000,"update":1664338755000},{"title":"一个linux中的应用程序 launcher: Rofi","url":"/content/posts/2022-09-18-about-rofi.html","frontmatter":{"layout":"post","title":"一个linux中的应用程序 launcher: Rofi","date":"2022-09-18T14:15:39.000Z","tags":["launcher","linux"]},"src":"\\n\\n> 今天发现了一个 linux 下的 application launcher [rofi](https://github.com/davatorium/rofi) ,它可以快速切换窗口和启动程序,\\n> 我用它和`wmctrl`进行配合使用.\\n\\n**我的使用过程:**\\n\\n1.Archlinux install\\n\\n```shell\\nyay -S rofi\\n```\\n\\n2.添加自定义快捷键绑定 hotkey 为`alt`+`space`触发`rofi -show`.\\n\\n3.press`alt`+`space`,然后使用`shift`+`left`or`right`进行切换 mode.\\n\\n---\\n\\n**更改主题以及显示 icon**:\\n\\n1.生成配置文件\\n\\n```shell\\nmkdir -p ~/.config/rofi\\nrofi -dump-config > ~/.config/rofi/config.rasi\\n```\\n\\n2.显示icon\\n\\n```shell\\nsed -i \'8c show-icons: true;\' ~/.config/rofi/config.rasi\\n```\\n\\n3.更换主题\\n\\n参考 https://github.com/lr-tech/rofi-themes-collection#installing-themes\\n\\n---\\n\\n**我的`wmctrl`的配置示例**:\\n\\n> 使用`xprop WM_CLASS`获取前缀.\\n\\n```shell\\nalias chrome=\\"wmctrl -x -a google-chrome || google-chrome-stable > /dev/null 2>&1 &\\"\\nalias note=\\"wmctrl -x -a obsidian || /usr/bin/obsidian > /dev/null 2>&1 &\\"\\nalias codew=\\"wmctrl -x -a code || /opt/code/code > /dev/null 2>&1 &\\"\\nalias idea=\\"wmctrl -x -a jetbrains-idea || /opt/idea/bin/idea.sh > /dev/null 2>&1 &\\"\\nalias discord=\\"wmctrl -x -a discord || /opt/discord/Discord > /dev/null 2>&1 &\\"\\n```\\n","desc":"<blockquote>\\n<p>今天发现了一个 linux 下的 application launcher <a href=\\"https://github.com/davatorium/rofi\\" target=\\"_blank\\" rel=\\"noreferrer\\">rofi</a> ,它可以快速切换窗口和启动程序,\\n我用它和<code>wmctrl</code>进行配合使用.</p>\\n</blockquote>\\n<p><strong>我的使用过程:</strong></p>\\n<p>1.Archlinux install</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">yay</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-S</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">rofi</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>2.添加自定义快捷键绑定 hotkey 为<code>alt</code>+<code>space</code>触发<code>rofi -show</code>.</p>\\n<p>3.press<code>alt</code>+<code>space</code>,然后使用<code>shift</code>+<code>left</code>or<code>right</code>进行切换 mode.</p>\\n<hr>\\n<p><strong>更改主题以及显示 icon</strong>:</p>\\n<p>1.生成配置文件</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">mkdir</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-p</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">~/.config/rofi</span></span>\\n<span class=\\"line\\"><span style=\\"color: #FFCB6B\\">rofi</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-dump-config</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">~/.config/rofi/config.rasi</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br></div></div><p>2.显示icon</p>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">sed</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">-i</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">8c show-icons: true;</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C3E88D\\">~/.config/rofi/config.rasi</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br></div></div><p>3.更换主题</p>\\n<p>参考 <a href=\\"https://github.com/lr-tech/rofi-themes-collection#installing-themes\\" target=\\"_blank\\" rel=\\"noreferrer\\">https://github.com/lr-tech/rofi-themes-collection#installing-themes</a></p>\\n<hr>\\n<p><strong>我的<code>wmctrl</code>的配置示例</strong>:</p>\\n<blockquote>\\n<p>使用<code>xprop WM_CLASS</code>获取前缀.</p>\\n</blockquote>\\n<div class=\\"language-shell line-numbers-mode\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">shell</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">alias</span><span style=\\"color: #A6ACCD\\"> chrome</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">wmctrl -x -a google-chrome || google-chrome-stable &gt; /dev/null 2&gt;&amp;1 &amp;</span><span style=\\"color: #89DDFF\\">&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">alias</span><span style=\\"color: #A6ACCD\\"> note</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">wmctrl -x -a obsidian || /usr/bin/obsidian &gt; /dev/null 2&gt;&amp;1 &amp;</span><span style=\\"color: #89DDFF\\">&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">alias</span><span style=\\"color: #A6ACCD\\"> codew</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">wmctrl -x -a code || /opt/code/code &gt; /dev/null 2&gt;&amp;1 &amp;</span><span style=\\"color: #89DDFF\\">&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">alias</span><span style=\\"color: #A6ACCD\\"> idea</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">wmctrl -x -a jetbrains-idea || /opt/idea/bin/idea.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><span style=\\"color: #89DDFF\\">&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">alias</span><span style=\\"color: #A6ACCD\\"> discord</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">wmctrl -x -a discord || /opt/discord/Discord &gt; /dev/null 2&gt;&amp;1 &amp;</span><span style=\\"color: #89DDFF\\">&quot;</span></span></code></pre>\\n<div class=\\"line-numbers-wrapper\\" aria-hidden=\\"true\\"><span class=\\"line-number\\">1</span><br><span class=\\"line-number\\">2</span><br><span class=\\"line-number\\">3</span><br><span class=\\"line-number\\">4</span><br><span class=\\"line-number\\">5</span><br></div></div>","date":1663510539000,"update":1663510539000}]'),Zs=/^[a-z]+:/i,Ks=()=>{const n=new Map,s=new Map;return Vs.forEach(a=>{var p;n.set(a.url,a);const e=a.frontmatter.layout;e&&((p=s.get(e))!=null&&p.push(a)||s.set(e,[a]))}),{pageMap:n,pageGroupByLayout:s}},{pageMap:Ys,pageGroupByLayout:Xs}=Ks(),Wn=n=>Ys.get(n),Js=(n,s)=>{let a="date";return s.sortBy&&(a=s.sortBy),n.sort((e,p)=>p[a]-e[a])},yn=(n,s)=>Js(Xs.get(n)||[],s),Qs="YYYY-MM-DD HH:mm:ss",xn=(n,s)=>(s===void 0&&(s=Qs),Sn(n).format(s)),Gn=(n,s)=>`/tags?layout=${n}&tag=${s}`,na=n=>{var s=sa(n);return s.length>100&&(s=s.slice(0,250)+"..."),s},sa=n=>(n=n.replace(/<\/?[^>]*>/g,""),n);function Dn(n,s,a){return n?s():a?a():null}function kn(n,s,a){return n?s:a||""}const En=({page:n,position:s})=>{const a=n.frontmatter.cover;return a?l("div",{className:`page-meta-cover ${"page-meta-cover-"+s}`},[l("img",{class:s==="top"?"":"h-[160px]",src:a.image},null)]):l("div",null,null)},aa=(n,s)=>n.map(a=>l("div",{class:"px-2  text-darkbg meta-tag py-1 bg-pink1 dark:text-dark-text dark:bg-slate-300/20 rounded-lg text-xs mr-2"},[l("a",{class:"",href:Gn(s,a)},[a])])),ea=({show:n,tags:s,layout:a})=>l("div",{class:`meta-tag-list flex flex-wrap ${n?" mt-3 ":" basis-3/5 flex-grow "}`},[aa(s,a)]),la=({editLinkPattern:n,relativePath:s,editLink:a})=>a||(typeof n=="function"?n(s):n.replace(":path",s)),pa=n=>{const{show:s,page:a,showEditLink:e,editLinkText:p}=n;return l("div",{class:"dark:text-dark-text/[.86]"},[l("div",{class:"inline-block text-sm mr-4"},[X("🕔 "),xn(a.date)]),a.date!=a.update&&s?l("div",{class:"inline-block text-sm mr-4"},[xn(a.update)]):l("span",null,null),e?l("div",{class:"inline-block"},[l("span",{class:"            pl-2 border-solid border-l-2            border-l-blue-1            dark:border-l-white/40            edit-link-border          "},null),l("a",{class:"",href:la(n),target:"_blank"},[p])]):l("span",null,null)])},Mn=I({__name:"PageMeta",props:{page:null,showEditLink:{type:Boolean}},setup(n){const s=n,a=H(),e=a.page.value.frontmatter.layout,o=L(()=>!(e==="home"||e==="tags"));return(i,d)=>(m(),E("div",{class:Q(["page-meta flex items-center",{"flex-col":u(o)}])},[l(u(pa),{editLinkPattern:u(a).theme.value.editLink.pattern,editLink:s.page.frontmatter.editLink,editLinkText:u(a).theme.value.editLink.text,relativePath:u(a).page.value.relativePath,page:n.page,show:u(o),showEditLink:n.showEditLink},null,8,["editLinkPattern","editLink","editLinkText","relativePath","page","show","showEditLink"]),n.page.frontmatter.tags?(m(),$(u(ea),{key:0,layout:u(e),tags:n.page.frontmatter.tags,show:u(o)},null,8,["layout","tags","show"])):N("",!0)],2))}}),qn=({hasCover:n,page:s})=>l("div",{class:n?"grid grid-flow-row-dense":""},[l("div",{class:"entry-header"},[l("h2",{class:"text-2xl"},[s.title])]),l("div",{class:`entry-content  123 ${n?" line-3 ":""} `},[l("p",{class:"text-4"},[na(s.desc)])]),l("div",{class:"entry-footer"},[l(Mn,{showEditLink:!1,page:s},null)])]),ta=({position:n,page:s})=>l(nn,null,[Dn(n==="top",()=>l("div",{class:"cover-top center mb-2"},[l(En,{position:n,page:s},null)])),Dn(n==="left",()=>l("div",{class:"cover-left row-span-3 pr-2"},[l(En,{position:n,page:s},null)]))]),oa=({position:n,page:s})=>l(nn,null,[Dn(n==="right",()=>l("div",{class:"cover-right row-span-3 pl-2"},[l(En,{position:n,page:s},null)]))]),ra=n=>{const{showCover:s,position:a,page:e}=n;return Dn(s,()=>l("div",{class:kn(a!=="top","grid grid-rows grid-flow-col")},[ta(n),l("div",{class:kn(a!=="top","col-span-3")},[l(qn,{class:"PageListItemContent",hasCover:s,page:e},null)]),oa(n)]),()=>l("div",null,[l(qn,{class:"PageListItemContent",hasCover:s,page:e},null)]))},ca={class:"pages main-content"},ia={class:"post-entry mr-10 ml-10"},ua=["aria-label","href"],Vn=I({__name:"PageList",props:{pages:null},setup(n){const s=e=>e.frontmatter.cover!==void 0,a=e=>e.frontmatter.cover&&e.frontmatter.cover.position?e.frontmatter.cover.position:"top";return(e,p)=>(m(),E("div",ca,[(m(!0),E(nn,null,mn(n.pages,o=>(m(),E("div",ia,[l(u(ra),{position:a(o),showCover:s(o),page:o},null,8,["position","showCover","page"]),k("a",{class:"entry-link","aria-label":o.title,href:o.url},null,8,ua)]))),256))]))}}),da={class:"Home"},ya={class:"home-content"},Da={class:"main-content"},ba=I({__name:"Home",setup(n){const{theme:s}=H(),a=L(()=>yn("post",s.value));return(e,p)=>{const o=Cn("Content");return m(),E("div",da,[k("main",ya,[k("article",Da,[l(o,{class:"home-intro vp-doc prose dark:prose-invert max-w-[800px] mr-20 ml-20 pb-8"})]),l(Vn,{pages:u(a)},null,8,["pages"])])])}}});const ma=j(ba,[["__scopeId","data-v-e100788f"]]),Zn=(n,{slots:s})=>{var a;return l("div",{class:"main-content-center"},[l("div",{class:"flex  items-center  justify-center"},[l("div",{class:"main-content-container "},[l("div",{class:"main-content-solot"},[(a=s.default)==null?void 0:a.call(s)])])])])},Ca=async n=>await(await fetch(`/issues/comment/${n}.json`)).json(),ha=n=>l("div",{class:"comment-main flex mx-auto my-8"},[l("header",null,[l("a",{class:"comment-userimg",target:"_blank",href:n.user.html_url},[l("img",{src:n.user.avatar_url,alt:n.user.login,class:"w-12 h-12"},null)])]),l("article",{class:"comment-article flex-1 ml-3"},[l("header",{class:"flex"},[l("a",{class:"comment-username",target:"_blank",href:n.user.html_url},[n.user.login]),l("time",{class:"comment-time mx-3",title:n.updated_at},[Sn(n.updated_at).format("MM-DD")]),l("div",{class:"flex-1"},null),l("a",{class:"comment-reply",target:"_blank",href:n.html_url},[X("回复")])]),l("section",{class:"comment-body my-3",innerHTML:n.body},null),l("footer",null,[" "])])]),Aa=I({props:{id:Number,editUrl:String},setup(n){const s=dn({value:[]}),a=async()=>{const e=await Ca(n.id);s.value=e};return _n(async()=>{await a()}),{state:s}},render(){return l("div",null,[l("div",null,[l("div",{class:"flex items-center my-8"},[l("div",{class:"flex-1 h-px bg-gray-300"},null),l("a",{target:"_blank",href:this.editUrl},[l("span",{class:"mx-4"},[X("💬")])]),l("div",{class:"flex-1 h-px bg-gray-300"},null)]),this.state.value.map(n=>ha(n))])])}}),Fa={class:"post-title text-center"},fa={key:0,class:"post-content"},ga=I({__name:"Post",setup(n){const s=Un(),a=L(()=>s.path.replace(/[./]+/g,"_").replace(/_html$/,"")),e=L(()=>Wn(s.path)),{site:p}=H(),o=()=>!!(p.value.themeConfig.issues&&p.value.themeConfig.issues.showComment);return(i,d)=>{const F=Cn("Content");return m(),$(u(Zn),null,{default:z(()=>[k("header",Fa,[k("h1",null,tn(u(e).title),1)]),l(Mn,{"show-edit-link":!0,page:u(e)},null,8,["page"]),l(F,{class:Q(["post-content vp-doc prose dark:prose-invert",u(a)])},null,8,["class"]),u(e).frontmatter.layout=="issue"&&o()?(m(),E("footer",fa,[l(u(Aa),{id:u(e).frontmatter.id,editUrl:u(e).frontmatter.editLink},null,8,["id","editUrl"])])):N("",!0)]),_:1})}}});const va=j(ga,[["__scopeId","data-v-7e7f58de"]]);var Bn;const Kn=typeof window<"u",wa=n=>typeof n=="string",xa=()=>{};Kn&&((Bn=window==null?void 0:window.navigator)!=null&&Bn.userAgent)&&/iP(ad|hone|od)/.test(window.navigator.userAgent);function Yn(n){return typeof n=="function"?n():u(n)}function ka(n,s){function a(...e){return new Promise((p,o)=>{Promise.resolve(n(()=>s.apply(this,e),{fn:s,thisArg:this,args:e})).then(p).catch(o)})}return a}const Xn=n=>n();function Ea(n=Xn){const s=hn(!0);function a(){s.value=!1}function e(){s.value=!0}const p=(...o)=>{s.value&&n(...o)};return{isActive:es(s),pause:a,resume:e,eventFilter:p}}function _a(n){return n}function Sa(n){return ls()?(ps(n),!0):!1}var $n=Object.getOwnPropertySymbols,Ma=Object.prototype.hasOwnProperty,Ta=Object.prototype.propertyIsEnumerable,qa=(n,s)=>{var a={};for(var e in n)Ma.call(n,e)&&s.indexOf(e)<0&&(a[e]=n[e]);if(n!=null&&$n)for(var e of $n(n))s.indexOf(e)<0&&Ta.call(n,e)&&(a[e]=n[e]);return a};function Ba(n,s,a={}){const e=a,{eventFilter:p=Xn}=e,o=qa(e,["eventFilter"]);return jn(n,ka(p,s),o)}var $a=Object.defineProperty,Pa=Object.defineProperties,La=Object.getOwnPropertyDescriptors,bn=Object.getOwnPropertySymbols,Jn=Object.prototype.hasOwnProperty,Qn=Object.prototype.propertyIsEnumerable,Pn=(n,s,a)=>s in n?$a(n,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[s]=a,Ia=(n,s)=>{for(var a in s||(s={}))Jn.call(s,a)&&Pn(n,a,s[a]);if(bn)for(var a of bn(s))Qn.call(s,a)&&Pn(n,a,s[a]);return n},Oa=(n,s)=>Pa(n,La(s)),Ra=(n,s)=>{var a={};for(var e in n)Jn.call(n,e)&&s.indexOf(e)<0&&(a[e]=n[e]);if(n!=null&&bn)for(var e of bn(n))s.indexOf(e)<0&&Qn.call(n,e)&&(a[e]=n[e]);return a};function Ha(n,s,a={}){const e=a,{eventFilter:p}=e,o=Ra(e,["eventFilter"]),{eventFilter:i,pause:d,resume:F,isActive:A}=Ea(p);return{stop:Ba(n,s,Oa(Ia({},o),{eventFilter:i})),pause:d,resume:F,isActive:A}}function Na(n){var s;const a=Yn(n);return(s=a==null?void 0:a.$el)!=null?s:a}const ns=Kn?window:void 0;function Ln(...n){let s,a,e,p;if(wa(n[0])||Array.isArray(n[0])?([a,e,p]=n,s=ns):[s,a,e,p]=n,!s)return xa;Array.isArray(a)||(a=[a]),Array.isArray(e)||(e=[e]);const o=[],i=()=>{o.forEach(w=>w()),o.length=0},d=(w,h,q,f)=>(w.addEventListener(h,q,f),()=>w.removeEventListener(h,q,f)),F=jn(()=>[Na(s),Yn(p)],([w,h])=>{i(),w&&o.push(...a.flatMap(q=>e.map(f=>d(w,q,f,h))))},{immediate:!0,flush:"post"}),A=()=>{F(),i()};return Sa(A),A}const In=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},On="__vueuse_ssr_handlers__";In[On]=In[On]||{};var Rn;(function(n){n.UP="UP",n.RIGHT="RIGHT",n.DOWN="DOWN",n.LEFT="LEFT",n.NONE="NONE"})(Rn||(Rn={}));var za=Object.defineProperty,Hn=Object.getOwnPropertySymbols,Ua=Object.prototype.hasOwnProperty,ja=Object.prototype.propertyIsEnumerable,Nn=(n,s,a)=>s in n?za(n,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[s]=a,Wa=(n,s)=>{for(var a in s||(s={}))Ua.call(s,a)&&Nn(n,a,s[a]);if(Hn)for(var a of Hn(s))ja.call(s,a)&&Nn(n,a,s[a]);return n};const Ga={easeInSine:[.12,0,.39,0],easeOutSine:[.61,1,.88,1],easeInOutSine:[.37,0,.63,1],easeInQuad:[.11,0,.5,0],easeOutQuad:[.5,1,.89,1],easeInOutQuad:[.45,0,.55,1],easeInCubic:[.32,0,.67,0],easeOutCubic:[.33,1,.68,1],easeInOutCubic:[.65,0,.35,1],easeInQuart:[.5,0,.75,0],easeOutQuart:[.25,1,.5,1],easeInOutQuart:[.76,0,.24,1],easeInQuint:[.64,0,.78,0],easeOutQuint:[.22,1,.36,1],easeInOutQuint:[.83,0,.17,1],easeInExpo:[.7,0,.84,0],easeOutExpo:[.16,1,.3,1],easeInOutExpo:[.87,0,.13,1],easeInCirc:[.55,0,1,.45],easeOutCirc:[0,.55,.45,1],easeInOutCirc:[.85,0,.15,1],easeInBack:[.36,0,.66,-.56],easeOutBack:[.34,1.56,.64,1],easeInOutBack:[.68,-.6,.32,1.6]};Wa({linear:_a},Ga);function zn(n="history",s={}){const{initialValue:a={},removeNullishValues:e=!0,removeFalsyValues:p=!1,write:o=!0,window:i=ns}=s;if(!i)return dn(a);const d=dn({});function F(){if(n==="history")return i.location.search||"";if(n==="hash"){const M=i.location.hash||"",x=M.indexOf("?");return x>0?M.slice(x):""}else return(i.location.hash||"").replace(/^#/,"")}function A(M){const x=M.toString();if(n==="history")return`${x?`?${x}`:""}${i.location.hash||""}`;if(n==="hash-params")return`${i.location.search||""}${x?`#${x}`:""}`;const _=i.location.hash||"#",W=_.indexOf("?");return W>0?`${_.slice(0,W)}${x?`?${x}`:""}`:`${_}${x?`?${x}`:""}`}function w(){return new URLSearchParams(F())}function h(M){const x=new Set(Object.keys(d));for(const _ of M.keys()){const W=M.getAll(_);d[_]=W.length>1?W:M.get(_)||"",x.delete(_)}Array.from(x).forEach(_=>delete d[_])}const{pause:q,resume:f}=Ha(d,()=>{const M=new URLSearchParams("");Object.keys(d).forEach(x=>{const _=d[x];Array.isArray(_)?_.forEach(W=>M.append(x,W)):e&&_==null||p&&!_?M.delete(x):M.set(x,_)}),R(M)},{deep:!0});function R(M,x){q(),x&&h(M),i.history.replaceState(i.history.state,i.document.title,i.location.pathname+A(M)),f()}function V(){o&&R(w(),!0)}Ln(i,"popstate",V,!1),n!=="history"&&Ln(i,"hashchange",V,!1);const Z=w();return Z.keys().next().value?h(Z):Object.assign(d,a),d}const Va={class:"Tags"},Za={class:"ml-10 md:ml-8 mb-8"},Ka={key:0},Ya={class:"pl-3 text-2xl"},Xa={class:"tag-list ml-10 md:ml-8 main-content"},Ja=["href","onClick"],Qa={class:"tags-content"},ne={class:"page-item-container"},se={class:"main"},ae=I({__name:"Tags",setup(n){const{layout:s,tag:a}=zn(),{theme:e}=H(),p=hn({layout:s,tag:a,allPages:yn(s,e.value),currentPages:[],tags:new Set}),o=async()=>{p.value.tags=new Set(p.value.allPages.map(h=>h.frontmatter.tags).flat())},i=async h=>{p.value.currentPages=h?p.value.allPages.filter(q=>{var f;return(f=q.frontmatter.tags)==null?void 0:f.includes(h)}):p.value.allPages},d=async h=>{o(),i(h)},F=h=>{h!==p.value.tag&&(p.value.tag=h,i(h))},A=ts();A.onAfterRouteChanged=h=>{const{layout:q,tag:f}=zn();p.value.tag=f,q!==p.value.layout?(p.value.layout=q,p.value.allPages=yn(q,e.value),d(f)):F(f)};const{frontmatter:w}=H();return d(p.value.tag),(h,q)=>(m(),E("div",Va,[k("main",null,[k("header",Za,[k("h1",null,[X(tn(u(w).layoutTitleMap[p.value.layout])+" ",1),p.value.tag?(m(),E("span",Ka,":")):N("",!0),k("span",Ya,tn(p.value.tag),1)])]),k("nav",Xa,[(m(!0),E(nn,null,mn(p.value.tags,f=>(m(),E("a",{href:u(Gn)(p.value.layout,f),onClick:R=>F(f),class:Q([{"text-cyna-3":f===p.value.tag},"tag"])},tn(f),11,Ja))),256))]),k("div",Qa,[k("div",ne,[k("div",se,[l(Vn,{pages:p.value.currentPages},null,8,["pages"])])])])])]))}});const ee=j(ae,[["__scopeId","data-v-5f22f675"]]),le=I({__name:"Link",props:{tag:null,href:null,noIcon:{type:Boolean},target:null,rel:null},setup(n){const s=n,a=L(()=>s.tag??s.href?"a":"span"),e=L(()=>s.href&&Zs.test(s.href));return(p,o)=>(m(),$(un(u(a)),{class:Q(["VPLink",{link:n.href}]),href:n.href?u(Ss)(n.href):void 0,target:n.target||(u(e)?"_blank":void 0),rel:n.rel||(u(e)?"noreferrer":void 0)},{default:z(()=>[U(p.$slots,"default",{},void 0,!0),u(e)&&!n.noIcon?(m(),$(_s,{key:0,class:"icon"})):N("",!0)]),_:3},8,["class","href","target","rel"]))}});const pe=j(le,[["__scopeId","data-v-12342106"]]),te=n=>(An("data-v-b0318327"),n=n(),Fn(),n),oe=["role","tabindex"],re=te(()=>k("div",{class:"indicator"},null,-1)),ce=["onKeydown"],ie={key:1,class:"items"},ue=I({__name:"SidebarItem",props:{item:null,depth:null,hasSidebar:{type:Boolean}},setup(n){const s=n,{collapsed:a,collapsible:e,isLink:p,isActiveLink:o,hasActiveLink:i,hasChildren:d,toggle:F}=Ms(L(()=>s.item)),A=L(()=>d.value?"section":"div"),w=L(()=>p.value?"a":"div"),h=L(()=>d.value?s.depth+2===7?"p":`h${s.depth+2}`:"p"),q=L(()=>p.value?void 0:"button"),f=L(()=>[[`level-${s.depth}`],{collapsible:e.value},{collapsed:a.value},{"is-link":p.value},{"is-active":o.value},{"has-active":i.value}]);function R(Z){"key"in Z&&Z.key!=="Enter"||!s.item.link&&F()}function V(){s.item.link&&F()}return(Z,M)=>{const x=Cn("SidebarItem",!0);return m(),$(un(u(A)),{class:Q(["VPSidebarItem",u(f)])},{default:z(()=>[n.item.text?(m(),E("div",os({key:0,class:"item",role:u(q)},rs(n.item.items?{click:R,keydown:R}:{},!0),{tabindex:n.item.items&&0}),[re,n.item.link?(m(),$(pe,{key:0,tag:u(w),class:"link",href:n.item.link},{default:z(()=>[(m(),$(un(u(h)),{class:"text",innerHTML:n.item.text},null,8,["innerHTML"]))]),_:1},8,["tag","href"])):(m(),$(un(u(h)),{key:1,class:"text",innerHTML:n.item.text},null,8,["innerHTML"])),n.item.collapsed!=null?(m(),E("div",{key:2,class:"caret",role:"button","aria-label":"toggle section",onClick:V,onKeydown:cs(V,["enter"]),tabindex:"0"},[l(Ts,{class:"caret-icon"})],40,ce)):N("",!0)],16,oe)):N("",!0),n.item.items&&n.item.items.length?(m(),E("div",ie,[n.depth<5?(m(!0),E(nn,{key:0},mn(n.item.items,_=>(m(),$(x,{"has-sidebar":n.hasSidebar,key:_.text,item:_,depth:n.depth+1},null,8,["has-sidebar","item","depth"]))),128)):N("",!0)])):N("",!0)]),_:1},8,["class"])}}});const de=j(ue,[["__scopeId","data-v-b0318327"]]),ss=n=>(An("data-v-54c46c04"),n=n(),Fn(),n),ye=ss(()=>k("div",{class:"curtain"},null,-1)),De={class:"nav",id:"VPSidebarNav","aria-labelledby":"sidebar-aria-label",tabindex:"-1"},be=ss(()=>k("span",{class:"visually-hidden",id:"sidebar-aria-label"}," Sidebar Navigation ",-1)),me=I({__name:"Sidebar",props:{open:{type:Boolean},hasSidebar:{type:Boolean},sidebarGroups:null},setup(n){const s=n;let a=hn(null);function e(){qs(a.value,{reserveScrollBarGap:!0})}function p(){Bs()}return is(async()=>{var o;s.open?(e(),(o=a.value)==null||o.focus()):p()}),(o,i)=>n.hasSidebar?(m(),E("aside",{key:0,class:Q(["VPSidebar",{open:n.open}]),ref_key:"navEl",ref:a,onClick:i[0]||(i[0]=us(()=>{},["stop"]))},[ye,k("nav",De,[be,U(o.$slots,"sidebar-nav-before",{},void 0,!0),(m(!0),E(nn,null,mn(n.sidebarGroups,d=>(m(),E("div",{key:d.text,class:"group"},[l(de,{"has-sidebar":n.hasSidebar,item:d,depth:0},null,8,["has-sidebar","item"])]))),128)),U(o.$slots,"sidebar-nav-after",{},void 0,!0)])],2)):N("",!0)}});const Ce=j(me,[["__scopeId","data-v-54c46c04"]]),he=n=>n?l("header",{class:"post-title center"},[l("h1",null,[n.title])]):l("div",null,null),Ae=n=>n?l("div",null,[l(Mn,{showEditLink:!0,page:n,class:"center mt-10 md:mt-6"},null)]):l("div",null,null),Fe=()=>{const n=Un(),s=L(()=>Wn(n.path)),{theme:a}=H(),e=L(()=>{const o=yn("doc",a.value),i=new Map;return o.map(d=>{var A;const F=d.frontmatter.group?d.frontmatter.group:"Others";i.get(F)===void 0?i.set(F,[d]):(A=i.get(F))==null||A.push(d)}),i}),p=L(()=>{const o=[];return e.value.forEach((i,d)=>{const F={text:d,items:i.sort((A,w)=>A.frontmatter.order===void 0?-1:w.frontmatter.order===void 0?1:w.frontmatter.order-A.frontmatter.order).map(A=>({text:A.title,link:A.url}))};o.push(F)}),o});return l("div",{class:"center"},[l(Ce,{sidebarGroups:p.value,open:!1,hasSidebar:!0},null),l($s,{class:"  prose dark:prose-invert"},{"doc-before":()=>l("div",{class:" not-prose doc-meta "},[he(s.value),Ae(s.value)])})])},fe=({item:n})=>l("div",{class:" w-[95%] min-w-[400px] md:w-[700px] xl:w-[800px] 2xl:w-[800px] flex flex-row links-feed-div"},[l("header",{class:"basis-1/6 opacity-50"},[xn(n.time,"M/DD")]),l("section",{class:" hover:text-dark-red  basis-2/3 whitespace-nowrap overflow-hidden w-full"},[l("a",{target:"_blank",class:"links-feed-item",href:n.url,noIcon:!0},[n.title])]),l("footer",{class:" invisible sm:visible mr-5 basis-1/6 opacity-50 text-ellipsis whitespace-nowrap overflow-hidden w-full"},[n.name])]),ge=({itemsGroup:n})=>l("div",null,[Object.keys(n).map(s=>l("div",{class:"flex flex-col my-10"},[l("h3",{class:"text-2xl font-bold mb-2"},[s]),n[s].map(a=>l(fe,{class:"ml-5",item:a},null))]))]),ve={class:"mt-10 center"},we=I({__name:"Links",setup(n){const s=async()=>{const{frontmatter:p}=H();return(await(await fetch(p.value.feedsUrl||"/links.json")).json()).items},a=dn({itemsGroup:{}});_n(async()=>{const p=(await s()).sort((o,i)=>new Date(i.time).getTime()-new Date(o.time).getTime());a.itemsGroup=p.reduce((o,i)=>{const d=Sn(i.time).format("YYYY 年 M 月");return o[d]||(o[d]=[]),o[d].push(i),o},{})});const{frontmatter:e}=H();return(p,o)=>(m(),$(u(Zn),null,{default:z(()=>[k("header",ve,[k("h1",null,tn(u(e).title||"Links"),1)]),l(u(ge),{itemsGroup:u(a).itemsGroup},null,8,["itemsGroup"])]),_:1}))}}),xe={key:5},ke=I({__name:"ContentDispatch",setup(n){const{frontmatter:s}=H(),a=()=>{const e=s.value;return e.layout==="post"||e.layout==="issue"||e.layout==="tags"||e.layout==="links"};return(e,p)=>{const o=Cn("Content");return m(),E("div",{class:Q(["ContentDispatch",{"is-home":u(s).layout==="home","should-mb":a()}])},[u(s).layout==="home"?(m(),$(ma,{key:0})):u(s).layout==="post"||u(s).layout==="issue"?(m(),$(va,{key:1})):u(s).layout==="doc"?(m(),$(u(Fe),{key:2})):u(s).layout==="tags"?(m(),$(ee,{key:3})):u(s).layout==="links"?(m(),$(we,{key:4})):(m(),E("div",xe,[l(o)]))],2)}}});const Ee=j(ke,[["__scopeId","data-v-f17091f7"]]),_e={},Se={class:"text-3xl font-bold flex justify-center mt-[20%]"};function Me(n,s){return m(),E("h1",Se,"404 Page Not Found")}const Te=j(_e,[["render",Me]]),qe=n=>(An("data-v-d1627d94"),n=n(),Fn(),n),Be={class:"VPNavBar"},$e={class:"container"},Pe={class:"title"},Le={class:"content"},Ie=qe(()=>k("div",{class:"curtain"},null,-1)),Oe={class:"content-body"},Re=["src"],He=I({__name:"NavBar",setup(n){const{site:s}=H();return(a,e)=>(m(),E("div",Be,[k("div",$e,[k("div",Pe,[l(Ps,null,{"nav-bar-title-before":z(()=>[U(a.$slots,"nav-bar-title-before",{},void 0,!0)]),"nav-bar-title-after":z(()=>[U(a.$slots,"nav-bar-title-after",{},void 0,!0)]),_:3})]),k("div",Le,[Ie,k("div",Oe,[U(a.$slots,"nav-bar-content-before",{},void 0,!0),l(Ls,{class:"search"}),u(s).themeConfig.icon?(m(),E("img",{key:0,class:"nav-icon",src:u(s).themeConfig.icon},null,8,Re)):N("",!0),l(Is,{class:"menu"}),l(Os,{class:"translations"}),l(Rs,{class:"appearance"}),l(Hs,{class:"social-links"}),l(Ns,{class:"extra"}),U(a.$slots,"nav-bar-content-after",{},void 0,!0),l(zs,{class:"hamburger",active:!0,onClick:e[0]||(e[0]=p=>a.$emit("toggle-screen"))})])])])]))}});const Ne=j(He,[["__scopeId","data-v-d1627d94"]]),ze=n=>(An("data-v-a2c55d94"),n=n(),Fn(),n),Ue={class:"Nav"},je=ze(()=>k("div",{class:"fixed header-bar"},null,-1)),We=I({__name:"Nav",setup(n){return(s,a)=>(m(),E("header",Ue,[je,l(Ne,null,{"nav-bar-title-before":z(()=>[U(s.$slots,"nav-bar-title-before",{},void 0,!0)]),"nav-bar-title-after":z(()=>[U(s.$slots,"nav-bar-title-after",{},void 0,!0)]),"nav-bar-content-before":z(()=>[]),"nav-bar-content-after":z(()=>[U(s.$slots,"nav-bar-content-after",{},void 0,!0)]),_:3})]))}});const Ge=j(We,[["__scopeId","data-v-a2c55d94"]]),Ve={key:0,class:"Layout"},Ze=k("div",{class:"my-[100px]"},null,-1),Ke=I({__name:"Layout",setup(n){const{page:s,frontmatter:a}=H();return(e,p)=>u(a).layout!==!1?(m(),E("div",Ve,[l(Ge),u(s).isNotFound?(m(),$(Te,{key:0})):(m(),$(Ee,{key:1})),Ze,l(Us,{class:""})])):N("",!0)}});const Ye=(n,{slots:s})=>{var a;return l("div",{class:"center"},[s.default?(a=s.default)==null?void 0:a.call(s):l("span",null,null)])},Xe=({id:n,user:s,height:a})=>l(nn,null,[l("iframe",{class:" gist-iframe  w-full "+(a||"  h-60 "),src:`https://gist.github.com/${s}/${n}.pibb`},null)]);const Je=(n,s)=>{if(window==null)return;const a=window.localStorage;let e=a.getItem(`douban-movie-${n}`);if(!e)fetch(`https://douban.8610000.xyz/data/${n}.json`).then(p=>{p.json().then(o=>{a.setItem(`douban-movie-${n}`,JSON.stringify(o)),s.value=o}).catch(o=>{console.log(o)})});else{const p=JSON.parse(e);s.value=p}},Qe=n=>n==null?"未知":n.map(s=>s.name).join(","),nl=({code:n,to:s})=>{var p,o,i,d,F,A,w,h;const a=hn();Je(n,a);const e=L(()=>a.value);return l("div",{class:"post-preview"},[l("div",{class:"post-preview--meta"},[l("div",{class:"post-preview--middle"},[l("div",{class:"post-preview--title"},[l("a",{target:"_blank",style:"box-shadow: none; font-weight: bolder;",href:kn(s==null,`https://movie.douban.com/subject/${n}/`,s)},[(p=e.value)==null?void 0:p.title])]),l("div",{class:"rating"},[l("div",{class:`rating-star allstar ${Math.ceil(((o=e.value)==null?void 0:o.rating.value)||0)}`},null),l("div",{class:"rating-average"},[X(" "),(i=e.value)==null?void 0:i.rating.value])]),l("time",{class:"post-preview--date"},[X("导演:"),Qe(((d=e.value)==null?void 0:d.directors)||[{}]),X("/ 类型："),(F=e.value)==null?void 0:F.genres,X(" / 上映时间："),(A=e.value)==null?void 0:A.year]),l("section",{style:"max-height:75px;overflow:hidden;",class:"post-preview--excerpt"},[(w=e.value)==null?void 0:w.intro.replace(/\s*/g,"")])])]),l("img",{referrerpolicy:"no-referrer",loading:"lazy",class:"post-preview--image",src:(h=e.value)==null?void 0:h.pic.normal},null)])},sl=n=>{n.component("Center",Ye),n.component("Gist",Xe),n.component("Douban",nl)};const al={...js,Layout:Ke,enhanceApp({app:n,router:s,siteData:a}){sl(n)}};function as(n){if(n.extends){const s=as(n.extends);return{...s,...n,async enhanceApp(a){s.enhanceApp&&await s.enhanceApp(a),n.enhanceApp&&await n.enhanceApp(a)}}}return n}const an=as(al),el=I({name:"VitePressApp",setup(){const{site:n}=H();return _n(()=>{ys(()=>{document.documentElement.lang=n.value.lang,document.documentElement.dir=n.value.dir})}),Ds(),bs(),ms(),an.setup&&an.setup(),()=>Cs(an.Layout)}});async function ll(){const n=tl(),s=pl();s.provide(hs,n);const a=As(n.route);return s.provide(Fs,a),s.component("Content",fs),s.component("ClientOnly",gs),Object.defineProperties(s.config.globalProperties,{$frontmatter:{get(){return a.frontmatter.value}},$params:{get(){return a.page.value.params}}}),an.enhanceApp&&await an.enhanceApp({app:s,router:n,siteData:vs}),{app:s,router:n,data:a}}function pl(){return ws(el)}function tl(){let n=vn,s;return xs(a=>{let e=ks(a);return n&&(s=e),(n||s===e)&&(e=e.replace(/\.js$/,".lean.js")),vn&&(n=!1),Es(()=>import(e),[])},an.NotFound)}vn&&ll().then(({app:n,router:s,data:a})=>{s.go().then(()=>{ds(s.route,a.site),n.mount("#app")})});export{Ws as c,ll as createApp};
