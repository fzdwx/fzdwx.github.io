import{_ as s,c as n,o as a,O as l}from"./chunks/framework.76b8e124.js";const A=JSON.parse('{"title":"并发控制-互斥","description":"","frontmatter":{"group":"ostep","title":"并发控制-互斥","date":"2023-03-28T20:09:47+08:00","layout":"doc","tags":["os","mutex"],"summary":"互斥是一种并发控制机制，用于保证在同一时刻只有一个线程可以访问共享资源。","order":100000000000000},"headers":[],"relativePath":"content/docs/ostep/2023-03-28-ostep-mutex.md"}'),p={name:"content/docs/ostep/2023-03-28-ostep-mutex.md"},o=l(`<h2 id="为什么需要互斥" tabindex="-1">为什么需要互斥? <a class="header-anchor" href="#为什么需要互斥" aria-label="Permalink to &quot;为什么需要互斥?&quot;">​</a></h2><ol><li>从指令集的角度看, 一个简单的 ++ 操作可能会被编译为 3 条, load -&gt; add -&gt; store, 一条指令是原子的, 但是 3 条指令就不一定了 —— 操作系统的 Trap 机制</li><li>假如这个程序是多线程的, 且这个变量是共享的, 那么就会竞态条件, 比如说第一个线程 load 了 0 并进行 add 得到 1, 在它 store 之前,它被切换出去了, 然后第二个线程来了并运行了一套 load -&gt;add -&gt; store 写入了 0. 这样当第一个线程再次运行时它不知道第二个线程已经对这个变量进行了操作, 从而导致了错误的结果.</li></ol><h2 id="怎么实现互斥" tabindex="-1">怎么实现互斥? <a class="header-anchor" href="#怎么实现互斥" aria-label="Permalink to &quot;怎么实现互斥?&quot;">​</a></h2><h3 id="原子交换" tabindex="-1">原子交换 <a class="header-anchor" href="#原子交换" aria-label="Permalink to &quot;原子交换&quot;">​</a></h3><p>这是一种通过硬件指令实现的互斥, 也是最简单的一种, 但是它的效率不高, 下面是一个简单的示例:</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Mutex</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    locked </span><span style="color:#C792EA;">int32</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Mutex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Lock</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xchg</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">locked</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// spin</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">locked </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Mutex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Unlock</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">locked </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xchg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int32</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> new </span><span style="color:#C792EA;">int32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  old </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">addr</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">addr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> new</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> old</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>当第一个线程调用了 Lock() 时, 它会将 locked 的值从 0 改为 1, 但是当第二个线程调用 Lock() 时, 它会发现 locked 的值已经是 1 了, 所以它会一直 spin 等待第一个线程将 locked 的值改为 0, 这样就实现了互斥.</p><p>而 xchg 就是操作系统提供给我们的一个原子交换指令, 它的作用是将 addr 的值与 new 交换, 并返回 addr 的旧值.</p><h3 id="能不能更高效点" tabindex="-1">能不能更高效点? <a class="header-anchor" href="#能不能更高效点" aria-label="Permalink to &quot;能不能更高效点?&quot;">​</a></h3><p>上面这种锁的优点就是实现简单, 就是会浪费很多 CPU 时间, 比如说一个线程在等待另一个线程释放锁时, 它会一直 spin 等待, 这样就会浪费很多 CPU 时间</p><h4 id="主动出让时间片" tabindex="-1">主动出让时间片 <a class="header-anchor" href="#主动出让时间片" aria-label="Permalink to &quot;主动出让时间片&quot;">​</a></h4><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Mutex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Lock</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xchg</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">locked</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">yield</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">locked </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当 xchg 失败时, 可以主动调用 yield() 出让时间片, 这样就不会浪费 CPU 时间了.</p><p>但是这样同样也有个问题, 假如有很多线程都在等待这个锁, 那么它们都会主动出让时间片, 这样同样效率也很低, 因为这个涉及到线程的切换</p><h4 id="休眠" tabindex="-1">休眠 <a class="header-anchor" href="#休眠" aria-label="Permalink to &quot;休眠&quot;">​</a></h4><p>使用休眠的方式来实现互斥, 假设有一个线程列表存放获取这把锁的线程, 当它获取锁失败时就放入休眠列表, 当锁被释放时, 就唤醒休眠列表中的线程.</p><p>在 linux 中, futex 就是实现了类似这种机制</p>`,17),e=[o];function r(c,t,D,y,C,i){return a(),n("div",null,e)}const d=s(p,[["render",r]]);export{A as __pageData,d as default};
